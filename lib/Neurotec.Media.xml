<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neurotec.Media</name>
    </assembly>
    <members>
        <member name="T:Neurotec.Drawing.Point3F">
            <summary>
            Represents point.
            </summary>       
        </member>
        <member name="F:Neurotec.Drawing.Point3F.Empty">
            <summary>
            Represents a PointF that is a null reference.
            </summary>                                   
        </member>
        <member name="M:Neurotec.Drawing.Point3F.Add(Neurotec.Drawing.Point3F,Neurotec.Drawing.Point3F)">
            <summary>
            Add points.
            </summary>
            <param name="left">Point to add.</param>
            <param name="right">Point to add.</param>
            <returns>
            New Point3F object sum of two points. 
            </returns>             
        </member>
        <member name="M:Neurotec.Drawing.Point3F.Subtract(Neurotec.Drawing.Point3F,Neurotec.Drawing.Point3F)">
            <summary>
            Subtract right point from left point.
            </summary>
            <param name="left">Point to subtract from.</param>
            <param name="right">Point to subtract.</param>
            <returns>
            New Point3F object subtraction of two right point from left point. 
            </returns>                               
        </member>
        <member name="M:Neurotec.Drawing.Point3F.op_Addition(Neurotec.Drawing.Point3F,Neurotec.Drawing.Point3F)">
            <summary>
            Add points.
            </summary>
            <param name="left">Point to add.</param>
            <param name="right">Point to add.</param>
            <returns>
            New Point3F object sum of two points. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.Point3F.op_Subtraction(Neurotec.Drawing.Point3F,Neurotec.Drawing.Point3F)">
            <summary>
            Subtract right point from left point.
            </summary>
            <param name="left">Point to subtract from.</param>
            <param name="right">Point to subtract.</param>
            <returns>
            New Point3F object subtraction of two right point from left point. 
            </returns>                                          
        </member>
        <member name="M:Neurotec.Drawing.Point3F.op_Equality(Neurotec.Drawing.Point3F,Neurotec.Drawing.Point3F)">
            <summary>
            Checks if two points are equal.
            </summary>
            <param name="left">First Point3F object to compare.</param>
            <param name="right">Second Point3F object to compare.</param>
            <returns>
            True if point coordinates are equal, false otherwise.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.Point3F.op_Inequality(Neurotec.Drawing.Point3F,Neurotec.Drawing.Point3F)">
            <summary>
            Checks if two points are not equal.
            </summary>
            <param name="left">First Point3F to be compared.</param>
            <param name="right">Second Point3F to be compared.</param>
            <returns>
            True if points are not equal, false otherwise.
            </returns>                                               
        </member>
        <member name="M:Neurotec.Drawing.Point3F.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Point3F class.
            </summary>
            <param name="x">X coordinate of a point.</param>
            <param name="y">Y coordinate of a point.</param>
            <param name="z">Y coordinate of a point.</param>
        </member>
        <member name="M:Neurotec.Drawing.Point3F.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the
            current Object.
            </summary>
            <param name="obj">The Object to compare with the current
                              Object.</param>
            <returns>
            True if the specified Object is equal to the current Object;
            otherwise, false.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.Point3F.GetHashCode">
            <summary>
            Gets the hash code. Is intended for a hash function for a
            particular type. GetHashCode is suitable for use in hashing
            
            algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current Object.
            </returns>                                                 
        </member>
        <member name="M:Neurotec.Drawing.Point3F.ToString">
            <summary>
            Retrieves string representation of the specified object.
            </summary>
            <returns>
            String representation of an object.
            </returns>                                              
        </member>
        <member name="P:Neurotec.Drawing.Point3F.IsEmpty">
            <summary>
            Gets boolean value indicating whether current Object is
            empty.
            </summary>                                             
        </member>
        <member name="P:Neurotec.Drawing.Point3F.X">
            <summary>
            Gets or sets X coordinate of this PointD.
            </summary>                               
        </member>
        <member name="P:Neurotec.Drawing.Point3F.Y">
            <summary>
            Gets or sets Y coordinate of this PointD.
            </summary>                               
        </member>
        <member name="P:Neurotec.Drawing.Point3F.Z">
            <summary>
            Gets or sets Z coordinate of this PointD.
            </summary>                               
        </member>
        <member name="T:Neurotec.Drawing.Point">
            <summary>
            Represents point.
            </summary>       
        </member>
        <member name="F:Neurotec.Drawing.Point.Empty">
            <summary>
            Represents a PointF that is a null reference.
            </summary>                                   
        </member>
        <member name="M:Neurotec.Drawing.Point.Add(Neurotec.Drawing.Point,Neurotec.Drawing.Size)">
            <summary>
            Increases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">Size to be increased by.</param>
            <returns>
            New PointD object with increased coordinates.
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.Point.Subtract(Neurotec.Drawing.Point,Neurotec.Drawing.Size)">
            <summary>
            Decreases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">SizeF to be decreased by.</param>
            <returns>
            New PointD object with decreased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.Point.op_Addition(Neurotec.Drawing.Point,Neurotec.Drawing.Size)">
            <summary>
            Increases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">Size to be increased by.</param>
            <returns>
            New PointD object with increased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.Point.op_Subtraction(Neurotec.Drawing.Point,Neurotec.Drawing.Size)">
            <summary>
            Decreases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">Size to be decreased by.</param>
            <returns>
            New PointD object with decreased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.Point.op_Equality(Neurotec.Drawing.Point,Neurotec.Drawing.Point)">
            <summary>
            Checks if two points are equal.
            </summary>
            <param name="left">First PointD object to compare.</param>
            <param name="right">Second PointD object to compare.</param>
            <returns>
            True if point coordinates are equal, false otherwise.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.Point.op_Inequality(Neurotec.Drawing.Point,Neurotec.Drawing.Point)">
            <summary>
            Checks if two points are not equal.
            </summary>
            <param name="left">First PointD to be compared.</param>
            <param name="right">Second PointD to be compared.</param>
            <returns>
            True if points are not equal, false otherwise.
            </returns>                                               
        </member>
        <member name="M:Neurotec.Drawing.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the PointD class.
            </summary>
            <param name="x">X coordinate of a point.</param>
            <param name="y">Y coordinate of a point.</param>
        </member>
        <member name="M:Neurotec.Drawing.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the
            current Object.
            </summary>
            <param name="obj">The Object to compare with the current
                              Object.</param>
            <returns>
            True if the specified Object is equal to the current Object;
            otherwise, false.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.Point.GetHashCode">
            <summary>
            Gets the hash code. Is intended for a hash function for a
            particular type. GetHashCode is suitable for use in hashing
            
            algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current Object.
            </returns>                                                 
        </member>
        <member name="M:Neurotec.Drawing.Point.ToString">
            <summary>
            Retrieves string representation of the specified object.
            </summary>
            <returns>
            String representation of an object.
            </returns>                                              
        </member>
        <member name="P:Neurotec.Drawing.Point.IsEmpty">
            <summary>
            Gets boolean value indicating whether current Object is
            empty.
            </summary>                                             
        </member>
        <member name="P:Neurotec.Drawing.Point.X">
            <summary>
            Gets or sets X coordinate of this PointD.
            </summary>                               
        </member>
        <member name="P:Neurotec.Drawing.Point.Y">
            <summary>
            Gets or sets Y coordinate of this PointD.
            </summary>                               
        </member>
        <member name="T:Neurotec.Drawing.Size">
            <summary>
            Represents size.
            </summary>      
        </member>
        <member name="F:Neurotec.Drawing.Size.Empty">
            <summary>
            Represents a SizeD that is a null reference. 
            </summary>                                   
        </member>
        <member name="M:Neurotec.Drawing.Size.Add(Neurotec.Drawing.Size,Neurotec.Drawing.Size)">
            <summary>
            Adds width and height fields of two SizeD objects and creates
            new one with results.
            </summary>
            <param name="sz1">First SizeD object.</param>
            <param name="sz2">Second SizeD object.</param>
            <returns>
            SizeD object. 
            </returns>                                                   
        </member>
        <member name="M:Neurotec.Drawing.Size.Subtract(Neurotec.Drawing.Size,Neurotec.Drawing.Size)">
            <summary>
            Subtracts width and height fields of two SizeD objects and
            creates new one with results.
            </summary>
            <param name="sz1">First SizeD object.</param>
            <param name="sz2">Second SizeD object.</param>
            <returns>
            SizeD object. 
            </returns>                                                
        </member>
        <member name="M:Neurotec.Drawing.Size.op_Addition(Neurotec.Drawing.Size,Neurotec.Drawing.Size)">
            <summary>
            Adds width and height fields of two SizeD objects and creates
            new one with results.
            </summary>
            <param name="sz1">First SizeD object.</param>
            <param name="sz2">Second SizeD object.</param>
            <returns>
            SizeD object. 
            </returns>                                                   
        </member>
        <member name="M:Neurotec.Drawing.Size.op_Subtraction(Neurotec.Drawing.Size,Neurotec.Drawing.Size)">
            <summary>
            Subtracts width and height fields of two SizeD objects and
            creates new one with results.
            </summary>
            <param name="sz1">First SizeD object.</param>
            <param name="sz2">Second SizeD object.</param>
            <returns>
            SizeD object. 
            </returns>                                                
        </member>
        <member name="M:Neurotec.Drawing.Size.op_Equality(Neurotec.Drawing.Size,Neurotec.Drawing.Size)">
            <summary>
            Checks if two SizeD objects are equal.
            </summary>
            <param name="sz1">First SizeD object.</param>
            <param name="sz2">Second SizeD object.</param>
            <returns>
            True if objects are equal, false otherwise. 
            </returns>                                    
        </member>
        <member name="M:Neurotec.Drawing.Size.op_Inequality(Neurotec.Drawing.Size,Neurotec.Drawing.Size)">
            <summary>
            Checks if two SizeD objects are not equal.
            </summary>
            <param name="sz1">First SizeD object.</param>
            <param name="sz2">Second SizeD object.</param>
            <returns>
            True if objects are not equal, false otherwise. 
            </returns>                                      
        </member>
        <member name="M:Neurotec.Drawing.Size.op_Explicit(Neurotec.Drawing.Size)~Neurotec.Drawing.Point">
            <unfinished />
            
            <summary>
            \ \ 
            </summary>
            <param name="size">_nt_</param>
        </member>
        <member name="M:Neurotec.Drawing.Size.#ctor(Neurotec.Drawing.Size)">
            <summary>
            Initializes a new instance of the SizeD class.
            </summary>
            <param name="size">SizeD object.</param>      
        </member>
        <member name="M:Neurotec.Drawing.Size.#ctor(Neurotec.Drawing.Point)">
            <summary>
            Initializes a new instance of the SizeD class.
            </summary>
            <param name="pt">PointD object. Width will be set to X value
                             of this object, height \- to y.</param>    
        </member>
        <member name="M:Neurotec.Drawing.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the SizeD class.
            </summary>
            <param name="width">Value indicating width.</param>
            <param name="height">Value indicating height.</param>
        </member>
        <member name="M:Neurotec.Drawing.Size.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the
            current Object.
            </summary>
            <param name="obj">The Object to compare with the current
                              Object.</param>
            <returns>
            True if the specified Object is equal to the current Object;
            otherwise, false. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.Size.GetHashCode">
            <summary>
            Gets the hash code. Is intended for a hash function for a
            particular type. GetHashCode is suitable for use in hashing
            
            algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current Object. 
            </returns>                                                 
        </member>
        <member name="M:Neurotec.Drawing.Size.ToPoint">
            <summary>
            Retrieves PointD representation of the specified object.
            </summary>
            <returns>
            PointD representation of an object. 
            </returns>                                              
        </member>
        <member name="M:Neurotec.Drawing.Size.ToString">
            <summary>
            Retrieves string representation of the specified object.
            </summary>
            <returns>
            String representation of an object.
            </returns>                                              
        </member>
        <member name="P:Neurotec.Drawing.Size.IsEmpty">
            <summary>
            Gets boolean value indicating whether current Object is
            empty. 
            </summary>                                             
        </member>
        <member name="P:Neurotec.Drawing.Size.Width">
            <summary>
            Gets or sets width property.
            </summary>                  
        </member>
        <member name="P:Neurotec.Drawing.Size.Height">
            <summary>
            Gets or sets height property.
            </summary>                   
        </member>
        <member name="T:Neurotec.Drawing.Rectangle">
            <summary>
            Represents rectangle.
            </summary>           
        </member>
        <member name="F:Neurotec.Drawing.Rectangle.Empty">
            <summary>
            Represents a RectangleD that is a null reference. 
            </summary>                                        
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the RectangleD class.
            </summary>
            <param name="left">Coordinate of the left side of the
                               rectangle.</param>
            <param name="top">Coordinate of the upper side of the
                              rectangle.</param>
            <param name="right">Coordinate of the right side of the
                                rectangle.</param>
            <param name="bottom">Coordinate of the lower side of the
                                 rectangle.</param>
            <returns>
            RectangleD object. 
            </returns>                                              
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.Inflate(Neurotec.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Expands borders of given rectangle.
            </summary>
            <param name="rect">Rectangle to be inflated.</param>
            <param name="x">Size that left and right sides of
                            rectangle will be expanded by.</param>
            <param name="y">Size that upper and lower sides of
                            rectangle will be expanded by.</param>
            <returns>
            Expanded RectangleD object.
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.Intersect(Neurotec.Drawing.Rectangle,Neurotec.Drawing.Rectangle)">
            <summary>
            Gets rectangle representing a and b rectangles intersection.
            </summary>
            <param name="a">First rectangle.</param>
            <param name="b">Second rectangle.</param>
            <returns>
            Rectangle representing intersection.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.Union(Neurotec.Drawing.Rectangle,Neurotec.Drawing.Rectangle)">
            <summary>
            Gets rectangle representing area of intersection between two
            rectangles.
            </summary>
            <param name="a">First rectangle.</param>
            <param name="b">Second rectangle.</param>
            <returns>
            RectangleD object.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.op_Equality(Neurotec.Drawing.Rectangle,Neurotec.Drawing.Rectangle)">
            <summary>
            Checks if two rectangles are equal.
            </summary>
            <param name="left">First RectangleD to be compared.</param>
            <param name="right">Second RectangleD to be compared.</param>
            <returns>
            True if rectangles are equal, false otherwise. 
            </returns>                                                   
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.op_Inequality(Neurotec.Drawing.Rectangle,Neurotec.Drawing.Rectangle)">
            <summary>
            Checks if two rectangles are not equal.
            </summary>
            <param name="left">First RectangleD to be compared.</param>
            <param name="right">Second RectangleD to be compared.</param>
            <returns>
            True if rectangles are not equal, false otherwise.
            </returns>                                                   
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the RectangleD class.
            </summary>
            <param name="x">Specifies X coordinate of the upper left
                            corner of the rectangle.</param>
            <param name="y">Specifies Y coordinate of the upper left
                            corner of the rectangle.</param>
            <param name="width">Specifies rectangle's width.</param>
            <param name="height">Specifies rectangle's height.</param>
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.#ctor(Neurotec.Drawing.Point,Neurotec.Drawing.Size)">
            <summary>
            Initializes a new instance of the RectangleD class.
            </summary>
            <param name="location">PointD specifying upper left corner
                                   of the rectangle.</param>
            <param name="size">SizeD specifying width and height of
                               the rectangle.</param>                 
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the
            current Object.
            </summary>
            <param name="obj">The Object to compare with the current
                              Object.</param>
            <returns>
            True if the specified Object is equal to the current Object;
            otherwise, false. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>
            Checks if given coordinates are within the borders of a
            rectangle.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <returns>
            True if given coordinates are within the borders of a
            rectangle; false otherwise.
            </returns>                                             
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.Contains(Neurotec.Drawing.Point)">
            <summary>
            Checks if a point is within the borders of rectangle.
            </summary>
            <param name="pt">PointD object.</param>
            <returns>
            True if point is within the borders of a rectangle, false
            otherwise.
            </returns>                                               
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.Contains(Neurotec.Drawing.Rectangle)">
            <summary>
            Checks if a given rectangle is within the borders of current
            rectangle.
            </summary>
            <param name="rect">RectangleD object.</param>
            <returns>
            True if rectangle is within borders, false otherwise.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.GetHashCode">
            <summary>
            Gets the hash code. Is intended for a hash function for a
            particular type. GetHashCode is suitable for use in hashing
            
            algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current Object. 
            </returns>                                                 
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.Inflate(System.Int32,System.Int32)">
            <summary>
            Expands borders of rectangle - left and right sides by x,
            upper and lower sides - by y.
            </summary>
            <param name="x">Size that left and right sides will be
                            expanded by.</param>
            <param name="y">Size that upper and lower sides will be
                            expanded by.</param>                     
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.Inflate(Neurotec.Drawing.Size)">
            <summary>
            Expands borders of rectangle.
            </summary>
            <param name="size">SizeD object representing how much the
                               rectangle should be inflated.</param> 
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.Intersect(Neurotec.Drawing.Rectangle)">
            <summary>
            Sets current rectangle's properties equal to the result of
            intersection between current and given rectangles.
            </summary>
            <param name="rect">Rectangle to find intersection with.</param>
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.IntersectsWith(Neurotec.Drawing.Rectangle)">
            <summary>
            Checks if current and given rectangles intersect.
            </summary>
            <param name="rect">Rectangle to check for intersection.</param>
            <returns>
            True if rectangles intersect, false otherwise. 
            </returns>                                                     
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.Offset(Neurotec.Drawing.Point)">
            <summary>
            Changes position of upper left corner of a rectangle.
            </summary>
            <param name="pos">PointD with values to change position in x
                              and y axis directions.</param>            
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.Offset(System.Int32,System.Int32)">
            <summary>
            Changes position of upper left corner of a rectangle.
            </summary>
            <param name="x">Value to change position in x axis
                            direction.</param>
            <param name="y">Value to change position in y axis
                            direction.</param>                   
        </member>
        <member name="M:Neurotec.Drawing.Rectangle.ToString">
            <summary>
            Retrieves string representation of the specified object.
            </summary>
            <returns>
            String representation of an object. 
            </returns>                                              
        </member>
        <member name="P:Neurotec.Drawing.Rectangle.Location">
            <summary>
            Gets or sets rectangle's location (coordinates of the left
            upper corner).
            </summary>                                                
        </member>
        <member name="P:Neurotec.Drawing.Rectangle.Size">
            <summary>
            Gets or sets rectangle's size (width and height properties).
            </summary>                                                  
        </member>
        <member name="P:Neurotec.Drawing.Rectangle.X">
            <summary>
            Gets or sets X coordinate of the rectangle's upper left
            corner.
            </summary>                                             
        </member>
        <member name="P:Neurotec.Drawing.Rectangle.Y">
            <summary>
            Gets or sets Y coordinate of the rectangle's upper left
            corner.
            </summary>                                             
        </member>
        <member name="P:Neurotec.Drawing.Rectangle.Width">
            <summary>
            Gets or sets rectangle's width. 
            </summary>                      
        </member>
        <member name="P:Neurotec.Drawing.Rectangle.Height">
            <summary>
            Gets or sets rectangle's height. 
            </summary>                       
        </member>
        <member name="P:Neurotec.Drawing.Rectangle.Left">
            <summary>
            Gets rectangle's left side's coordinate.
            </summary>                              
        </member>
        <member name="P:Neurotec.Drawing.Rectangle.Top">
            <summary>
            Gets rectangle's upper side's coordinate. 
            </summary>                                
        </member>
        <member name="P:Neurotec.Drawing.Rectangle.Right">
            <summary>
            Gets rectangle's right side's coordinate.  
            </summary>                                 
        </member>
        <member name="P:Neurotec.Drawing.Rectangle.Bottom">
            <summary>
            Gets rectangle's lower side's coordinate.
            </summary>                               
        </member>
        <member name="P:Neurotec.Drawing.Rectangle.IsEmpty">
            <summary>
            Gets boolean value indicating whether rectangle is an empty
            Object. 
            </summary>                                                 
        </member>
        <member name="T:Neurotec.Drawing.PointF">
            <summary>
            Represents point.
            </summary>       
        </member>
        <member name="F:Neurotec.Drawing.PointF.Empty">
            <summary>
            Represents a PointF that is a null reference.
            </summary>                                   
        </member>
        <member name="M:Neurotec.Drawing.PointF.Add(Neurotec.Drawing.PointF,Neurotec.Drawing.Size)">
            <summary>
            Increases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">Size to be increased by.</param>
            <returns>
            New PointD object with increased coordinates.
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointF.Subtract(Neurotec.Drawing.PointF,Neurotec.Drawing.Size)">
            <summary>
            Decreases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">Size to be decreased by.</param>
            <returns>
            New PointD object with decreased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointF.Add(Neurotec.Drawing.PointF,Neurotec.Drawing.SizeF)">
            <summary>
            Increases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">SizeF to be increased by.</param>
            <returns>
            New PointD object with increased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointF.Subtract(Neurotec.Drawing.PointF,Neurotec.Drawing.SizeF)">
            <summary>
            Decreases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">SizeF to be decreased by.</param>
            <returns>
            New PointD object with decreased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointF.op_Addition(Neurotec.Drawing.PointF,Neurotec.Drawing.Size)">
            <summary>
            Increases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">Size to be increased by.</param>
            <returns>
            New PointD object with increased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointF.op_Subtraction(Neurotec.Drawing.PointF,Neurotec.Drawing.Size)">
            <summary>
            Decreases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">Size to be decreased by.</param>
            <returns>
            New PointD object with decreased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointF.op_Addition(Neurotec.Drawing.PointF,Neurotec.Drawing.SizeF)">
            <summary>
            Increases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">SizeF to be increased by.</param>
            <returns>
            New PointD object with increased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointF.op_Subtraction(Neurotec.Drawing.PointF,Neurotec.Drawing.SizeF)">
            <summary>
            Decreases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">SizeF to be decreased by.</param>
            <returns>
            New PointD object with decreased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointF.op_Equality(Neurotec.Drawing.PointF,Neurotec.Drawing.PointF)">
            <summary>
            Checks if two points are equal.
            </summary>
            <param name="left">First PointD object to compare.</param>
            <param name="right">Second PointD object to compare.</param>
            <returns>
            True if point coordinates are equal, false otherwise.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.PointF.op_Inequality(Neurotec.Drawing.PointF,Neurotec.Drawing.PointF)">
            <summary>
            Checks if two points are not equal.
            </summary>
            <param name="left">First PointD to be compared.</param>
            <param name="right">Second PointD to be compared.</param>
            <returns>
            True if points are not equal, false otherwise.
            </returns>                                               
        </member>
        <member name="M:Neurotec.Drawing.PointF.op_Implicit(Neurotec.Drawing.Point)~Neurotec.Drawing.PointF">
            <summary>
            This conversion operator converts from a Point type to a
            PointD type.
            </summary>
            <param name="pt">Point to be converted.</param>         
        </member>
        <member name="M:Neurotec.Drawing.PointF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the PointD class.
            </summary>
            <param name="x">X coordinate of a point.</param>
            <param name="y">Y coordinate of a point.</param>
        </member>
        <member name="M:Neurotec.Drawing.PointF.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the
            current Object.
            </summary>
            <param name="obj">The Object to compare with the current
                              Object.</param>
            <returns>
            True if the specified Object is equal to the current Object;
            otherwise, false.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.PointF.GetHashCode">
            <summary>
            Gets the hash code. Is intended for a hash function for a
            particular type. GetHashCode is suitable for use in hashing
            
            algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current Object.
            </returns>                                                 
        </member>
        <member name="M:Neurotec.Drawing.PointF.ToString">
            <summary>
            Retrieves string representation of the specified object.
            </summary>
            <returns>
            String representation of an object.
            </returns>                                              
        </member>
        <member name="P:Neurotec.Drawing.PointF.IsEmpty">
            <summary>
            Gets boolean value indicating whether current Object is
            empty.
            </summary>                                             
        </member>
        <member name="P:Neurotec.Drawing.PointF.X">
            <summary>
            Gets or sets X coordinate of this PointD.
            </summary>                               
        </member>
        <member name="P:Neurotec.Drawing.PointF.Y">
            <summary>
            Gets or sets Y coordinate of this PointD.
            </summary>                               
        </member>
        <member name="T:Neurotec.Drawing.SizeF">
            <summary>
            Represents size.
            </summary>      
        </member>
        <member name="F:Neurotec.Drawing.SizeF.Empty">
            <summary>
            Represents a SizeD that is a null reference. 
            </summary>                                   
        </member>
        <member name="M:Neurotec.Drawing.SizeF.Add(Neurotec.Drawing.SizeF,Neurotec.Drawing.SizeF)">
            <summary>
            Adds width and height fields of two SizeD objects and creates
            new one with results.
            </summary>
            <param name="sz1">First SizeD object.</param>
            <param name="sz2">Second SizeD object.</param>
            <returns>
            SizeD object. 
            </returns>                                                   
        </member>
        <member name="M:Neurotec.Drawing.SizeF.Subtract(Neurotec.Drawing.SizeF,Neurotec.Drawing.SizeF)">
            <summary>
            Subtracts width and height fields of two SizeD objects and
            creates new one with results.
            </summary>
            <param name="sz1">First SizeD object.</param>
            <param name="sz2">Second SizeD object.</param>
            <returns>
            SizeD object. 
            </returns>                                                
        </member>
        <member name="M:Neurotec.Drawing.SizeF.op_Addition(Neurotec.Drawing.SizeF,Neurotec.Drawing.SizeF)">
            <summary>
            Adds width and height fields of two SizeD objects and creates
            new one with results.
            </summary>
            <param name="sz1">First SizeD object.</param>
            <param name="sz2">Second SizeD object.</param>
            <returns>
            SizeD object. 
            </returns>                                                   
        </member>
        <member name="M:Neurotec.Drawing.SizeF.op_Subtraction(Neurotec.Drawing.SizeF,Neurotec.Drawing.SizeF)">
            <summary>
            Subtracts width and height fields of two SizeD objects and
            creates new one with results.
            </summary>
            <param name="sz1">First SizeD object.</param>
            <param name="sz2">Second SizeD object.</param>
            <returns>
            SizeD object. 
            </returns>                                                
        </member>
        <member name="M:Neurotec.Drawing.SizeF.op_Equality(Neurotec.Drawing.SizeF,Neurotec.Drawing.SizeF)">
            <summary>
            Checks if two SizeD objects are equal.
            </summary>
            <param name="sz1">First SizeD object.</param>
            <param name="sz2">Second SizeD object.</param>
            <returns>
            True if objects are equal, false otherwise. 
            </returns>                                    
        </member>
        <member name="M:Neurotec.Drawing.SizeF.op_Inequality(Neurotec.Drawing.SizeF,Neurotec.Drawing.SizeF)">
            <summary>
            Checks if two SizeD objects are not equal.
            </summary>
            <param name="sz1">First SizeD object.</param>
            <param name="sz2">Second SizeD object.</param>
            <returns>
            True if objects are not equal, false otherwise. 
            </returns>                                      
        </member>
        <member name="M:Neurotec.Drawing.SizeF.op_Explicit(Neurotec.Drawing.SizeF)~Neurotec.Drawing.PointF">
            <unfinished />
            
            <summary>
            \ \ 
            </summary>
            <param name="size">_nt_</param>
        </member>
        <member name="M:Neurotec.Drawing.SizeF.op_Explicit(Neurotec.Drawing.SizeF)~Neurotec.Drawing.Size">
            <unfinished />
            
            <summary>
            \ \ 
            </summary>
            <param name="size">_nt_</param>
        </member>
        <member name="M:Neurotec.Drawing.SizeF.op_Implicit(Neurotec.Drawing.Size)~Neurotec.Drawing.SizeF">
            <summary>
            This conversion operator converts from a Size type to a SizeD
            type.
            </summary>
            <param name="size">Size to be converted.</param>             
        </member>
        <member name="M:Neurotec.Drawing.SizeF.#ctor(Neurotec.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the SizeD class.
            </summary>
            <param name="size">SizeD object.</param>      
        </member>
        <member name="M:Neurotec.Drawing.SizeF.#ctor(Neurotec.Drawing.PointF)">
            <summary>
            Initializes a new instance of the SizeD class.
            </summary>
            <param name="pt">PointD object. Width will be set to X value
                             of this object, height \- to y.</param>    
        </member>
        <member name="M:Neurotec.Drawing.SizeF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the SizeD class.
            </summary>
            <param name="width">Value indicating width.</param>
            <param name="height">Value indicating height.</param>
        </member>
        <member name="M:Neurotec.Drawing.SizeF.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the
            current Object.
            </summary>
            <param name="obj">The Object to compare with the current
                              Object.</param>
            <returns>
            True if the specified Object is equal to the current Object;
            otherwise, false. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.SizeF.GetHashCode">
            <summary>
            Gets the hash code. Is intended for a hash function for a
            particular type. GetHashCode is suitable for use in hashing
            
            algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current Object. 
            </returns>                                                 
        </member>
        <member name="M:Neurotec.Drawing.SizeF.ToPointF">
            <summary>
            Retrieves PointD representation of the specified object.
            </summary>
            <returns>
            PointD representation of an object. 
            </returns>                                              
        </member>
        <member name="M:Neurotec.Drawing.SizeF.ToSize">
            <summary>
            Retrieves Size representation of the specified object.
            </summary>
            <returns>
            Size representation of an object. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.SizeF.ToString">
            <summary>
            Retrieves string representation of the specified object.
            </summary>
            <returns>
            String representation of an object.
            </returns>                                              
        </member>
        <member name="P:Neurotec.Drawing.SizeF.IsEmpty">
            <summary>
            Gets boolean value indicating whether current Object is
            empty. 
            </summary>                                             
        </member>
        <member name="P:Neurotec.Drawing.SizeF.Width">
            <summary>
            Gets or sets width property.
            </summary>                  
        </member>
        <member name="P:Neurotec.Drawing.SizeF.Height">
            <summary>
            Gets or sets height property.
            </summary>                   
        </member>
        <member name="T:Neurotec.Drawing.RectangleF">
            <summary>
            Represents rectangle.
            </summary>           
        </member>
        <member name="F:Neurotec.Drawing.RectangleF.Empty">
            <summary>
            Represents a RectangleD that is a null reference. 
            </summary>                                        
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.FromLTRB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the RectangleD class.
            </summary>
            <param name="left">Coordinate of the left side of the
                               rectangle.</param>
            <param name="top">Coordinate of the upper side of the
                              rectangle.</param>
            <param name="right">Coordinate of the right side of the
                                rectangle.</param>
            <param name="bottom">Coordinate of the lower side of the
                                 rectangle.</param>
            <returns>
            RectangleD object. 
            </returns>                                              
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.Inflate(Neurotec.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Expands borders of given rectangle.
            </summary>
            <param name="rect">Rectangle to be inflated.</param>
            <param name="x">Size that left and right sides of
                            rectangle will be expanded by.</param>
            <param name="y">Size that upper and lower sides of
                            rectangle will be expanded by.</param>
            <returns>
            Expanded RectangleD object.
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.Intersect(Neurotec.Drawing.RectangleF,Neurotec.Drawing.RectangleF)">
            <summary>
            Gets rectangle representing a and b rectangles intersection.
            </summary>
            <param name="a">First rectangle.</param>
            <param name="b">Second rectangle.</param>
            <returns>
            Rectangle representing intersection.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.Union(Neurotec.Drawing.RectangleF,Neurotec.Drawing.RectangleF)">
            <summary>
            Gets rectangle representing area of intersection between two
            rectangles.
            </summary>
            <param name="a">First rectangle.</param>
            <param name="b">Second rectangle.</param>
            <returns>
            RectangleD object.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.op_Equality(Neurotec.Drawing.RectangleF,Neurotec.Drawing.RectangleF)">
            <summary>
            Checks if two rectangles are equal.
            </summary>
            <param name="left">First RectangleD to be compared.</param>
            <param name="right">Second RectangleD to be compared.</param>
            <returns>
            True if rectangles are equal, false otherwise. 
            </returns>                                                   
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.op_Inequality(Neurotec.Drawing.RectangleF,Neurotec.Drawing.RectangleF)">
            <summary>
            Checks if two rectangles are not equal.
            </summary>
            <param name="left">First RectangleD to be compared.</param>
            <param name="right">Second RectangleD to be compared.</param>
            <returns>
            True if rectangles are not equal, false otherwise.
            </returns>                                                   
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.op_Implicit(Neurotec.Drawing.Rectangle)~Neurotec.Drawing.RectangleF">
            <summary>
            This conversion operator converts from a Rectangle type to a
            RectangleD type.
            </summary>
            <param name="r">Rectangle to be converted.</param>          
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the RectangleD class.
            </summary>
            <param name="x">Specifies X coordinate of the upper left
                            corner of the rectangle.</param>
            <param name="y">Specifies Y coordinate of the upper left
                            corner of the rectangle.</param>
            <param name="width">Specifies rectangle's width.</param>
            <param name="height">Specifies rectangle's height.</param>
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.#ctor(Neurotec.Drawing.PointF,Neurotec.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the RectangleD class.
            </summary>
            <param name="location">PointD specifying upper left corner
                                   of the rectangle.</param>
            <param name="size">SizeD specifying width and height of
                               the rectangle.</param>                 
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the
            current Object.
            </summary>
            <param name="obj">The Object to compare with the current
                              Object.</param>
            <returns>
            True if the specified Object is equal to the current Object;
            otherwise, false. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.Contains(System.Single,System.Single)">
            <summary>
            Checks if given coordinates are within the borders of a
            rectangle.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <returns>
            True if given coordinates are within the borders of a
            rectangle; false otherwise.
            </returns>                                             
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.Contains(Neurotec.Drawing.PointF)">
            <summary>
            Checks if a point is within the borders of rectangle.
            </summary>
            <param name="pt">PointD object.</param>
            <returns>
            True if point is within the borders of a rectangle, false
            otherwise.
            </returns>                                               
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.Contains(Neurotec.Drawing.RectangleF)">
            <summary>
            Checks if a given rectangle is within the borders of current
            rectangle.
            </summary>
            <param name="rect">RectangleD object.</param>
            <returns>
            True if rectangle is within borders, false otherwise.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.GetHashCode">
            <summary>
            Gets the hash code. Is intended for a hash function for a
            particular type. GetHashCode is suitable for use in hashing
            
            algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current Object. 
            </returns>                                                 
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.Inflate(System.Single,System.Single)">
            <summary>
            Expands borders of rectangle - left and right sides by x,
            upper and lower sides - by y.
            </summary>
            <param name="x">Size that left and right sides will be
                            expanded by.</param>
            <param name="y">Size that upper and lower sides will be
                            expanded by.</param>                     
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.Inflate(Neurotec.Drawing.SizeF)">
            <summary>
            Expands borders of rectangle.
            </summary>
            <param name="size">SizeD object representing how much the
                               rectangle should be inflated.</param> 
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.Intersect(Neurotec.Drawing.RectangleF)">
            <summary>
            Sets current rectangle's properties equal to the result of
            intersection between current and given rectangles.
            </summary>
            <param name="rect">Rectangle to find intersection with.</param>
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.IntersectsWith(Neurotec.Drawing.RectangleF)">
            <summary>
            Checks if current and given rectangles intersect.
            </summary>
            <param name="rect">Rectangle to check for intersection.</param>
            <returns>
            True if rectangles intersect, false otherwise. 
            </returns>                                                     
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.Offset(Neurotec.Drawing.PointF)">
            <summary>
            Changes position of upper left corner of a rectangle.
            </summary>
            <param name="pos">PointD with values to change position in x
                              and y axis directions.</param>            
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.Offset(System.Single,System.Single)">
            <summary>
            Changes position of upper left corner of a rectangle.
            </summary>
            <param name="x">Value to change position in x axis
                            direction.</param>
            <param name="y">Value to change position in y axis
                            direction.</param>                   
        </member>
        <member name="M:Neurotec.Drawing.RectangleF.ToString">
            <summary>
            Retrieves string representation of the specified object.
            </summary>
            <returns>
            String representation of an object. 
            </returns>                                              
        </member>
        <member name="P:Neurotec.Drawing.RectangleF.Location">
            <summary>
            Gets or sets rectangle's location (coordinates of the left
            upper corner).
            </summary>                                                
        </member>
        <member name="P:Neurotec.Drawing.RectangleF.Size">
            <summary>
            Gets or sets rectangle's size (width and height properties).
            </summary>                                                  
        </member>
        <member name="P:Neurotec.Drawing.RectangleF.X">
            <summary>
            Gets or sets X coordinate of the rectangle's upper left
            corner.
            </summary>                                             
        </member>
        <member name="P:Neurotec.Drawing.RectangleF.Y">
            <summary>
            Gets or sets Y coordinate of the rectangle's upper left
            corner.
            </summary>                                             
        </member>
        <member name="P:Neurotec.Drawing.RectangleF.Width">
            <summary>
            Gets or sets rectangle's width. 
            </summary>                      
        </member>
        <member name="P:Neurotec.Drawing.RectangleF.Height">
            <summary>
            Gets or sets rectangle's height. 
            </summary>                       
        </member>
        <member name="P:Neurotec.Drawing.RectangleF.Left">
            <summary>
            Gets rectangle's left side's coordinate.
            </summary>                              
        </member>
        <member name="P:Neurotec.Drawing.RectangleF.Top">
            <summary>
            Gets rectangle's upper side's coordinate. 
            </summary>                                
        </member>
        <member name="P:Neurotec.Drawing.RectangleF.Right">
            <summary>
            Gets rectangle's right side's coordinate.  
            </summary>                                 
        </member>
        <member name="P:Neurotec.Drawing.RectangleF.Bottom">
            <summary>
            Gets rectangle's lower side's coordinate.
            </summary>                               
        </member>
        <member name="P:Neurotec.Drawing.RectangleF.IsEmpty">
            <summary>
            Gets boolean value indicating whether rectangle is an empty
            Object. 
            </summary>                                                 
        </member>
        <member name="T:Neurotec.Drawing.PointD">
            <summary>
            Represents point.
            </summary>       
        </member>
        <member name="F:Neurotec.Drawing.PointD.Empty">
            <summary>
            Represents a PointD that is a null reference.
            </summary>                                   
        </member>
        <member name="M:Neurotec.Drawing.PointD.Add(Neurotec.Drawing.PointD,Neurotec.Drawing.Size)">
            <summary>
            Increases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">Size to be increased by.</param>
            <returns>
            New PointD object with increased coordinates.
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointD.Subtract(Neurotec.Drawing.PointD,Neurotec.Drawing.Size)">
            <summary>
            Decreases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">Size to be decreased by.</param>
            <returns>
            New PointD object with decreased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointD.Add(Neurotec.Drawing.PointD,Neurotec.Drawing.SizeF)">
            <summary>
            Increases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">SizeF to be increased by.</param>
            <returns>
            New PointD object with increased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointD.Subtract(Neurotec.Drawing.PointD,Neurotec.Drawing.SizeF)">
            <summary>
            Decreases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">SizeF to be decreased by.</param>
            <returns>
            New PointD object with decreased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointD.Add(Neurotec.Drawing.PointD,Neurotec.Drawing.SizeD)">
            <summary>
            Increases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">SizeD to be increased by.</param>
            <returns>
            New PointD object with increased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointD.Subtract(Neurotec.Drawing.PointD,Neurotec.Drawing.SizeD)">
            <summary>
            Decreases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">SizeD to be decreased by.</param>
            <returns>
            New PointD object with decreased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointD.op_Addition(Neurotec.Drawing.PointD,Neurotec.Drawing.Size)">
            <summary>
            Increases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">Size to be increased by.</param>
            <returns>
            New PointD object with increased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointD.op_Subtraction(Neurotec.Drawing.PointD,Neurotec.Drawing.Size)">
            <summary>
            Decreases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">Size to be decreased by.</param>
            <returns>
            New PointD object with decreased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointD.op_Addition(Neurotec.Drawing.PointD,Neurotec.Drawing.SizeF)">
            <summary>
            Increases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">SizeF to be increased by.</param>
            <returns>
            New PointD object with increased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointD.op_Subtraction(Neurotec.Drawing.PointD,Neurotec.Drawing.SizeF)">
            <summary>
            Decreases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">SizeF to be decreased by.</param>
            <returns>
            New PointD object with decreased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointD.op_Addition(Neurotec.Drawing.PointD,Neurotec.Drawing.SizeD)">
            <summary>
            Increases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">SizeD to be increased by.</param>
            <returns>
            New PointD object with increased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointD.op_Subtraction(Neurotec.Drawing.PointD,Neurotec.Drawing.SizeD)">
            <summary>
            Decreases point's coordinate values by indicated size.
            </summary>
            <param name="pt">Original point.</param>
            <param name="sz">SizeD to be decreased by.</param>
            <returns>
            New PointD object with decreased coordinates. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.PointD.op_Equality(Neurotec.Drawing.PointD,Neurotec.Drawing.PointD)">
            <summary>
            Checks if two points are equal.
            </summary>
            <param name="left">First PointD object to compare.</param>
            <param name="right">Second PointD object to compare.</param>
            <returns>
            True if point coordinates are equal, false otherwise.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.PointD.op_Inequality(Neurotec.Drawing.PointD,Neurotec.Drawing.PointD)">
            <summary>
            Checks if two points are not equal.
            </summary>
            <param name="left">First PointD to be compared.</param>
            <param name="right">Second PointD to be compared.</param>
            <returns>
            True if points are not equal, false otherwise.
            </returns>                                               
        </member>
        <member name="M:Neurotec.Drawing.PointD.op_Explicit(Neurotec.Drawing.PointD)~Neurotec.Drawing.PointF">
            <summary>
            This conversion operator converts from a PointD type to a
            PointF type.
            </summary>
            <param name="pt">PointD to be converted.</param>         
        </member>
        <member name="M:Neurotec.Drawing.PointD.op_Implicit(Neurotec.Drawing.Point)~Neurotec.Drawing.PointD">
            <summary>
            This conversion operator converts from a Point type to a
            PointD type.
            </summary>
            <param name="pt">Point to be converted.</param>         
        </member>
        <member name="M:Neurotec.Drawing.PointD.op_Implicit(Neurotec.Drawing.PointF)~Neurotec.Drawing.PointD">
            <summary>
            This conversion operator converts from a PointF type to a
            PointD type.
            </summary>
            <param name="pt">PointF to be converted.</param>         
        </member>
        <member name="M:Neurotec.Drawing.PointD.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the PointD class.
            </summary>
            <param name="x">X coordinate of a point.</param>
            <param name="y">Y coordinate of a point.</param>
        </member>
        <member name="M:Neurotec.Drawing.PointD.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the
            current Object.
            </summary>
            <param name="obj">The Object to compare with the current
                              Object.</param>
            <returns>
            True if the specified Object is equal to the current Object;
            otherwise, false.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.PointD.GetHashCode">
            <summary>
            Gets the hash code. Is intended for a hash function for a
            particular type. GetHashCode is suitable for use in hashing
            
            algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current Object.
            </returns>                                                 
        </member>
        <member name="M:Neurotec.Drawing.PointD.ToString">
            <summary>
            Retrieves string representation of the specified object.
            </summary>
            <returns>
            String representation of an object.
            </returns>                                              
        </member>
        <member name="P:Neurotec.Drawing.PointD.IsEmpty">
            <summary>
            Gets boolean value indicating whether current Object is
            empty.
            </summary>                                             
        </member>
        <member name="P:Neurotec.Drawing.PointD.X">
            <summary>
            Gets or sets X coordinate of this PointD.
            </summary>                               
        </member>
        <member name="P:Neurotec.Drawing.PointD.Y">
            <summary>
            Gets or sets Y coordinate of this PointD.
            </summary>                               
        </member>
        <member name="T:Neurotec.Drawing.SizeD">
            <summary>
            Represents size.
            </summary>      
        </member>
        <member name="F:Neurotec.Drawing.SizeD.Empty">
            <summary>
            Represents a SizeD that is a null reference. 
            </summary>                                   
        </member>
        <member name="M:Neurotec.Drawing.SizeD.Add(Neurotec.Drawing.SizeD,Neurotec.Drawing.SizeD)">
            <summary>
            Adds width and height fields of two SizeD objects and creates
            new one with results.
            </summary>
            <param name="sz1">First SizeD object.</param>
            <param name="sz2">Second SizeD object.</param>
            <returns>
            SizeD object. 
            </returns>                                                   
        </member>
        <member name="M:Neurotec.Drawing.SizeD.Subtract(Neurotec.Drawing.SizeD,Neurotec.Drawing.SizeD)">
            <summary>
            Subtracts width and height fields of two SizeD objects and
            creates new one with results.
            </summary>
            <param name="sz1">First SizeD object.</param>
            <param name="sz2">Second SizeD object.</param>
            <returns>
            SizeD object. 
            </returns>                                                
        </member>
        <member name="M:Neurotec.Drawing.SizeD.op_Addition(Neurotec.Drawing.SizeD,Neurotec.Drawing.SizeD)">
            <summary>
            Adds width and height fields of two SizeD objects and creates
            new one with results.
            </summary>
            <param name="sz1">First SizeD object.</param>
            <param name="sz2">Second SizeD object.</param>
            <returns>
            SizeD object. 
            </returns>                                                   
        </member>
        <member name="M:Neurotec.Drawing.SizeD.op_Subtraction(Neurotec.Drawing.SizeD,Neurotec.Drawing.SizeD)">
            <summary>
            Subtracts width and height fields of two SizeD objects and
            creates new one with results.
            </summary>
            <param name="sz1">First SizeD object.</param>
            <param name="sz2">Second SizeD object.</param>
            <returns>
            SizeD object. 
            </returns>                                                
        </member>
        <member name="M:Neurotec.Drawing.SizeD.op_Equality(Neurotec.Drawing.SizeD,Neurotec.Drawing.SizeD)">
            <summary>
            Checks if two SizeD objects are equal.
            </summary>
            <param name="sz1">First SizeD object.</param>
            <param name="sz2">Second SizeD object.</param>
            <returns>
            True if objects are equal, false otherwise. 
            </returns>                                    
        </member>
        <member name="M:Neurotec.Drawing.SizeD.op_Inequality(Neurotec.Drawing.SizeD,Neurotec.Drawing.SizeD)">
            <summary>
            Checks if two SizeD objects are not equal.
            </summary>
            <param name="sz1">First SizeD object.</param>
            <param name="sz2">Second SizeD object.</param>
            <returns>
            True if objects are not equal, false otherwise. 
            </returns>                                      
        </member>
        <member name="M:Neurotec.Drawing.SizeD.op_Explicit(Neurotec.Drawing.SizeD)~Neurotec.Drawing.PointD">
            <unfinished />
            
            <summary>
            \ \ 
            </summary>
            <param name="size">_nt_</param>
        </member>
        <member name="M:Neurotec.Drawing.SizeD.op_Explicit(Neurotec.Drawing.SizeD)~Neurotec.Drawing.SizeF">
            <unfinished />
            
            <summary>
            \ \ 
            </summary>
            <param name="size">_nt_</param>
        </member>
        <member name="M:Neurotec.Drawing.SizeD.op_Implicit(Neurotec.Drawing.Size)~Neurotec.Drawing.SizeD">
            <summary>
            This conversion operator converts from a Size type to a SizeD
            type.
            </summary>
            <param name="size">Size to be converted.</param>             
        </member>
        <member name="M:Neurotec.Drawing.SizeD.op_Implicit(Neurotec.Drawing.SizeF)~Neurotec.Drawing.SizeD">
            <summary>
            This conversion operator converts from a SizeF type to a
            SizeD type.
            </summary>
            <param name="size">SizeF to be converted.</param>       
        </member>
        <member name="M:Neurotec.Drawing.SizeD.#ctor(Neurotec.Drawing.SizeD)">
            <summary>
            Initializes a new instance of the SizeD class.
            </summary>
            <param name="size">SizeD object.</param>      
        </member>
        <member name="M:Neurotec.Drawing.SizeD.#ctor(Neurotec.Drawing.PointD)">
            <summary>
            Initializes a new instance of the SizeD class.
            </summary>
            <param name="pt">PointD object. Width will be set to X value
                             of this object, height \- to y.</param>    
        </member>
        <member name="M:Neurotec.Drawing.SizeD.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the SizeD class.
            </summary>
            <param name="width">Value indicating width.</param>
            <param name="height">Value indicating height.</param>
        </member>
        <member name="M:Neurotec.Drawing.SizeD.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the
            current Object.
            </summary>
            <param name="obj">The Object to compare with the current
                              Object.</param>
            <returns>
            True if the specified Object is equal to the current Object;
            otherwise, false. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.SizeD.GetHashCode">
            <summary>
            Gets the hash code. Is intended for a hash function for a
            particular type. GetHashCode is suitable for use in hashing
            
            algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current Object. 
            </returns>                                                 
        </member>
        <member name="M:Neurotec.Drawing.SizeD.ToPointD">
            <summary>
            Retrieves PointD representation of the specified object.
            </summary>
            <returns>
            PointD representation of an object. 
            </returns>                                              
        </member>
        <member name="M:Neurotec.Drawing.SizeD.ToSize">
            <summary>
            Retrieves Size representation of the specified object.
            </summary>
            <returns>
            Size representation of an object. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.SizeD.ToSizeF">
            <summary>
            Retrieves SizeF representation of the specified object.
            </summary>
            <returns>
            SizeF representation of an object. 
            </returns>                                             
        </member>
        <member name="M:Neurotec.Drawing.SizeD.ToString">
            <summary>
            Retrieves string representation of the specified object.
            </summary>
            <returns>
            String representation of an object.
            </returns>                                              
        </member>
        <member name="P:Neurotec.Drawing.SizeD.IsEmpty">
            <summary>
            Gets boolean value indicating whether current Object is
            empty. 
            </summary>                                             
        </member>
        <member name="P:Neurotec.Drawing.SizeD.Width">
            <summary>
            Gets or sets width property.
            </summary>                  
        </member>
        <member name="P:Neurotec.Drawing.SizeD.Height">
            <summary>
            Gets or sets height property.
            </summary>                   
        </member>
        <member name="T:Neurotec.Drawing.RectangleD">
            <summary>
            Represents rectangle.
            </summary>           
        </member>
        <member name="F:Neurotec.Drawing.RectangleD.Empty">
            <summary>
            Represents a RectangleD that is a null reference. 
            </summary>                                        
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the RectangleD class.
            </summary>
            <param name="left">Coordinate of the left side of the
                               rectangle.</param>
            <param name="top">Coordinate of the upper side of the
                              rectangle.</param>
            <param name="right">Coordinate of the right side of the
                                rectangle.</param>
            <param name="bottom">Coordinate of the lower side of the
                                 rectangle.</param>
            <returns>
            RectangleD object. 
            </returns>                                              
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.Inflate(Neurotec.Drawing.RectangleD,System.Double,System.Double)">
            <summary>
            Expands borders of given rectangle.
            </summary>
            <param name="rect">Rectangle to be inflated.</param>
            <param name="x">Size that left and right sides of
                            rectangle will be expanded by.</param>
            <param name="y">Size that upper and lower sides of
                            rectangle will be expanded by.</param>
            <returns>
            Expanded RectangleD object.
            </returns>                                            
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.Intersect(Neurotec.Drawing.RectangleD,Neurotec.Drawing.RectangleD)">
            <summary>
            Gets rectangle representing a and b rectangles intersection.
            </summary>
            <param name="a">First rectangle.</param>
            <param name="b">Second rectangle.</param>
            <returns>
            Rectangle representing intersection.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.Union(Neurotec.Drawing.RectangleD,Neurotec.Drawing.RectangleD)">
            <summary>
            Gets rectangle representing area of intersection between two
            rectangles.
            </summary>
            <param name="a">First rectangle.</param>
            <param name="b">Second rectangle.</param>
            <returns>
            RectangleD object.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.op_Equality(Neurotec.Drawing.RectangleD,Neurotec.Drawing.RectangleD)">
            <summary>
            Checks if two rectangles are equal.
            </summary>
            <param name="left">First RectangleD to be compared.</param>
            <param name="right">Second RectangleD to be compared.</param>
            <returns>
            True if rectangles are equal, false otherwise. 
            </returns>                                                   
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.op_Inequality(Neurotec.Drawing.RectangleD,Neurotec.Drawing.RectangleD)">
            <summary>
            Checks if two rectangles are not equal.
            </summary>
            <param name="left">First RectangleD to be compared.</param>
            <param name="right">Second RectangleD to be compared.</param>
            <returns>
            True if rectangles are not equal, false otherwise.
            </returns>                                                   
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.op_Explicit(Neurotec.Drawing.RectangleD)~Neurotec.Drawing.RectangleF">
            <summary>
            This conversion operator converts from a RectangleD type to a
            RectangleF type.
            </summary>
            <param name="r">RectangleD to be converted.</param>          
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.op_Implicit(Neurotec.Drawing.Rectangle)~Neurotec.Drawing.RectangleD">
            <summary>
            This conversion operator converts from a Rectangle type to a
            RectangleD type.
            </summary>
            <param name="r">Rectangle to be converted.</param>          
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.op_Implicit(Neurotec.Drawing.RectangleF)~Neurotec.Drawing.RectangleD">
            <summary>
            This conversion operator converts from a RectangleF type to a
            RectangleD type.
            </summary>
            <param name="r">RectangleF to be converted.</param>          
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the RectangleD class.
            </summary>
            <param name="x">Specifies X coordinate of the upper left
                            corner of the rectangle.</param>
            <param name="y">Specifies Y coordinate of the upper left
                            corner of the rectangle.</param>
            <param name="width">Specifies rectangle's width.</param>
            <param name="height">Specifies rectangle's height.</param>
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.#ctor(Neurotec.Drawing.PointD,Neurotec.Drawing.SizeD)">
            <summary>
            Initializes a new instance of the RectangleD class.
            </summary>
            <param name="location">PointD specifying upper left corner
                                   of the rectangle.</param>
            <param name="size">SizeD specifying width and height of
                               the rectangle.</param>                 
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the
            current Object.
            </summary>
            <param name="obj">The Object to compare with the current
                              Object.</param>
            <returns>
            True if the specified Object is equal to the current Object;
            otherwise, false. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.Contains(System.Double,System.Double)">
            <summary>
            Checks if given coordinates are within the borders of a
            rectangle.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <returns>
            True if given coordinates are within the borders of a
            rectangle; false otherwise.
            </returns>                                             
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.Contains(Neurotec.Drawing.PointD)">
            <summary>
            Checks if a point is within the borders of rectangle.
            </summary>
            <param name="pt">PointD object.</param>
            <returns>
            True if point is within the borders of a rectangle, false
            otherwise.
            </returns>                                               
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.Contains(Neurotec.Drawing.RectangleD)">
            <summary>
            Checks if a given rectangle is within the borders of current
            rectangle.
            </summary>
            <param name="rect">RectangleD object.</param>
            <returns>
            True if rectangle is within borders, false otherwise.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.GetHashCode">
            <summary>
            Gets the hash code. Is intended for a hash function for a
            particular type. GetHashCode is suitable for use in hashing
            
            algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current Object. 
            </returns>                                                 
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.Inflate(System.Double,System.Double)">
            <summary>
            Expands borders of rectangle - left and right sides by x,
            upper and lower sides - by y.
            </summary>
            <param name="x">Size that left and right sides will be
                            expanded by.</param>
            <param name="y">Size that upper and lower sides will be
                            expanded by.</param>                     
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.Inflate(Neurotec.Drawing.SizeD)">
            <summary>
            Expands borders of rectangle.
            </summary>
            <param name="size">SizeD object representing how much the
                               rectangle should be inflated.</param> 
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.Intersect(Neurotec.Drawing.RectangleD)">
            <summary>
            Sets current rectangle's properties equal to the result of
            intersection between current and given rectangles.
            </summary>
            <param name="rect">Rectangle to find intersection with.</param>
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.IntersectsWith(Neurotec.Drawing.RectangleD)">
            <summary>
            Checks if current and given rectangles intersect.
            </summary>
            <param name="rect">Rectangle to check for intersection.</param>
            <returns>
            True if rectangles intersect, false otherwise. 
            </returns>                                                     
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.Offset(Neurotec.Drawing.PointD)">
            <summary>
            Changes position of upper left corner of a rectangle.
            </summary>
            <param name="pos">PointD with values to change position in x
                              and y axis directions.</param>            
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.Offset(System.Double,System.Double)">
            <summary>
            Changes position of upper left corner of a rectangle.
            </summary>
            <param name="x">Value to change position in x axis
                            direction.</param>
            <param name="y">Value to change position in y axis
                            direction.</param>                   
        </member>
        <member name="M:Neurotec.Drawing.RectangleD.ToString">
            <summary>
            Retrieves string representation of the specified object.
            </summary>
            <returns>
            String representation of an object. 
            </returns>                                              
        </member>
        <member name="P:Neurotec.Drawing.RectangleD.Location">
            <summary>
            Gets or sets rectangle's location (coordinates of the left
            upper corner).
            </summary>                                                
        </member>
        <member name="P:Neurotec.Drawing.RectangleD.Size">
            <summary>
            Gets or sets rectangle's size (width and height properties).
            </summary>                                                  
        </member>
        <member name="P:Neurotec.Drawing.RectangleD.X">
            <summary>
            Gets or sets X coordinate of the rectangle's upper left
            corner.
            </summary>                                             
        </member>
        <member name="P:Neurotec.Drawing.RectangleD.Y">
            <summary>
            Gets or sets Y coordinate of the rectangle's upper left
            corner.
            </summary>                                             
        </member>
        <member name="P:Neurotec.Drawing.RectangleD.Width">
            <summary>
            Gets or sets rectangle's width. 
            </summary>                      
        </member>
        <member name="P:Neurotec.Drawing.RectangleD.Height">
            <summary>
            Gets or sets rectangle's height. 
            </summary>                       
        </member>
        <member name="P:Neurotec.Drawing.RectangleD.Left">
            <summary>
            Gets rectangle's left side's coordinate.
            </summary>                              
        </member>
        <member name="P:Neurotec.Drawing.RectangleD.Top">
            <summary>
            Gets rectangle's upper side's coordinate. 
            </summary>                                
        </member>
        <member name="P:Neurotec.Drawing.RectangleD.Right">
            <summary>
            Gets rectangle's right side's coordinate.  
            </summary>                                 
        </member>
        <member name="P:Neurotec.Drawing.RectangleD.Bottom">
            <summary>
            Gets rectangle's lower side's coordinate.
            </summary>                               
        </member>
        <member name="P:Neurotec.Drawing.RectangleD.IsEmpty">
            <summary>
            Gets boolean value indicating whether rectangle is an empty
            Object. 
            </summary>                                                 
        </member>
        <member name="T:Neurotec.Geometry.NGeometry">
            <summary>
            Provides definitions of geometrical structures types.
            </summary>
        </member>
        <member name="P:Neurotec.Geometry.NGeometry.InterpolationModeNativeType">
            <summary>
            Defines the native type of the interpolation mode.
            </summary>
        </member>
        <member name="P:Neurotec.Geometry.NGeometry.PointNativeType">
            <summary>
            Defines the native type of the point.
            </summary>
        </member>
        <member name="P:Neurotec.Geometry.NGeometry.PointFNativeType">
            <summary>
            Defines the native type of the point F.
            </summary>
        </member>
        <member name="P:Neurotec.Geometry.NGeometry.PointDNativeType">
            <summary>
            Defines the native type of the point D.
            </summary>
        </member>
        <member name="P:Neurotec.Geometry.NGeometry.SizeNativeType">
            <summary>
            Defines the native type of the size.
            </summary>
        </member>
        <member name="P:Neurotec.Geometry.NGeometry.SizeFNativeType">
            <summary>
            Defines the native type of the size F.
            </summary>
        </member>
        <member name="P:Neurotec.Geometry.NGeometry.SizeDNativeType">
            <summary>
            Defines the native type of the size D.
            </summary>
        </member>
        <member name="P:Neurotec.Geometry.NGeometry.RectangleNativeType">
            <summary>
            Defines the native type of the rectangle.
            </summary>
        </member>
        <member name="P:Neurotec.Geometry.NGeometry.RectangleFNativeType">
            <summary>
            Defines the native type of the rectangle F.
            </summary>
        </member>
        <member name="P:Neurotec.Geometry.NGeometry.RectangleDNativeType">
            <summary>
            Defines the native type of the rectangle D.
            </summary>
        </member>
        <member name="P:Neurotec.Geometry.NGeometry.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="T:Neurotec.Images.BmpInfo">
            <summary>
            Provides information about BMP format images.
            </summary>                                   
        </member>
        <member name="P:Neurotec.Images.BmpInfo.NativeType">
            <summary>
            Gets or sets a function that retrieves NType object for the enclosing type.
            </summary>
            <value>
            The function that retrieves NType object for the enclosing type.
            </value>                                                                   
        </member>
        <member name="T:Neurotec.Images.IHeadInfo">
            <summary>
            Provides information about NIST IHead format images.
            </summary>                                          
        </member>
        <member name="P:Neurotec.Images.IHeadInfo.NativeType">
            <summary>
            Gets or sets
            </summary>
            <value>
            The function that retrieves NType object for the enclosing type.
            </value>                                                        
        </member>
        <member name="T:Neurotec.Images.JpegInfo">
            <summary>
            Provides information about JPEG images.
            </summary>                             
        </member>
        <member name="F:Neurotec.Images.JpegInfo.DefaultQuality">
            <summary>
            Specifies default JPEG quality.
            </summary>                     
        </member>
        <member name="P:Neurotec.Images.JpegInfo.NativeType">
            <summary>
            Gets or sets
            </summary>
            <value>
            The function that retrieves NType object for the enclosing type.
            </value>                                                        
        </member>
        <member name="P:Neurotec.Images.JpegInfo.Quality">
            <summary>
            Gets or sets JPEG image quality
            </summary>
            <value>
            JPEG image quality
            </value>                       
        </member>
        <member name="P:Neurotec.Images.JpegInfo.IsLossless">
            <summary>
            Check or sets whether a JPEG image is lossless.
            </summary>
            <value>
            <b>true</b> if the image is lossless; else<b> false</b>
            </value>                                               
        </member>
        <member name="T:Neurotec.Images.Jpeg2KProfile">
            <summary>
            Enumerates JPEG2000 image types.
            </summary>
        </member>
        <member name="F:Neurotec.Images.Jpeg2KProfile.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Neurotec.Images.Jpeg2KProfile.Fingerprint1000Ppi">
            <summary>
            Fingerprint scan at 1000ppi.
            </summary>
        </member>
        <member name="F:Neurotec.Images.Jpeg2KProfile.FingerprintLossless">
            <summary>
            Fingerprint image, lossless.
            </summary>
        </member>
        <member name="F:Neurotec.Images.Jpeg2KProfile.FaceLossy">
            <summary>
            Face image, with loss.
            </summary>
        </member>
        <member name="F:Neurotec.Images.Jpeg2KProfile.FaceLossless">
            <summary>
            Face image, lossless.
            </summary>
        </member>
        <member name="T:Neurotec.Images.Jpeg2KInfo">
            <summary>
            Provides information about Jpeg 2000 images. 
            </summary>                                   
        </member>
        <member name="F:Neurotec.Images.Jpeg2KInfo.DefaultRatio">
            <summary>
            Specifies default JPEG 2000 quality.
            </summary>
            <remarks>
            <paraattr align="justify">
            This parameter controls compression ratio when saving images
            to a file. E.g., when 10 is specified compressed image will
            have 10:1 size ratio compared to that of the uncompressed
            \file. If lossless image is required, then 0 for <c>DefaultRatio</c>
            parameter should be specified.
            </paraattr>
            Compression ratio can be set using <c>Ratio</c> property.
            <paraattr align="justify">
            When one of Jpeg2KProfile values are used (except jNone),
            then <c>DefaultRatio</c> parameter value is ignored.
            </paraattr>
            
            </remarks>                                                          
        </member>
        <member name="P:Neurotec.Images.Jpeg2KInfo.NativeType">
            <summary>
            Gets or sets
            </summary>
            <value>
            The function that retrieves NType object for the enclosing type.
            </value>                                                        
            <summary>
            Gets or sets
            </summary>
            <value>
            The function that retrieves NType object for the enclosing type.
            </value>                                                        
        </member>
        <member name="P:Neurotec.Images.Jpeg2KInfo.Jpeg2KProfileNativeType">
            <summary>
            Defines the native type of the JPEG2000 profile.
            </summary>
        </member>
        <member name="P:Neurotec.Images.Jpeg2KInfo.Profile">
            <summary>
            Gets or sets Jpeg 2000 profile value.
            </summary>
            <value>
            Jpeg2KProfile enumeration.
            </value>                             
        </member>
        <member name="P:Neurotec.Images.Jpeg2KInfo.Ratio">
            <summary>
            Gets or sets Jpeg 2000 compression ration.
            </summary>
            <value>
            Jpeg 2000 image compression ratio.
            </value>
            <seealso cref="F:Neurotec.Images.Jpeg2KInfo.DefaultRatio"/>
        </member>
        <member name="T:Neurotec.Images.NImage">
            <summary>
            Provides functionality for managing images.
            </summary>
        </member>
        <member name="T:Neurotec.Images.NImage.PlaneCollection">
            <summary>
            Represents a collection of image data planes.
            </summary>
        </member>
        <member name="T:Neurotec.Images.NImage.ImagePalette">
            <summary>
            Represents an image palette.
            </summary>
        </member>
        <member name="M:Neurotec.Images.NImage.ImagePalette.GetEntries">
            <summary>
            Gets the palette entries.
            </summary>
            <returns>NBuffer containing palette entries.</returns>
        </member>
        <member name="M:Neurotec.Images.NImage.ImagePalette.SetEntries(Neurotec.IO.NBuffer,System.Int32)">
            <summary>
            Sets palette entries.
            </summary>
            <param name="value">NBuffer containing palette entries.</param>
            <param name="length">Entries' length.</param>
        </member>
        <member name="P:Neurotec.Images.NImage.ImagePalette.EntriesSize">
            <summary>
            Gets the palette size.
            </summary>
        </member>
        <member name="P:Neurotec.Images.NImage.ImagePalette.NativeEntriesSize">
            <summary>
            Gets the native palette size.
            </summary>
        </member>
        <member name="F:Neurotec.Images.NImage.FlagReadUnknownImage">
            <summary>
            Flag specifying whether unknown images should be read.
            </summary>                                            
        </member>
        <member name="F:Neurotec.Images.NImage.FlagWriteUnknownImage">
            <summary>
            Flag specifying whether unknown images should be written.
            </summary>                                               
        </member>
        <member name="F:Neurotec.Images.NImage.FlagDstSwapChannels">
            <summary>
            This flag is used when NImage should be copied swapping RGB
            channels (Ex. RGB to BRG).
            </summary>                                                 
        </member>
        <member name="F:Neurotec.Images.NImage.FlagDstAlphaChannelFirst">
            <summary>
            This flag is used when NImage should be copied using Rgb
            Alpha channel first method (ARGB color space). 
            </summary>                                              
        </member>
        <member name="F:Neurotec.Images.NImage.FlagDstBottomToTop">
            <summary>
            This flag is used when NImage should be copied changing
            pixels order bottom to top (bottom lines become top and vice
            versa). 
            </summary>                                                  
        </member>
        <member name="F:Neurotec.Images.NImage.FlagSrcSwapChannels">
            <summary>
            This flag is used when NImage should be copied swapping RGB
            channels (Ex. RGB to BRG).
            </summary>                                                 
        </member>
        <member name="F:Neurotec.Images.NImage.FlagSrcAlphaChannelFirst">
            This flag is used when NImage should be copied using Rgb
            Alpha channel first method (ARGB color space).          
        </member>
        <member name="F:Neurotec.Images.NImage.FlagSrcBottomToTop">
            This flag is used when NImage should be copied changing
            pixels order bottom to top (bottom lines become top and vice
            versa).                                                     
        </member>
        <member name="F:Neurotec.Images.NImage.FlagAllSrc">
            For internal use.
        </member>
        <member name="F:Neurotec.Images.NImage.FlagAllDstAndSrc">
            For internal use.
        </member>
        <member name="M:Neurotec.Images.NImage.#cctor">
            For internal use.
        </member>
        <member name="P:Neurotec.Images.NImage.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Images.NImage.GetWrapper(Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int32,Neurotec.IO.NBuffer)">
            <summary>
            Creates NImage object wrapper.
            </summary>
            <param name="pixelFormat">Format of the pixels.</param>
            <param name="width">A width of image.</param>
            <param name="height">A height of image.</param>
            <param name="stride">The stride of the image.</param>
            <param name="pixels">The source pixels.</param>
            <returns>
            A NImage object.
            </returns>
            <remarks>
            For more information on image stride see Stride property.
            
            Format of memory block pixels points to must be the same as described in Pixels property.
            
            <i>horzResolution</i> and <i>vertResolution</i> can be zero if resolution is not applicable for the
            image. 
            </remarks>                                                                                         
        </member>
        <member name="M:Neurotec.Images.NImage.GetWrapper(Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer,System.UInt32)">
            <summary>
            Creates NImage object wrapper.
            </summary>
            <param name="pixelFormat">Format of the pixels.</param>
            <param name="width">A width of image.</param>
            <param name="height">A height of image.</param>
            <param name="stride">The stride of the image.</param>
            <param name="pixels">The source pixels.</param>
            <param name="flags">Must be zero.</param>
            <returns>
            A NImage object.
            </returns>
            <remarks>
            For more information on image stride see Stride property.
            
            Format of memory block pixels points to must be the same as described in Pixels property.
            
            <i>horzResolution</i> and <i>vertResolution</i> can be zero if resolution is not applicable for the
            image 
            </remarks>                                                                                         
        </member>
        <member name="M:Neurotec.Images.NImage.GetWrapper(Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int32,Neurotec.IO.NBuffer,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates NImage object wrapper.
            </summary>
            <param name="pixelFormat">Format of the pixels.</param>
            <param name="srcWidth">Width of the source image.</param>
            <param name="srcHeight">Height of the source image.</param>
            <param name="stride">The stride of the image.</param>
            <param name="pixels">The source pixels.</param>
            <param name="left">X\-coordinate of the image rectangle. </param>
            <param name="top">Y\-coordinate of the image rectangle. </param>
            <param name="width">A width of image.</param>
            <param name="height">A height of image.</param>
            <returns>
            A NImage object.
            </returns>
            <remarks>
            For more information on image stride see Stride property.
            
            Format of memory block pixels points to must be the same as described in Pixels property.
            
            <i>horzResolution</i> and <i>vertResolution</i> can be zero if resolution is not applicable for the
            image 
            </remarks>                                                                                         
        </member>
        <member name="M:Neurotec.Images.NImage.GetWrapper(Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates NImage object wrapper.
            </summary>
            <param name="pixelFormat">Format of the pixels.</param>
            <param name="srcWidth">Width of the source image.</param>
            <param name="srcHeight">Height of the source image.</param>
            <param name="stride">The stride of the image.</param>
            <param name="pixels">The source pixels.</param>
            <param name="left">X\-coordinate of the image rectangle. </param>
            <param name="top">Y\-coordinate of the image rectangle. </param>
            <param name="width">A width of image.</param>
            <param name="height">A height of image.</param>
            <param name="flags">Must be zero.</param>
            <returns>
            A NImage object.
            </returns>
            <remarks>
            For more information on image stride see Stride property.
            
            Format of memory block pixels points to must be the same as described in Pixels property.
            
            <i>horzResolution</i> and <i>vertResolution</i> can be zero if resolution is not applicable for the
            image 
            </remarks>                                                                                         
        </member>
        <member name="M:Neurotec.Images.NImage.GetWrapper(Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates NImage object wrapper.
            </summary>
            <param name="pixelFormat">Format of the pixels.</param>
            <param name="srcWidth">Width of the source image.</param>
            <param name="srcHeight">Height of the source image.</param>
            <param name="stride">The stride of the image.</param>
            <param name="planes">The source planes.</param>
            <param name="left">X-coordinate of the image rectangle.</param>
            <param name="top">Y-coordinate of the image rectangle.</param>
            <param name="width">A width of image.</param>
            <param name="height">A height of image.</param>
            <param name="flags">Must be zero.</param>
            <returns>A NImage object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImage.GetWrapper(Neurotec.Images.NImage,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates NImage object wrapper.
            </summary>
            <param name="srcImage">A NImage source object.</param>
            <param name="left">X\-coordinate of the image rectangle. </param>
            <param name="top">Y\-coordinate of the image rectangle. </param>
            <param name="width">A width of image.</param>
            <param name="height">A height of image.</param>
            <returns>
            A NImage object.
            </returns>
            <remarks>
            For more information on image stride see Stride property.
            
            Format of memory block pixels points to must be the same as
            described in Pixels property.
            
            <i>horzResolution</i> and <i>vertResolution</i> can be zero
            if resolution is not applicable for the image.
            </remarks>
            <exception cref="T:System.ArgumentNullException">srcImage is null.</exception>
        </member>
        <member name="M:Neurotec.Images.NImage.GetWrapper(Neurotec.Images.NImage,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates NImage object wrapper.
            </summary>
            <param name="srcImage">A NImage source object.</param>
            <param name="left">X\-coordinate of the image rectangle. </param>
            <param name="top">Y\-coordinate of the image rectangle. </param>
            <param name="width">A width of image.</param>
            <param name="height">A height of image.</param>
            <param name="flags">Must be zero.</param>
            <returns>
            A NImage object.
            </returns>
            <remarks>
            For more information on image stride see Stride property.
            
            Format of memory block pixels points to must be the same as described in Pixels property.
            
            <i>horzResolution</i> and <i>vertResolution</i> can be zero if resolution is not applicable for the
            image. 
            </remarks>                                                                                         
        </member>
        <member name="M:Neurotec.Images.NImage.Create(Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Creates NImage with specified pixel format, size and stride.
            </summary>
            <param name="pixelFormat">Image pixel format.</param>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="stride">Image stride.</param>
            <returns>
            NImage object.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Images.NImage.Create(Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int64,System.UInt32)">
            <summary>
            Creates NImage with specified pixel format, size, stride and
            flags.
            </summary>
            <param name="pixelFormat">Image pixel format.</param>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="stride">Image stride.</param>
            <param name="flags">Flags controlling object creation.
                                See section &quot;Fileds&quot; for
                                the list of available to use
                                flags.</param>
            <returns>
            NImage object. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Images.NImage.FromData(Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int32,System.UInt32,Neurotec.IO.NBuffer)">
            <summary>
            Creates NImage object from data with specified parameters.
            </summary>
            <param name="pixelFormat">A NPixelFormat of image.</param>
            <param name="width">Specifies width of the image. </param>
            <param name="height">Specifies height of the image.</param>
            <param name="stride">A stride of image.</param>
            <param name="srcStride">A stride of source image.</param>
            <param name="srcPixels">Source image pixel array.</param>
            <returns>
            A NImage object.
            </returns>
            <remarks>
            If stride is zero then image stride is automatically
            calculated. For more information on image stride see Stride
            property.
            
            Format of memory block srcPixels points to must be the same
            as described in Pixels property, only stride is equal to
            srcStride. 
            </remarks>
        </member>
        <member name="M:Neurotec.Images.NImage.FromData(Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int64,System.Int64,Neurotec.IO.NBuffer,System.UInt32)">
            <summary>
            Creates NImage object from data with specified parameters.
            </summary>
            <param name="pixelFormat">A NPixelFormat of image.</param>
            <param name="width">Specifies width of the image. </param>
            <param name="height">Specifies height of the image.</param>
            <param name="stride">A stride of image.</param>
            <param name="srcStride">A stride of source image.</param>
            <param name="srcPixels">Source image pixel array.</param>
            <param name="flags">Flags controlling NImage creation.
                                These flags can be used\:
                                FlagSrcAlphaChannelFirst,
                                FlagSrcBottomToTop,
                                FlagSrcSwapChannels.</param>
            <returns>
            A NImage object.
            </returns>
            <remarks>
            If stride is zero then image stride is automatically
            calculated. For more information on image stride see Stride
            property.
            
            Format of memory block srcPixels points to must be the same
            as described in Pixels property, only stride is equal to
            srcStride. 
            </remarks>
        </member>
        <member name="M:Neurotec.Images.NImage.FromData(Neurotec.Images.NPixelFormat,System.Int32,System.UInt32,System.UInt32,System.Int32,Neurotec.IO.NBuffer,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates NImage object from data with specified parameters.
            </summary>
            <param name="pixelFormat">A NPixelFormat of image.</param>
            <param name="stride">A stride of image.</param>
            <param name="srcWidth">A width of source image.</param>
            <param name="srcHeight">A height o source image.</param>
            <param name="srcStride">A stride of source image.</param>
            <param name="srcPixels">Source image pixel array.</param>
            <param name="left">X coordinate of the image.</param>
            <param name="top">Y coordinate of the image.</param>
            <param name="width">Specifies width of the image. </param>
            <param name="height">Specifies height of the image.</param>
            <returns>
            A NImage object.
            </returns>
            <remarks>
            If stride is zero then image stride is automatically
            calculated. For more information on image stride see Stride
            property.
            
            Format of memory block srcPixels points to must be the same
            as described in Pixels property, only stride is equal to
            srcStride. 
            </remarks>
        </member>
        <member name="M:Neurotec.Images.NImage.FromData(Neurotec.Images.NPixelFormat,System.Int64,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates NImage object from data with specified parameters.
            </summary>
            <param name="pixelFormat">A NPixelFormat of image.</param>
            <param name="stride">A stride of image.</param>
            <param name="srcWidth">A width of source image.</param>
            <param name="srcHeight">A height of source image.</param>
            <param name="srcStride">A stride of source image.</param>
            <param name="srcPixels">Source image pixel array.</param>
            <param name="left">X coordinate of the image.</param>
            <param name="top">Y coordinate of the image.</param>
            <param name="width">Specifies width of the image. </param>
            <param name="height">Specifies height of the image.</param>
            <param name="flags">Flags controlling NImage creation.
                                These flags can be used\:
                                FlagSrcAlphaChannelFirst,
                                FlagSrcBottomToTop,
                                FlagSrcSwapChannels.</param>
            <returns>
            A NImage object.
            </returns>
            <remarks>
            If stride is zero then image stride is automatically
            calculated. For more information on image stride see Stride
            property.
            
            Format of memory block srcPixels points to must be the same
            as described in Pixels property, only stride is equal to
            srcStride. 
            </remarks>
        </member>
        <member name="M:Neurotec.Images.NImage.FromData(Neurotec.Images.NPixelFormat,System.Int64,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates NImage object from data with specified parameters.
            </summary>
            <param name="pixelFormat">A NPixelFormat of image.</param>
            <param name="stride">A stride of image.</param>
            <param name="srcWidth">A width of source image.</param>
            <param name="srcHeight">A height of source image.</param>
            <param name="srcStride">A stride of source image.</param>
            <param name="srcPlanes">NBuffer containing source planes.</param>
            <param name="srcLeft">X coordinate of the image.</param>
            <param name="srcTop">Y coordinate of the image.</param>
            <param name="width">Specifies width of the image.</param>
            <param name="height">Specifies height of the image.</param>
            <param name="flags">Flags controlling NImage creation.
                                These flags can be used\:
                                FlagSrcAlphaChannelFirst,
                                FlagSrcBottomToTop,
                                FlagSrcSwapChannels.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Images.NImage.FromImage(Neurotec.Images.NPixelFormat,System.Int32,Neurotec.Images.NImage)">
            <summary>
            Creates NImage object from another NImage object.
            </summary>
            <param name="pixelFormat">A NPixelFormat of image.</param>
            <param name="stride">A stride of image.</param>
            <param name="srcImage">A NImage source object.</param>
            <returns>
            A NImage object.
            </returns>
            <remarks>
            If stride is zero then image stride is automatically
            calculated. For more information on image stride see Stride
            property. 
            </remarks>
        </member>
        <member name="M:Neurotec.Images.NImage.FromImage(Neurotec.Images.NPixelFormat,System.Int64,Neurotec.Images.NImage,System.UInt32)">
            <summary>
            Creates NImage object from another NImage object.
            </summary>
            <param name="pixelFormat">A NPixelFormat of image.</param>
            <param name="stride">A stride of image.</param>
            <param name="srcImage">A NImage source object.</param>
            <param name="flags">Flags controlling method. Reserved
                                for future use. Must be 0.</param>
            <returns>
            A NImage object.
            </returns>
            <remarks>
            If stride is zero then image stride is automatically
            calculated. For more information on image stride see Stride
            property. 
            </remarks>
        </member>
        <member name="M:Neurotec.Images.NImage.FromImage(Neurotec.Images.NPixelFormat,System.Int32,Neurotec.Images.NImage,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates NImage object from another NImage object.
            </summary>
            <param name="pixelFormat">A NPixelFormat of image.</param>
            <param name="stride">A stride of image.</param>
            <param name="srcImage">A NImage source object.</param>
            <param name="left">X\-coordinate of the image
                               rectangle. </param>
            <param name="top">Y\-coordinate of the image
                              rectangle. </param>
            <param name="width">A width of image.</param>
            <param name="height">A height of image.</param>
            <returns>
            A NImage object.
            </returns>
            <remarks>
            If stride is zero then image stride is automatically
            calculated. For more information on image stride see Stride
            property. 
            </remarks>
        </member>
        <member name="M:Neurotec.Images.NImage.FromImage(Neurotec.Images.NPixelFormat,System.Int64,Neurotec.Images.NImage,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates NImage object from another NImage object.
            </summary>
            <param name="pixelFormat">A NPixelFormat of image.</param>
            <param name="stride">A stride of image.</param>
            <param name="srcImage">A NImage source object.</param>
            <param name="left">X\-coordinate of the image
                               rectangle. </param>
            <param name="top">Y\-coordinate of the image
                              rectangle. </param>
            <param name="width">A width of image.</param>
            <param name="height">A height of image.</param>
            <param name="flags">Flags controlling method. Reserved
                                for future use. Must be 0.</param>
            <returns>
            A NImage object.
            </returns>
            <remarks>
            If stride is zero then image stride is automatically
            calculated. For more information on image stride see Stride
            property. 
            </remarks>
        </member>
        <member name="M:Neurotec.Images.NImage.FromFile(System.String)">
            <summary>
            Creates NImage object from file.
            </summary>
            <param name="fileName">A string that contains the name of
                                   the file.</param>
            <returns>
            A NImage object. 
            </returns>
        </member>
        <member name="M:Neurotec.Images.NImage.FromFile(System.String,Neurotec.Images.NImageFormat)">
            <summary>
            Creates NImage object from file with specified NImageFormat.
            </summary>
            <param name="fileName">A string that contains the name of
                                   the file.</param>
            <param name="imageFormat">An image NImageFormat object.</param>
            <returns>
            A NImage object. 
            </returns>                                                     
        </member>
        <member name="M:Neurotec.Images.NImage.FromFile(System.String,Neurotec.Images.NImageFormat,System.UInt32)">
            <summary>
            Creates NImage object from file with specified NImageFormat.
            </summary>
            <param name="fileName">A string that contains the name of
                                   the file.</param>
            <param name="imageFormat">An image NImageFormat object.</param>
            <param name="flags">Flags controlling method. Reserved
                                for future use. Must be 0. </param>
            <returns>
            A NImage object. 
            </returns>                                                     
        </member>
        <member name="M:Neurotec.Images.NImage.FromMemory(System.Byte[])">
            <summary>
            Creates NImage object from a byte array.
            </summary>
            <param name="buffer">The source byte array.</param>
            <returns>
            Created NImage object.
            </returns>                                         
        </member>
        <member name="M:Neurotec.Images.NImage.FromMemory(System.Byte[],Neurotec.Images.NImageFormat)">
            <summary>
            Creates NImage object from a byte array.
            </summary>
            <param name="buffer">The source byte array.</param>
            <param name="format">Image format.</param>
            <returns>
            Created NImage object. 
            </returns>                                         
        </member>
        <member name="M:Neurotec.Images.NImage.FromMemory(Neurotec.IO.NBuffer)">
            <summary>
            Creates NImage object from another memory buffer.
            </summary>
            <param name="buffer">Memory buffer containing NImage data.</param>
            <returns>
            Created NImage object.
            </returns>                                                        
        </member>
        <member name="M:Neurotec.Images.NImage.FromMemory(Neurotec.IO.NBuffer,Neurotec.Images.NImageFormat)">
            <summary>
            Creates NImage object from another memory buffer.
            </summary>
            <param name="buffer">Memory buffer containing NImage
                                 data.</param>
            <param name="imageFormat">Image format.</param>
            <returns>
            Created NImage object.
            </returns>                                          
        </member>
        <member name="M:Neurotec.Images.NImage.FromMemory(Neurotec.IO.NBuffer,Neurotec.Images.NImageFormat,System.UInt32)">
            <summary>
            Creates NImage object from another memory buffer.
            </summary>
            <param name="buffer">Memory buffer containing NImage
                                 data.</param>
            <param name="imageFormat">Image format.</param>
            <param name="flags">Flags controlling method. Reserved
                                for future use. Must be 0. </param>
            <returns>
            Created NImage object. 
            </returns>                                             
        </member>
        <member name="M:Neurotec.Images.NImage.FromStream(Neurotec.IO.NStream)">
            <summary>
            Reads NImage from the specified stream
            </summary>
            <param name="stream">Stream which contains NImage data.</param>
            <returns>
            NImage object. 
            </returns>                                                     
        </member>
        <member name="M:Neurotec.Images.NImage.FromStream(Neurotec.IO.NStream,Neurotec.Images.NImageFormat)">
            <summary>
            Reads NImage from the specified stream with specified image
            format.
            </summary>
            <param name="stream">Stream which contains NImage data.</param>
            <param name="imageFormat">Image format.</param>
            <returns>
            NImage object. 
            </returns>                                                     
        </member>
        <member name="M:Neurotec.Images.NImage.FromStream(Neurotec.IO.NStream,Neurotec.Images.NImageFormat,System.UInt32)">
            <summary>
            Reads NImage from the specified stream with specified image
            format.
            </summary>
            <param name="stream">Stream which contains NImage data.</param>
            <param name="imageFormat">Image format.</param>
            <param name="flags">Flags controlling method. Reserved
                                for future use. Must be 0. </param>
            <returns>
            NImage object. 
            </returns>                                                     
        </member>
        <member name="M:Neurotec.Images.NImage.FromHBitmap(System.IntPtr)">
            <summary>
            Creates NImage object from handle.
            </summary>
            <param name="hBitmap">A pointer to handle.</param>
            <returns>
            A NImage object. 
            </returns>
        </member>
        <member name="M:Neurotec.Images.NImage.FromHBitmap(System.IntPtr,System.UInt32)">
            <summary>
            Creates NImage object from handle.
            </summary>
            <param name="hBitmap">A pointer to handle.</param>
            <param name="flags">Flags controlling method. Reserved for
                                future use. Must be 0. </param>
            <returns>
            A NImage object. 
            </returns>
        </member>
        <member name="M:Neurotec.Images.NImage.FromBitmap(System.Drawing.Bitmap)">
            <summary>
            Creates NImage from Bitmap.
            </summary>
            <param name="bitmap">An object used to work with images
                                 defined by pixel data.</param>
            <returns>
            A NImage object. 
            </returns>                                             
        </member>
        <member name="M:Neurotec.Images.NImage.FromBitmap(System.Drawing.Bitmap,System.UInt32)">
            <summary>
            Creates NImage from Bitmap.
            </summary>
            <param name="bitmap">An object used to work with images defined by pixel data.</param>
            <param name="flags">Flags controlling object creation. See section &quot;Fileds&quot; for the list
                                of available to use flags.</param>
            <returns>
            A NImage object. 
            </returns>                                                                                        
        </member>
        <member name="M:Neurotec.Images.NImage.Copy(Neurotec.Images.NPixelFormat,System.Array,System.Array,Neurotec.IO.NBuffer,System.Int32,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer[],System.UInt32,System.UInt32,Neurotec.Images.NPixelFormat,System.Array,System.Array,Neurotec.IO.NBuffer,System.Int32,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies planes from one memory buffer to another.
            </summary>
            <param name="srcPixelFormat">The source pixel format.</param>
            <param name="srcMinValue">Minimum source pixel values.</param>
            <param name="srcMaxValue">Maximum source pixel values.</param>
            <param name="srcPalette">Source image palette.</param>
            <param name="srcPaletteLength">Source image palette length.</param>
            <param name="srcWidth">The width of the source image data.</param>
            <param name="srcHeight">The height of the source image data.</param>
            <param name="srcStride">The stride of the source image data.</param>
            <param name="srcPlanes">The source memory block.</param>
            <param name="srcLeft">The left coordinate of the source image data.</param>
            <param name="srcTop">The top coordinate of the source image data.</param>
            <param name="dstPixelFormat">The destination pixel format.</param>
            <param name="dstMinValue">Minimum destination pixel values.</param>
            <param name="dstMaxValue">Maximum destination pixel values.</param>
            <param name="dstPalette">Destination image palette.</param>
            <param name="dstPaletteLength">Destination image palette length.</param>
            <param name="dstWidth">The width of the destination image data.</param>
            <param name="dstHeight">The height of the destination image data.</param>
            <param name="dstStride">The stride of the destination image data.</param>
            <param name="dstPlanes">The destination memory block.</param>
            <param name="dstLeft">The left coordinate of the destination image data.</param>
            <param name="dstTop">The top coordinate of the destination image data.</param>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="flags">Flags controlling function. These flags can be used: NI_DST_ALPHA_CHANNEL_FIRST, NI_DST_BOTTOM_TO_TOP, NI_DST_SWAP_CHANNELS.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.Copy(Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer[],System.UInt32,System.UInt32,Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies planes from one memory buffer to another.
            </summary>
            <param name="srcPixelFormat">The source pixel format.</param>
            <param name="srcWidth">The width of the source image data.</param>
            <param name="srcHeight">The height of the source image data.</param>
            <param name="srcStride">The stride of the source image data.</param>
            <param name="srcPlanes">Source memory block.</param>
            <param name="srcLeft">The left coordinate of the source image data.</param>
            <param name="srcTop">The top coordinate of the source image data.</param>
            <param name="dstPixelFormat">The destination pixel format.</param>
            <param name="dstWidth">The width of the destination image data.</param>
            <param name="dstHeight">The height of the destination image data.</param>
            <param name="dstStride">The stride of the destination image data.</param>
            <param name="dstPlanes">Destination memory block.</param>
            <param name="dstLeft">The left coordinate of the destination image data.</param>
            <param name="dstTop">The top coordinate of the destination image data.</param>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="flags">Flags controlling function. These flags can be used: NI_DST_ALPHA_CHANNEL_FIRST, NI_DST_BOTTOM_TO_TOP, NI_DST_SWAP_CHANNELS.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.Copy(Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer,System.UInt32,System.UInt32,Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies pixels from one memory buffer to another.
            </summary>
            <param name="srcPixelFormat">The source pixel format.</param>
            <param name="srcWidth">The width of the source image data.</param>
            <param name="srcHeight">The height of the source image data.</param>
            <param name="srcStride">The stride of the source image data.</param>
            <param name="srcPixels">Source memory block.</param>
            <param name="srcLeft">The left coordinate of the source image data.</param>
            <param name="srcTop">The top coordinate of the source image data.</param>
            <param name="dstPixelFormat">The destination pixel format.</param>
            <param name="dstWidth">The width of the destination image data.</param>
            <param name="dstHeight">The height of the destination image data.</param>
            <param name="dstStride">The stride of the destination image data.</param>
            <param name="dstPixels">Destination memory block.</param>
            <param name="dstLeft">The left coordinate of the destination image data.</param>
            <param name="dstTop">The top coordinate of the destination image data.</param>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="flags">Flags controlling function. These flags can be used: NI_DST_ALPHA_CHANNEL_FIRST, NI_DST_BOTTOM_TO_TOP, NI_DST_SWAP_CHANNELS.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.Copy(Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int32,Neurotec.IO.NBuffer,System.UInt32,System.UInt32,Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int32,Neurotec.IO.NBuffer,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies pixels from one memory buffer to another.
            </summary>
            <param name="srcPixelFormat">The source pixel format.</param>
            <param name="srcWidth">The width of the source image data.</param>
            <param name="srcHeight">The height of the source image data.</param>
            <param name="srcStride">The stride of the source image data.</param>
            <param name="srcPixels">Source memory block.</param>
            <param name="srcLeft">The left coordinate of the source image data.</param>
            <param name="srcTop">The top coordinate of the source image data.</param>
            <param name="dstPixelFormat">The destination pixel format.</param>
            <param name="dstWidth">The width of the destination image data.</param>
            <param name="dstHeight">The height of the destination image data.</param>
            <param name="dstStride">The stride of the destination image data.</param>
            <param name="dstPixels">Destination memory block.</param>
            <param name="dstLeft">The left coordinate of the destination image data.</param>
            <param name="dstTop">The top coordinate of the destination image data.</param>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.Copy(Neurotec.Images.NImage,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Neurotec.Images.NImage,System.UInt32,System.UInt32)">
            <summary>
            Copies specified rectangular area of the NImage to other
            NImage object.
            </summary>
            <param name="srcImage">NImage object to copy.</param>
            <param name="left">The x coordinate of source rectangle.</param>
            <param name="top">The y coordinate of source rectangle.</param>
            <param name="width">The width of source rectangle.</param>
            <param name="height">The height of source rectangle.</param>
            <param name="dstImage">A destination NImage object.
                                   Specified rectangular area will be
                                   copied to this object. </param>
            <param name="dstLeft">The x coordinate in the destination
                                  NImage object. Copied NImage will be
                                  placed starting by this coordinate.</param>
            <param name="dstTop">The y coordinate in the destination
                                 NImage object. Copied NImage will be
                                 placed starting by this coordinate.</param>
            <exception cref="T:System.ArgumentNullException">srcImage or dstImage
                                                    has null value.</exception>
        </member>
        <member name="M:Neurotec.Images.NImage.CopyFrom(Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int32,Neurotec.IO.NBuffer,System.UInt32,System.UInt32)">
            <summary>
            Copies pixels to from memory buffer.
            </summary>
            <param name="srcPixelFormat">The source pixel format.</param>
            <param name="srcWidth">The width of the source image data.</param>
            <param name="srcHeight">The height of the source image data.</param>
            <param name="srcStride">The stride of the source image data.</param>
            <param name="srcPixels">The source memory block.</param>
            <param name="left">The left coordinate of the image data.</param>
            <param name="top">The top coordinate of the image data.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.CopyFrom(Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies pixels to from memory buffer.
            </summary>
            <param name="srcPixelFormat">The source pixel format.</param>
            <param name="srcWidth">The width of the source image data.</param>
            <param name="srcHeight">The height of the source image data.</param>
            <param name="srcStride">The stride of the source image data.</param>
            <param name="srcPixels">The source memory block.</param>
            <param name="left">The left coordinate of the image data.</param>
            <param name="top">The top coordinate of the image data.</param>
            <param name="flags">Flags controlling function. These flags can be used: NI_DST_ALPHA_CHANNEL_FIRST, NI_DST_BOTTOM_TO_TOP, NI_DST_SWAP_CHANNELS.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.CopyFrom(Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies pixels to from memory buffer.
            </summary>
            <param name="srcPixelFormat">The source pixel format.</param>
            <param name="srcWidth">The width of the source image data.</param>
            <param name="srcHeight">The height of the source image data.</param>
            <param name="srcStride">The stride of the source image data.</param>
            <param name="srcPixels">The source memory block.</param>
            <param name="srcLeft">The left coordinate of the source image data.</param>
            <param name="srcTop">The top coordinate of the source image data.</param>
            <param name="left">The left coordinate of the image.</param>
            <param name="top">The top coordinate of the image.</param>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="flags">Flags controlling function. These flags can be used: NI_DST_ALPHA_CHANNEL_FIRST, NI_DST_BOTTOM_TO_TOP, NI_DST_SWAP_CHANNELS.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.CopyFrom(Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies planes to from memory buffer.
            </summary>
            <param name="srcPixelFormat">The source pixel format.</param>
            <param name="srcWidth">The width of the source image data.</param>
            <param name="srcHeight">The height of the source image data.</param>
            <param name="srcStride">The stride of the source image data.</param>
            <param name="srcPlanes">The source memory block.</param>
            <param name="srcLeft">The left coordinate of the source image data.</param>
            <param name="srcTop">The top coordinate of the source image data.</param>
            <param name="left">The left coordinate of the image.</param>
            <param name="top">The top coordinate of the image.</param>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="flags">Flags controlling function. These flags can be used: NI_DST_ALPHA_CHANNEL_FIRST, NI_DST_BOTTOM_TO_TOP, NI_DST_SWAP_CHANNELS.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.CopyFrom(Neurotec.Images.NPixelFormat,System.Array,System.Array,Neurotec.IO.NBuffer,System.Int32,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies planes from memory buffer.
            </summary>
            <param name="srcPixelFormat">The source pixel format.</param>
            <param name="srcMinValue">Minimum source pixel values.</param>
            <param name="srcMaxValue">Maximum source pixel values.</param>
            <param name="srcPalette">Source image palette.</param>
            <param name="srcPaletteLength">Source image palette length.</param>
            <param name="srcWidth">The width of the source image data.</param>
            <param name="srcHeight">The height of the source image data.</param>
            <param name="srcStride">The stride of the source image data.</param>
            <param name="srcPlanes">The source memory block.</param>
            <param name="srcLeft">The left coordinate of the source image data.</param>
            <param name="srcTop">The top coordinate of the source image data.</param>
            <param name="left">The left coordinate of the image.</param>
            <param name="top">The top coordinate of the image.</param>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="flags">Flags controlling function. These flags can be used: NI_DST_ALPHA_CHANNEL_FIRST, NI_DST_BOTTOM_TO_TOP, NI_DST_SWAP_CHANNELS.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.CopyTo(Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int32,Neurotec.IO.NBuffer,System.UInt32,System.UInt32)">
            <summary>
            Copies specified rectangular area of the NImage to other
            NImage object.
            </summary>
            <param name="dstPixelFormat">Destination pixel format.</param>
            <param name="dstWidth">The width of source image data.</param>
            <param name="dstHeight">The height of source image
                                    data.</param>
            <param name="dstStride">The stride of source image
                                    data.</param>
            <param name="dstPixels">Memory buffer where NImage data
                                    is saved. </param>
            <param name="dstLeft">The x coordinate in the
                                  destination NImage object.
                                  Copied NImage will be placed
                                  starting by this coordinate.</param>
            <param name="dstTop">The y coordinate in the
                                 destination NImage object.
                                 Copied NImage will be placed
                                 starting by this coordinate.</param>     
        </member>
        <member name="M:Neurotec.Images.NImage.CopyTo(Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies specified rectangular area of the NImage to other
            NImage object.
            </summary>
            <param name="dstPixelFormat">Destination pixel format.</param>
            <param name="dstWidth">The width of source image data.</param>
            <param name="dstHeight">The height of source image
                                    data.</param>
            <param name="dstStride">The stride of source image
                                    data.</param>
            <param name="dstPixels">Memory buffer where NImage data
                                    is saved. </param>
            <param name="dstLeft">The x coordinate in the
                                  destination NImage object.
                                  Copied NImage will be placed
                                  starting by this coordinate.</param>
            <param name="dstTop">The y coordinate in the
                                 destination NImage object.
                                 Copied NImage will be placed
                                 starting by this coordinate.</param>
            <param name="flags">Flags controlling this method.
                                These flags can be used\:
                                FlagDstAlphaChannelFirst,
                                FlagDstBottomToTop,
                                FlagDstSwapChannels.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.CopyTo(System.UInt32,System.UInt32,Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies part of pixels of specified NImage to memory buffer.
            </summary>
            <param name="left">Left coordinate of the image part.</param>
            <param name="top">Top coordinate of the image part.</param>
            <param name="dstPixelFormat">Destination pixel format.</param>
            <param name="dstWidth">The width of source image data.</param>
            <param name="dstHeight">The height of source image data.</param>
            <param name="dstStride">The stride of source image data.</param>
            <param name="dstPixels">The memory block where NImage data is saved.</param>
            <param name="dstLeft">The x coordinate in the destination NImage object. Copied data will be placed starting by this coordinate.</param>
            <param name="dstTop">The y coordinate in the destination NImage object. Copied data will be placed starting by this coordinate.</param>
            <param name="width">Width of the image part.</param>
            <param name="height">Height of the image part.</param>
            <param name="flags">Flags controlling function. These flags can be used: NI_DST_ALPHA_CHANNEL_FIRST, NI_DST_BOTTOM_TO_TOP, NI_DST_SWAP_CHANNELS.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.CopyTo(System.UInt32,System.UInt32,Neurotec.Images.NPixelFormat,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies part of planes of specified NImage to memory buffer.
            </summary>
            <param name="left">Left coordinate of the image part.</param>
            <param name="top">Top coordinate of the image part.</param>
            <param name="dstPixelFormat">Destination pixel format.</param>
            <param name="dstWidth">The width of destination image data.</param>
            <param name="dstHeight">The height of destination image data.</param>
            <param name="dstStride">The stride of destination image data.</param>
            <param name="dstPlanes">The memory block where NImage data is saved.</param>
            <param name="dstLeft">The x coordinate in the destination NImage object. Copied data will be placed starting by this coordinate.</param>
            <param name="dstTop">The y coordinate in the destination NImage object. Copied data will be placed starting by this coordinate.</param>
            <param name="width">Width of the image part.</param>
            <param name="height">Height of the image part.</param>
            <param name="flags">Flags controlling function. These flags can be used: NI_DST_ALPHA_CHANNEL_FIRST, NI_DST_BOTTOM_TO_TOP, NI_DST_SWAP_CHANNELS.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.CopyTo(System.UInt32,System.UInt32,Neurotec.Images.NPixelFormat,System.Array,System.Array,Neurotec.IO.NBuffer,System.Int32,System.UInt32,System.UInt32,System.Int64,Neurotec.IO.NBuffer[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies part of planes of specified NImage to memory buffer.
            </summary>
            <param name="left">Left coordinate of the image part.</param>
            <param name="top">Top coordinate of the image part.</param>
            <param name="dstPixelFormat">Destination pixel format.</param>
            <param name="dstMinValue">Minimum destination pixel values.</param>
            <param name="dstMaxValue">Maximum destination pixel values.</param>
            <param name="dstPalette">Destination image palette.</param>
            <param name="dstPaletteLength">Destination image palette length.</param>
            <param name="dstWidth">The width of destination image data.</param>
            <param name="dstHeight">The height of destination image data.</param>
            <param name="dstStride">The stride of destination image data.</param>
            <param name="dstPlanes">The memory block where NImage data is saved.</param>
            <param name="dstLeft">The x coordinate in the destination NImage object. Copied data will be placed starting by this coordinate.</param>
            <param name="dstTop">The y coordinate in the destination NImage object. Copied data will be placed starting by this coordinate.</param>
            <param name="width">Width of the image part.</param>
            <param name="height">Height of the image part.</param>
            <param name="flags">Flags controlling function. These flags can be used: NI_DST_ALPHA_CHANNEL_FIRST, NI_DST_BOTTOM_TO_TOP, NI_DST_SWAP_CHANNELS.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.CopyTo(Neurotec.Images.NImage,System.UInt32,System.UInt32)">
            <summary>
            Copies specified rectangular area of the NImage to other
            NImage object.
            </summary>
            <param name="dstImage">Destination NImage object. Specified
                                   NImage will be copied to this object.</param>
            <param name="dstLeft">The x coordinate in the destination
                                  NImage object. Copied NImage will be
                                  placed starting by this coordinate.</param>
            <param name="dstTop">The y coordinate in the destination
                                 NImage object. Copied NImage will be
                                 placed starting by this coordinate.</param>    
        </member>
        <member name="M:Neurotec.Images.NImage.ExportPalette(Neurotec.Images.NPixelFormat,System.Array,System.Array,System.UInt32,System.Int32@)">
            <summary>
            Exports the palette from the current image.
            </summary>
            <param name="dstPixelFormat">The destination pixel format.</param>
            <param name="dstMinValue">Minimum destination pixel values.</param>
            <param name="dstMaxValue">Maximum destination pixel values.</param>
            <param name="flags">Flags controlling function. These flags can be used: NI_DST_ALPHA_CHANNEL_FIRST, NI_DST_BOTTOM_TO_TOP, NI_DST_SWAP_CHANNELS.</param>
            <param name="paletteLength">[out] Palette length.</param>
            <returns>NBuffer containing the palette.</returns>
        </member>
        <member name="M:Neurotec.Images.NImage.Save(System.String)">
            <summary>
            Saves NImage object to file.
            </summary>
            <param name="fileName">A string that contains the name of
                                   the file.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.Save(System.String,Neurotec.Images.NImageFormat)">
            <summary>
            Saves NImage object to file with specified NImageFormat.
            </summary>
            <param name="fileName">A string that contains the name of
                                   the file.</param>
            <param name="imageFormat">An image NImageFormat object.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.Save(System.String,Neurotec.Images.NImageInfo)">
            <summary>
            Saves image to file using specified image info.
            </summary>
            <param name="fileName">A string that contains the name of the file. </param>
            <param name="info">Image info.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.Save(System.String,Neurotec.Images.NImageFormat,Neurotec.Images.NImageInfo,System.UInt32)">
            <summary>
            Saves image to file using specified format and image info.
            </summary>
            <param name="fileName">A string that contains the name of
                                   the file. </param>
            <param name="imageFormat">Image format.</param>
            <param name="info">Image info.</param>
            <param name="flags">Flags controlling method. Reserved
                                for future use. Must be 0.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.Save(Neurotec.Images.NImageFormat)">
            <summary>
            Saves image to memory buffer using specified format.
            </summary>
            <param name="imageFormat">Image format.</param>
            <returns>
            NBuffer type memory buffer which contains saved image data.
            </returns>
        </member>
        <member name="M:Neurotec.Images.NImage.Save(Neurotec.Images.NImageInfo)">
            <summary>
            Saves image to memory buffer using specified image info.
            </summary>
            <param name="info">Image info.</param>
            <returns>
            NBuffer type memory buffer which contains saved image data. 
            </returns>
        </member>
        <member name="M:Neurotec.Images.NImage.Save(Neurotec.Images.NImageFormat,Neurotec.Images.NImageInfo,System.UInt32)">
            <summary>
            Saves image to memory buffer using specified format.
            </summary>
            <param name="imageFormat">Image format.</param>
            <param name="info">Image info.</param>
            <param name="flags">Flags controlling method. Reserved
                                for future use. Must be 0. </param>
            <returns>
            NBuffer type memory buffer which contains saved image data. 
            </returns>
        </member>
        <member name="M:Neurotec.Images.NImage.Save(Neurotec.IO.NStream,Neurotec.Images.NImageFormat)">
            <summary>
            Saves image to stream using specified format.
            </summary>
            <param name="stream">Data stream used to save the image.
                                 </param>
            <param name="imageFormat">Image format.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.Save(Neurotec.IO.NStream,Neurotec.Images.NImageInfo)">
            <summary>
            Saves image to stream using specified image info.
            </summary>
            <param name="stream">Data stream used to save the image. </param>
            <param name="info">Image info.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.Save(Neurotec.IO.NStream,Neurotec.Images.NImageFormat,Neurotec.Images.NImageInfo,System.UInt32)">
            <summary>
            Saves image to stream using specified format and image info.
            </summary>
            <param name="stream">Data stream used to save the
                                 image. </param>
            <param name="imageFormat">Image format.</param>
            <param name="info">Image info.</param>
            <param name="flags">Flags controlling method. Reserved
                                for future use. Must be 0.</param>      
        </member>
        <member name="M:Neurotec.Images.NImage.FlipHorizontally">
            <summary>
            Flips image horizontally.
            </summary>               
        </member>
        <member name="M:Neurotec.Images.NImage.FlipVertically">
            <summary>
            Flips image vertically.
            </summary>             
        </member>
        <member name="M:Neurotec.Images.NImage.FlipDiagonally">
            <summary>
            Flips image diagonally.
            </summary>             
        </member>
        <member name="M:Neurotec.Images.NImage.RotateFlip(Neurotec.Images.NImageRotateFlipType)">
            <summary>
            Rotates image using rotation type.
            </summary>
            <param name="rotateFlipType">One of the rotation type value.
                                         </param>
            <returns>
            Rotated NImage object.
            </returns>
        </member>
        <member name="M:Neurotec.Images.NImage.Crop(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Crops an image.
            </summary>
            <param name="left">X\-coordinate of the cropping
                               rectangle. </param>
            <param name="top">Y\-coordinate of the cropping
                              rectangle. </param>
            <param name="width">Width of the cropping rectangle.</param>
            <param name="height">Height of the cropping rectangle.</param>
            <returns>
            Cropped NImage object.
            </returns>
        </member>
        <member name="M:Neurotec.Images.NImage.ToBitmap">
            <summary>
            Creates a Bitmap.
            </summary>
            <returns>
            A Bitmap object. 
            </returns>       
        </member>
        <member name="M:Neurotec.Images.NImage.ToHBitmap">
            <summary>
            Creates Windows HBITMAP.
            </summary>
            <returns>
            A Windows HBITMAP. 
            </returns>              
        </member>
        <member name="M:Neurotec.Images.NImage.GetPixel(System.UInt32,System.UInt32)">
            <summary>
            Retrieves the specified pixel.
            </summary>
            <param name="x">X-coordinate of the pixel.</param>
            <param name="y">Y-coordinate of the pixel.</param>
            <returns>An array representing the pixel.</returns>
        </member>
        <member name="M:Neurotec.Images.NImage.SetPixel(System.UInt32,System.UInt32,System.Array)">
            <summary>
            Sets specified pixel's value to the specified value.
            </summary>
            <param name="x">X-coordinate of the pixel.</param>
            <param name="y">Y-coordinate of the pixel.</param>
            <param name="value">An array representing the new pixel value.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.GetIndex(System.UInt32,System.UInt32)">
            <summary>
            Retrieves the palette entry index of the specified pixel.
            </summary>
            <param name="x">X-coordinate of the pixel.</param>
            <param name="y">Y-coordinate of the pixel.</param>
            <returns>Palette entry index.</returns>
        </member>
        <member name="M:Neurotec.Images.NImage.SetIndex(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Sets the palette entry index for the specified pixel.
            </summary>
            <param name="x">X-coordinate of the pixel.</param>
            <param name="y">Y-coordinate of the pixel.</param>
            <param name="value">Index of the palette entry.</param>
        </member>
        <member name="M:Neurotec.Images.NImage.GetPixels">
            <summary>
            Gets buffer which contains image pixels.
            </summary>
            <returns>
            Memory buffer containing image pixels.
            </returns>
        </member>
        <member name="P:Neurotec.Images.NImage.PixelFormat">
            <summary>
            Gets NPixelFormat of NImage object.
            </summary>
            <value>
            A NPixelFormat structure. 
            </value>
        </member>
        <member name="P:Neurotec.Images.NImage.MinValue">
            <summary>
            Gets or sets the minimum value of a pixel.
            </summary>
        </member>
        <member name="P:Neurotec.Images.NImage.MaxValue">
            <summary>
            Gets or sets the maximum value of a pixel.
            </summary>
        </member>
        <member name="P:Neurotec.Images.NImage.Planes">
            <summary>
            Gets the collection of planes.
            </summary>
        </member>
        <member name="P:Neurotec.Images.NImage.Palette">
            <summary>
            Retrieves the palette of the current image.
            </summary>
        </member>
        <member name="P:Neurotec.Images.NImage.Width">
            <summary>
            Gets width of image from NImage object.
            </summary>
            <value>
            A width of image. 
            </value>
        </member>
        <member name="P:Neurotec.Images.NImage.Height">
            <summary>
            Gets height of image from NImage object.
            </summary>
            <value>
            A height of image. 
            </value>
        </member>
        <member name="P:Neurotec.Images.NImage.Stride">
            <summary>
            Gets stride of image from NImage object.
            </summary>
            <value>
            A stride of image.
            </value>
            <remarks>
            Stride (size of one row) of the image depends on image pixel
            format and width. It cannot be less than value obtained with
            GetRowLongSize or GetRowSize methods with arguments obtained
            with PixelFormat and Width properties. 
            </remarks>
        </member>
        <member name="P:Neurotec.Images.NImage.LongStride">
            <summary>
            Gets stride of image from NImage object.
            </summary>
            <value>
            A stride of image.
            </value>
            <remarks>
            Stride (size of one row) of the image depends on image pixel
            format and width. It cannot be less than value obtained with
            GetRowLongSize or GetRowSize methods with arguments obtained
            with PixelFormat and Width properties. 
            </remarks>
        </member>
        <member name="P:Neurotec.Images.NImage.NativeStride">
            <summary>
            Gets stride of image from NImage object.
            </summary>
            <value>
            A stride of image.
            </value>
            <remarks>
            Stride (size of one row) of the image depends on image pixel format and width. It cannot be less than
            value obtained with GetRowLongSize or GetRowSize methods with arguments obtained with PixelFormat and
            Width properties. 
            </remarks>
        </member>
        <member name="P:Neurotec.Images.NImage.PlaneSize">
            <summary>
            Gets the plane size.
            </summary>
            <value>
            Int number representing plane size.
            </value>
        </member>
        <member name="P:Neurotec.Images.NImage.LongPlaneSize">
            <summary>
            Gets the plane size.
            </summary>
            <value>
            Long number representing plane size.
            </value>
        </member>
        <member name="P:Neurotec.Images.NImage.NativePlaneSize">
            <summary>
            Gets the native plane size.
            </summary>
            <value>
            UIntPtr representing plane size.
            </value>
        </member>
        <member name="P:Neurotec.Images.NImage.ImageSize">
            <summary>
            Gets size of NImage object.
            </summary>
            <value>
            A size of NImage object.
            </value>
            <remarks>
            Size of memory block containing image pixels is equal to
            image height multiplied by image stride. For more information
            see Height and Stride properties. 
            </remarks>
        </member>
        <member name="P:Neurotec.Images.NImage.LongImageSize">
            <summary>
            Gets size of NImage object.
            </summary>
            <value>
            A size of NImage object.
            </value>
            <remarks>
            Size of memory block containing image pixels is equal to
            image height multiplied by image stride. For more information
            see Height and Stride properties. 
            </remarks>
        </member>
        <member name="P:Neurotec.Images.NImage.NativeImageSize">
            <summary>
            Gets size of NImage object.
            </summary>
            <value>
            A size of NImage object.
            </value>
            <remarks>
            Size of memory block containing image pixels is equal to image height multiplied by image stride. For
            more information see Height and Stride properties. 
            </remarks>
        </member>
        <member name="P:Neurotec.Images.NImage.HorzResolution">
            <summary>
            Gets horizontal resolution in pixels per inch of image.
            </summary>
            <value>
            A horizontal resolution in pixels per inch of image.
            </value>
            <remarks>
            Horizontal resolution equal to zero means that it is not
            applicable for the image. 
            </remarks>
        </member>
        <member name="P:Neurotec.Images.NImage.VertResolution">
            <summary>
            Gets vertical resolution in pixels per inch of image.
            </summary>
            <value>
            A vertical resolution in pixels per inch of image.
            </value>
            <remarks>
            Vertical resolution equal to zero means that it is not
            applicable for the image. 
            </remarks>
        </member>
        <member name="P:Neurotec.Images.NImage.ResolutionIsAspectRatio">
            <summary>
            Gets or sets NImage resolution aspect ratio.
            </summary>
            <value>
            True, if resolution aspect ratio is used. False, otherwise.
            </value>
            <remarks>
            NImage resolution can have 2 modes: physical height and width
            in pixels or aspect ratio. Picture aspect ratio defines the
            shape of displayed image. Picture aspect ratio is notated
            X:Y, where X:Y is the ration of picture width to height. If
            this property has True value it means that NImage shape is
            defined using width and height ratio (aspect ratio). 
            </remarks>
        </member>
        <member name="P:Neurotec.Images.NImage.Info">
            <summary>
            Retrieves a NImageInfo object for the current image.
            </summary>
        </member>
        <member name="T:Neurotec.Images.NImageFormat">
            <summary>
            Provides functionality for loading and saving images in
            format-neutral style.
            </summary>                                             
        </member>
        <member name="T:Neurotec.Images.NImageFormat.ImageFormatCollection">
            <summary>
            Represents the collection of formats in a NImageFormat.
            </summary>
        </member>
        <member name="P:Neurotec.Images.NImageFormat.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.Select(System.String,System.IO.FileAccess)">
            <summary>
            Retrieves supported image format registered with file
            extension of specified file name and supporting
            reading/writing as specified.
            </summary>
            <param name="fileName">A string that contains the name of
                                   the file.</param>
            <param name="fileAccess">A file access.</param>
            <returns>
            A NImageFormat object. 
            </returns>                                               
        </member>
        <member name="M:Neurotec.Images.NImageFormat.SelectByInternetMediaType(System.String,System.IO.FileAccess)">
            <summary>
            Retrieves supported image format by specified internet media type and supporting specified file access.
            </summary>
            <param name="internetMediaType">A string that contains the internet media type.</param>
            <param name="fileAccess">A file access.</param>
            <returns>A NImageFormat object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.SelectReader(System.String)">
            <summary>
            Retrieves an image reader from a specified file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>NImageReader object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.SelectReader(System.String,System.UInt32)">
            <summary>
            Retrieves an image reader from a specified file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="flags">Must be zero.</param>
            <returns>NImageReader object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.SelectReader(Neurotec.IO.NBuffer)">
            <summary>
            Retrieves an image reader from a specified buffer.
            </summary>
            <param name="buffer">The buffer containing the reader.</param>
            <returns>NImageReader object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.SelectReader(Neurotec.IO.NBuffer,System.UInt32)">
            <summary>
            Retrieves an image reader from a specified buffer.
            </summary>
            <param name="buffer">The buffer containing the reader.</param>
            <param name="flags">Must be zero.</param>
            <returns>NImageReader object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.SelectReader(Neurotec.IO.NStream)">
            <summary>
            Retrieves an image reader from a specified stream.
            </summary>
            <param name="stream">The stream containing the reader.</param>
            <returns>NImageReader object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.SelectReader(Neurotec.IO.NStream,System.UInt32)">
            <summary>
            Retrieves an image reader from a specified stream.
            </summary>
            <param name="stream">The stream containing the reader.</param>
            <param name="flags">Must be zero.</param>
            <returns>NImageReader object.</returns>
        </member>
        <member name="P:Neurotec.Images.NImageFormat.Tiff">
            <summary>
            Specifies the TIFF image format.
            </summary>                      
        </member>
        <member name="P:Neurotec.Images.NImageFormat.Jpeg">
            <summary>
            Specifies the JPEG image format.
            </summary>                      
        </member>
        <member name="P:Neurotec.Images.NImageFormat.Gif">
            <summary>
            Specifies the GIF image format.
            </summary>                     
        </member>
        <member name="P:Neurotec.Images.NImageFormat.Png">
            <summary>
            Specifies the PNG image format.
            </summary>                     
        </member>
        <member name="P:Neurotec.Images.NImageFormat.Wsq">
            <summary>
            Specifies the WSQ image format.
            </summary>                     
        </member>
        <member name="P:Neurotec.Images.NImageFormat.Jpeg2K">
            <summary>
            Specifies the JPEG2000 image format.
            </summary>                          
        </member>
        <member name="P:Neurotec.Images.NImageFormat.Bmp">
            <summary>
            Specifies the BMP image format.
            </summary>                     
        </member>
        <member name="P:Neurotec.Images.NImageFormat.IHead">
            <summary>
            Specifies the NIST IHead image format.
            </summary>                            
        </member>
        <member name="P:Neurotec.Images.NImageFormat.Formats">
            <summary>
            Specifies collection of supported image formats.
            </summary>                                      
        </member>
        <member name="M:Neurotec.Images.NImageFormat.OpenReader(System.String)">
            <summary>
            Opens an image reader from a specified file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>NImageReader object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.OpenReader(System.String,System.UInt32)">
            <summary>
            Opens an image reader from a specified file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="flags">Must be zero.</param>
            <returns>NImageReader object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.OpenReader(Neurotec.IO.NBuffer)">
            <summary>
            Opens an image reader from a specified buffer.
            </summary>
            <param name="buffer">The buffer containing the reader.</param>
            <returns>NImageReader object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.OpenReader(Neurotec.IO.NBuffer,System.UInt32)">
            <summary>
            Opens an image reader from a specified buffer.
            </summary>
            <param name="buffer">The buffer containing the reader.</param>
            <param name="flags">Must be zero.</param>
            <returns>NImageReader object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.OpenReader(Neurotec.IO.NStream)">
            <summary>
            Opens an image reader from a specified stream.
            </summary>
            <param name="stream">The stream containing the reader.</param>
            <returns>NImageReader object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.OpenReader(Neurotec.IO.NStream,System.UInt32)">
            <summary>
            Opens an image reader from a specified stream.
            </summary>
            <param name="stream">The stream containing the reader.</param>
            <param name="flags">Must be zero.</param>
            <returns>NImageReader object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.CreateInfo(Neurotec.Images.NImage)">
            <summary>
            Creates image info object for the specified image.
            </summary>
            <param name="image">The specified image.</param>
            <returns>NImageInfo object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.CreateInfo(Neurotec.Images.NImage,System.UInt32)">
            <summary>
            Creates image info object for the specified image.
            </summary>
            <param name="image">The specified image.</param>
            <param name="flags">Must be zero.</param>
            <returns>NImageInfo object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.OpenWriter(System.String)">
            <summary>
            Opens an image writer to a specified file.
            </summary>
            <param name="fileName">The name of the file.</param>
            <returns>NImageWriter object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.OpenWriter(System.String,System.UInt32)">
            <summary>
            Opens an image writer to a specified file.
            </summary>
            <param name="fileName">The name of the file.</param>
            <param name="flags">Must be zero.</param>
            <returns>NImageWriter object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.OpenWriter">
            <summary>
            Opens an image writer.
            </summary>
            <returns>NImageWriter object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.OpenWriter(System.UInt32)">
            <summary>
            Opens an image writer.
            </summary>
            <param name="flags">Must be zero.</param>
            <returns>NImageWriter object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.OpenWriter(Neurotec.IO.NStream)">
            <summary>
            Opens an image writer to a specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>NImageWriter object.</returns>
        </member>
        <member name="M:Neurotec.Images.NImageFormat.OpenWriter(Neurotec.IO.NStream,System.UInt32)">
            <summary>
            Opens an image writer to a specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="flags">Must be zero.</param>
            <returns>NImageWriter object.</returns>
        </member>
        <member name="P:Neurotec.Images.NImageFormat.Name">
            <summary>
            Gets name of the current image format.
            </summary>
            <value>
            An image format name. 
            </value>                              
        </member>
        <member name="P:Neurotec.Images.NImageFormat.DefaultFileExtension">
            <summary>
            Gets default file extension of the current image format.
            </summary>
            <value>
            Default file extension. 
            </value>                                                
        </member>
        <member name="P:Neurotec.Images.NImageFormat.DefaultInternetMediaType">
            <summary>
            Gets Default Internet media type of the current image format.
            </summary>
            <value>
            An image format default Internet media type.
            </value>                                     
        </member>
        <member name="P:Neurotec.Images.NImageFormat.FileFilter">
            <summary>
            Gets file filter of the current image format.
            </summary>
            <value>
            An image format file filter.
            </value>                                     
        </member>
        <member name="P:Neurotec.Images.NImageFormat.InternetMediaType">
            <summary>
            Gets Internet media type of the current image format.
            </summary>
            <value>
            An image format Internet media type.
            </value>                                     
        </member>
        <member name="P:Neurotec.Images.NImageFormat.CanRead">
            <summary>
            Gets a value indicating whether the current image format
            supports reading.
            </summary>
            <value>
            <i>true</i> if image format can read, <i>false</i> if image
            format cannot read. 
            </value>                                                   
        </member>
        <member name="P:Neurotec.Images.NImageFormat.CanWrite">
            <summary>
            Gets a value indicating whether the current image format
            supports writing.
            </summary>
            <value>
            <i>true</i> if image format can write, <i>false</i> if image
            format cannot write. 
            </value>                                                    
        </member>
        <member name="P:Neurotec.Images.NImageFormat.CanWriteMultiple">
            <summary>
            Retrieves a value indicating whether the image format
            supports writing of multiple images.
            </summary>
            <value>
            <i>true</i> if image format can write, <i>false</i> if image
            format cannot write.
            </value>                                                    
        </member>
        <member name="T:Neurotec.Images.NImageRotateFlipType">
            <summary>
            Enumerates NImage rotation and flip values.
            </summary>  
        </member>
        <member name="F:Neurotec.Images.NImageRotateFlipType.RotateNone">
            <summary>
            Indicates that image should not be rotated.
            </summary>
        </member>
        <member name="F:Neurotec.Images.NImageRotateFlipType.Rotate90">
            <summary>
            Rotates image by 90 degrees.
            </summary>
        </member>
        <member name="F:Neurotec.Images.NImageRotateFlipType.Rotate180">
            <summary>
            Rotates image by 180 degrees.
            </summary>
        </member>
        <member name="F:Neurotec.Images.NImageRotateFlipType.Rotate270">
            <summary>
            Rotates image by 270 degrees.
            </summary>
        </member>
        <member name="F:Neurotec.Images.NImageRotateFlipType.FlipNone">
            <summary>
            No flip.
            </summary>
        </member>
        <member name="F:Neurotec.Images.NImageRotateFlipType.FlipX">
            <summary>
            Flips the image's orientation of the X coordinates.
            </summary>
        </member>
        <member name="F:Neurotec.Images.NImageRotateFlipType.FlipY">
            <summary>
            Flips the image's orientation of the Y coordinates.
            </summary>
        </member>
        <member name="F:Neurotec.Images.NImageRotateFlipType.FlipXY">
            <summary>
            Flips the image's orientation of the X or Y coordinates.
            </summary>
        </member>
        <member name="F:Neurotec.Images.NImageRotateFlipType.None">
            <summary>
            No flip or rotation.
            </summary>
        </member>
        <member name="F:Neurotec.Images.NImageRotateFlipType.Unspecified">
            <summary>
            Rotation and flip unspecified.
            </summary>
        </member>
        <member name="T:Neurotec.Images.NImageInfo">
            <summary>
            Retrieves the object information.
            </summary>                       
        </member>
        <member name="P:Neurotec.Images.NImageInfo.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.Images.NImageInfo.NImageRotateFlipTypeNativeType">
            <summary>
            Defines the native type of the image rotation.
            </summary>
        </member>
        <member name="M:Neurotec.Images.NImageInfo.#ctor">
            <summary>
            Creates a new instance of NImageInfo class.
            </summary>
        </member>
        <member name="P:Neurotec.Images.NImageInfo.Format">
            <summary>
            Gets or sets the image format.
            </summary>
            <value>
            The image format. 
            </value>                      
        </member>
        <member name="T:Neurotec.Images.NImageReader">
            <summary>
            Provides methods which can be used to read image data.
            </summary>                                            
        </member>
        <member name="P:Neurotec.Images.NImageReader.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Images.NImageReader.Read">
            <summary>
            Reads an image.
            </summary>
            <returns>
            NImage object.
            </returns>     
        </member>
        <member name="M:Neurotec.Images.NImageReader.Read(System.UInt32)">
            <summary>
            Reads an image.
            </summary>
            <param name="flags">[in] Must be zero.</param>
            <returns>
            NImage object. 
            </returns>                                    
        </member>
        <member name="M:Neurotec.Images.NImageReader.ReadInfo">
            <summary>
            Retrieves image info.
            </summary>
            <returns>
            NImageInfo object. 
            </returns>           
        </member>
        <member name="M:Neurotec.Images.NImageReader.ReadInfo(System.UInt32)">
            <summary>
            Retrieves image info.
            </summary>
            <param name="flags">[in] Must be zero.</param>
            <returns>
            NImageInfo object. 
            </returns>                                    
        </member>
        <member name="P:Neurotec.Images.NImageReader.Format">
            <summary>
            Gets or sets the image format.
            </summary>
            <value>
            The image format. 
            </value>                      
        </member>
        <member name="P:Neurotec.Images.NImageReader.ReadSize">
            <summary>
            Gets or sets the size of read image info.
            </summary>
            <value>
            The size of read image info. 
            </value>                                 
        </member>
        <member name="T:Neurotec.Images.NImages">
            <summary>
            Provides library registration and other additional
            functionality.
            </summary>                                        
        </member>
        <member name="P:Neurotec.Images.NImages.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Images.NImages.GetOpenFileFilter">
            <summary>
            Gets a list with names of all NImageFormats, which support
            reading. Names in the list are separated by semicolon.
            </summary>
            <returns>
            String with NImageFormat names separated by semicolon. 
            </returns>                                                
        </member>
        <member name="M:Neurotec.Images.NImages.GetSaveFileFilter">
            <summary>
            Gets a list with names of all NImageFormats, which support
            writing. Names in the list are separated by semicolon.
            </summary>
            <returns>
            String with NImageFormat names separated by semicolon. 
            </returns>                                                
        </member>
        <member name="M:Neurotec.Images.NImages.GetOpenFileFilterString(System.Boolean,System.Boolean)">
            <summary>
            Gets a list with names of all NImageFormats, which support
            reading. Names in the list are separated by semicolon.
            </summary>
            <param name="addAllImage">Boolean indicating whether to add
                                      &quot;All image files&quot; to the
                                      list.</param>
            <param name="addAllFiles">Boolean indicating whether to add
                                      &quot;All files&quot; to the list.</param>
            <returns>
            String with NImageFormat names separated by semicolon. 
            </returns>                                                          
        </member>
        <member name="M:Neurotec.Images.NImages.GetSaveFileFilterString">
            <summary>
            Gets a list with names of all NImageFormats, which support
            writing. Names in the list are separated by semicolon.
            </summary>
            <returns>
            String with NImageFormat names separated by semicolon. 
            </returns>                                                
        </member>
        <member name="M:Neurotec.Images.NImages.GetGrayscaleColorWrapper(Neurotec.Images.NImage,Neurotec.Images.NRgb,Neurotec.Images.NRgb)">
            <summary>
            Creates NImage object wrapper.
            </summary>
            <param name="image">A NImage object.</param>
            <param name="minColor">Specifies color to be used for black
                                   color.</param>
            <param name="maxColor">Specifies color to be used for white
                                   color.</param>
            <returns>
            An NImage object.
            </returns>
            <remarks>
            Gray values in source image are replaced with according RGB
            values from range [minColor, maxColor] in created image. 
            </remarks>                                                 
        </member>
        <member name="M:Neurotec.Images.NImages.RecolorImage(Neurotec.Images.NImage,Neurotec.Images.NPixelFormat,System.Array,System.Array)">
            <summary>
            Recolors the specified image.
            </summary>
            <param name="image">The image to be recolored.</param>
            <param name="pixelFormat">Image pixel format.</param>
            <param name="minValue">Minimum pixel value in the image.</param>
            <param name="maxValue">Maximum pixel value in the image.</param>
            <returns>The recolored image.</returns>
        </member>
        <member name="T:Neurotec.Images.NImageWriter">
            <summary>
            Provides methods which can be used to write image data.
            </summary>                                             
        </member>
        <member name="P:Neurotec.Images.NImageWriter.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Images.NImageWriter.Write(Neurotec.Images.NImage,Neurotec.Images.NImageInfo,System.UInt32)">
            <summary>
            Writes data into a specified image.
            </summary>
            <param name="image">The specified image. </param>
            <param name="info">The image info.</param>
            <param name="flags">Must be zero.</param>        
        </member>
        <member name="M:Neurotec.Images.NImageWriter.GetBuffer">
            <summary>
            Gets a memory buffer to write data from.
            </summary>
            <returns>
            ByteBuffer object.
            </returns>                              
        </member>
        <member name="P:Neurotec.Images.NImageWriter.Format">
            <summary>
            Gets or sets the image format.
            </summary>
            <value>
            NImageFormat object.
            </value>                      
        </member>
        <member name="P:Neurotec.Images.NistCom.NativeType">
            <summary>
            Gets or sets
            </summary>
            <value>
            The function that retrieves NType object for the enclosing type.
            </value>                                                        
        </member>
        <member name="T:Neurotec.Images.NPixelType">
            <summary>
            Enumerates the pixel types.
            </summary>
        </member>
        <member name="F:Neurotec.Images.NPixelType.Undefined">
            <summary>
            Undefined pixel type.
            </summary>
        </member>
        <member name="F:Neurotec.Images.NPixelType.Grayscale">
            <summary>
            Grayscale pixel type.
            </summary>
        </member>
        <member name="F:Neurotec.Images.NPixelType.Rgb">
            <summary>
            RGB pixel type.
            </summary>
        </member>
        <member name="T:Neurotec.Images.NPixelFormat">
            <summary>
            Provides functionality for working with pixel format.
            </summary>
            <remarks>
            Image pixel format is not limited to these fields. However
            only these fields are provided for usage with this SDK. 
            </remarks>
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.NPixelTypeNativeType">
            <summary>
            Defines the native type of the pixel type.
            </summary>
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Undefined">
            Indicates undefined pixel format.
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Grayscale1U">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 1 bit per channel (channel format - unsigned
            integer).
            </paraattr>                                                
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Grayscale2U">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 2 bits per channel (channel format - unsigned
            integer).
            </paraattr>                                                 
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Grayscale4U">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 4 bits per channel (channel format - unsigned
            integer).
            </paraattr>                                                 
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Grayscale8U">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 8 bits per channel (channel format - unsigned
            integer).
            </paraattr>                                                 
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Grayscale8S">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 8 bits per channel (channel format - signed
            integer).
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscaleA8U">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 8 bits per alpha channel (channel format -
            unsigned integer). Alpha channel specifies pixel
            transparency.
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscaleA8S">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 8 bits per alpha channel (channel format -
            signed integer). Alpha channel specifies pixel transparency.
            </paraattr>                                                 
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscalePA8U">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 8 bits per pre-multiplied alpha channel
            (channel format - unsigned integer).
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscalePA8S">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 8 bits per pre-multiplied alpha channel
            (channel format - signed integer).
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Grayscale16U">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 16 bits per channel (channel format - unsigned
            integer).
            </paraattr>                                                  
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Grayscale16S">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 16 bits per channel (channel format - signed
            integer).
            </paraattr>                                                
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscaleA16U">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 16 bits per alpha channel (channel format -
            unsigned integer). Alpha channel specifies pixel
            transparency.
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscaleA16S">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 16 bits per alpha channel (channel format -
            signed integer). Alpha channel specifies pixel transparency.
            </paraattr>                                                 
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscalePA16U">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 16 bits per pre-multiplied alpha channel
            (channel format - unsigned integer).
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscalePA16S">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 16 bits per pre-multiplied alpha channel
            (channel format - signed integer).
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Grayscale32U">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 32 bits per channel (channel format - unsigned
            integer).
            </paraattr>                                                  
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Grayscale32S">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 32 bits per channel (channel format - signed
            integer).
            </paraattr>                                                
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscaleA32U">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 32 bits per alpha channel (channel format -
            unsigned integer). Alpha channel specifies pixel
            transparency.
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscaleA32S">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 32 bits per alpha channel (channel format -
            signed integer). Alpha channel specifies pixel transparency.
            </paraattr>                                                 
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscalePA32U">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 32 bits per pre-multiplied alpha channel
            (channel format - unsigned integer).
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscalePA32S">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 32 bits per pre-multiplied alpha channel
            (channel format - signed integer).
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Grayscale64U">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 64 bits per channel (channel format - unsigned
            integer).
            </paraattr>                                                  
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Grayscale64S">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 64 bits per channel (channel format - signed
            integer).
            </paraattr>                                                
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscaleA64U">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 64 bits per alpha channel (channel format -
            unsigned integer). Alpha channel specifies pixel
            transparency.
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscaleA64S">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 64 bits per alpha channel (channel format -
            signed integer). Alpha channel specifies pixel transparency.
            </paraattr>                                                 
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscalePA64U">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 64 bits per pre-multiplied alpha channel
            (channel format - unsigned integer).
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscalePA64S">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 64 bits per pre-multiplied alpha channel
            (channel format - signed integer).
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Grayscale32F">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 16 bits per channel (channel format - floating
            point).
            </paraattr>                                                  
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscaleA32F">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 32 bits per alpha channel (channel format -
            floating point). Alpha channel specifies pixel transparency.
            </paraattr>                                                 
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscalePA32F">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 32 bits per pre-multiplied alpha channel
            (channel format - floating point).
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Grayscale64F">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 64 bits per channel (channel format - floating
            point).
            </paraattr>                                                  
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscaleA64F">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 64 bits per alpha channel (channel format -
            floating point). Alpha channel specifies pixel transparency.
            </paraattr>                                                 
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.GrayscalePA64F">
            <paraattr align="justify">
            Specifies grayscale image pixel format where each pixel is
            represented by 64 bits per pre-multiplied alpha channel
            (channel format - floating point).
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Rgb8U">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 8 bits per channel (channel
            format - unsigned integer).
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Rgb8S">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 8 bits per channel (channel
            format - signed integer).
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbA8U">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 8 bits per alpha channel
            (channel format - unsigned integer). Alpha channel specifies
            pixel transparency.
            </paraattr>                                                 
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbA8S">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 8 bits per alpha channel
            (channel format - signed integer). Alpha channel specifies
            pixel transparency.
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbPA8U">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 8 bits per pre-multiplied
            alpha channel (channel format - unsigned integer).
            </paraattr>                                             
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbPA8S">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 8 bits per pre-multiplied
            alpha channel (channel format - signed integer).
            </paraattr>                                             
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Rgb16U">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 16 bits per channel (channel
            format - unsigned integer).
            </paraattr>                                                
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Rgb16S">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 16 bits per channel (channel
            format - signed integer).
            </paraattr>                                                
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbA16U">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 16 bits per alpha channel
            (channel format - unsigned integer). Alpha channel specifies
            pixel transparency.
            </paraattr>                                                 
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbA16S">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 16 bits per alpha channel
            (channel format - signed integer). Alpha channel specifies
            pixel transparency.
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbPA16U">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 16 bits per pre-multiplied
            alpha channel (channel format - unsigned integer).
            </paraattr>                                              
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbPA16S">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 16 bits per pre-multiplied
            alpha channel (channel format - signed integer).
            </paraattr>                                              
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Rgb32U">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 32 bits per channel (channel
            format - unsigned integer).
            </paraattr>                                                
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Rgb32S">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 32 bits per channel (channel
            format - signed integer).
            </paraattr>                                                
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbA32U">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 32 bits per alpha channel
            (channel format - unsigned integer). Alpha channel specifies
            pixel transparency.
            </paraattr>                                                 
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbA32S">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 32 bits per alpha channel
            (channel format - signed integer). Alpha channel specifies
            pixel transparency.
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbPA32U">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 32 bits per pre-multiplied
            alpha channel (channel format - unsigned integer).
            </paraattr>                                              
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbPA32S">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 32 bits per pre-multiplied
            alpha channel (channel format - signed integer).
            </paraattr>                                              
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Rgb64U">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 64 bits per channel (channel
            format - unsigned integer).
            </paraattr>                                                
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Rgb64S">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 64 bits per channel (channel
            format - signed integer).
            </paraattr>                                                
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbA64U">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 64 bits per alpha channel
            (channel format - unsigned integer). Alpha channel specifies
            pixel transparency.
            </paraattr>                                                 
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbA64S">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 64 bits per alpha channel
            (channel format - signed integer). Alpha channel specifies
            pixel transparency.
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbPA64U">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 64 bits per pre-multiplied
            alpha channel (channel format - unsigned integer).
            </paraattr>                                              
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbPA64S">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 64 bits per pre-multiplied
            alpha channel (channel format - signed integer).
            </paraattr>                                              
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Rgb32F">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 32 bits per channel (channel
            format - floating point).
            </paraattr>                                                
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbA32F">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 32 bits per alpha channel
            (channel format - floating point). Alpha channel specifies
            pixel transparency.
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbPA32F">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 32 bits per pre-multiplied
            alpha channel (channel format - floating point).
            </paraattr>                                              
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Rgb64F">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 64 bits per channel (channel
            format - floating point).
            </paraattr>                                                
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbA64F">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 64 bits per alpha channel
            (channel format - floating point). Alpha channel specifies
            pixel transparency.
            </paraattr>                                               
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbPA64F">
            <paraattr align="justify">
            Specifies Rgb image pixel format where each pixel (Red,
            Green, Blue) is represented by 64 bits per pre-multiplied
            alpha channel (channel format - floating point).
            </paraattr>                                              
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Rgb8UIndexed1">
            <paraattr align="justify">
            Specifies indexed Rgb image pixel format where each pixel
            (Red, Green, Blue) is represented by 8 bits per channel
            (channel format - unsigned integer). Also 1 bit is for saving
            index to image palette.
            </paraattr>                                                  
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Rgb8UIndexed2">
            <paraattr align="justify">
            Specifies indexed Rgb image pixel format where each pixel
            (Red, Green, Blue) is represented by 8 bits per channel
            (channel format - unsigned integer). Also 2 bits is for
            saving index to image palette.
            </paraattr>                                              
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Rgb8UIndexed4">
            <paraattr align="justify">
            Specifies indexed Rgb image pixel format where each pixel
            (Red, Green, Blue) is represented by 8 bits per channel
            (channel format - unsigned integer). Also 4 bits is for
            saving index to image palette.
            </paraattr>                                              
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.Rgb8UIndexed8">
            <paraattr align="justify">
            Specifies indexed Rgb image pixel format where each pixel
            (Red, Green, Blue) is represented by 8 bits per channel
            (channel format - unsigned integer). Also 8 bits is for
            saving index to image palette.
            </paraattr>                                              
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbA8UIndexed1">
            <paraattr align="justify">
            Specifies indexed Rgb image pixel format where each pixel
            (Red, Green, Blue) is represented by 8 bits per alpha channel
            (channel format - unsigned integer). Also 1 bit is for saving
            index to image palette.
            </paraattr>                                                  
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbA8UIndexed2">
            <paraattr align="justify">
            Specifies indexed Rgb image pixel format where each pixel
            (Red, Green, Blue) is represented by 8 bits per alpha channel
            (channel format - unsigned integer). Also 2 bits is for
            saving index to image palette.
            </paraattr>                                                  
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbA8UIndexed4">
            <paraattr align="justify">
            Specifies indexed Rgb image pixel format where each pixel
            (Red, Green, Blue) is represented by 8 bits per alpha channel
            (channel format - unsigned integer). Also 4 bits is for
            saving index to image palette.
            </paraattr>                                                  
        </member>
        <member name="F:Neurotec.Images.NPixelFormat.RgbA8UIndexed8">
            <paraattr align="justify">
            Specifies indexed Rgb image pixel format where each pixel
            (Red, Green, Blue) is represented by 8 bits per alpha channel
            (channel format - unsigned integer). Also 8 bits is for
            saving index to image palette.
            </paraattr>                                                  
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.IsPixelTypeValid(Neurotec.Images.NPixelType)">
            <summary>
            Checks whether current NPixelType value is valid.
            </summary>
            <param name="value">The pixel type to be checked.</param>
            <returns>
            true if valid; else false.
            </returns>                                               
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.CanPixelTypeBeIndexed(Neurotec.Images.NPixelType)">
            <summary>
            Checks whether the specified pixel type can be indexed.
            </summary>
            <param name="pixelType">The specified pixel type.</param>
            <returns>
            true, if the pixel type can be indexed; else false.
            </returns>                                               
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.CalcRowNativeSize(System.Int32,System.UInt32,System.Int32)">
            <summary>
            Calculates number of bytes needed to store line of specified length of pixels with specified bits per
            pixel and alignment.
            </summary>
            <param name="bitsPerPixel">A number of bytes needed to store line of pixels.</param>
            <param name="length">A length of pixels.</param>
            <param name="alignment">Alignment.</param>
            <returns>
            The number of bytes needed to store line of specified length of pixels with specified bits per pixel.
            
            </returns>                                                                                           
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.CalcRowSize(System.Int32,System.UInt32,System.Int32)">
            <summary>
            Calculates number of bytes needed to store line of specified
            length of pixels with specified bits per pixel and alignment.
            
            
            </summary>
            <param name="bitsPerPixel">A number of bytes needed to store
                                   line of pixels.</param>
            <param name="length">A length of pixels.</param>
            <param name="alignment">Alignment.</param>
            
            <returns>
            The number of bytes needed to store line of specified length
            of pixels with specified bits per pixel. 
            </returns>                                                   
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.CalcRowLongSize(System.Int32,System.UInt32,System.Int32)">
            <summary>
            Calculates number of bytes needed to store line of specified
            length of pixels with specified bits per pixel and alignment.
            </summary>
            <param name="bitsPerPixel">A number of bytes needed to store
                                   line of pixels.</param>
            <param name="length">A length of pixels.</param>
            <param name="alignment">Alignment.</param>
            <returns>
            The number of bytes needed to store line of specified length
            of pixels with specified bits per pixel. 
            </returns>                                                   
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.CalcRowNativeSize(System.Int32,System.UInt32)">
            <summary>
            Calculates number of bytes needed to store line of specified length of pixels with specified bits per
            pixel.
            </summary>
            <param name="bitsPerPixel">A number of bytes needed to store line of pixels.</param>
            <param name="length">A length of pixels.</param>
            <returns>
            The number of bytes needed to store line of specified length of pixels with specified bits per pixel.
            
            </returns>                                                                                           
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.CalcRowSize(System.Int32,System.UInt32)">
            <summary>
            Calculates number of bytes needed to store line of specified
            length of pixels with specified bits per pixel.
            </summary>
            <param name="bitsPerPixel">A number of bytes needed to store
                                   line of pixels.</param>
            <param name="length">A length of pixels.</param>
            <returns>
            The number of bytes needed to store line of specified length
            of pixels with specified bits per pixel. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.CalcRowLongSize(System.Int32,System.UInt32)">
            <summary>
            Calculates number of bytes needed to store line of specified
            length of pixels with specified bits per pixel.
            </summary>
            <param name="bitsPerPixel">A number of bytes needed to store
                                   line of pixels.</param>
            <param name="length">A length of pixels.</param>
            <returns>
            The number of bytes needed to store line of specified length
            of pixels with specified bits per pixel. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of NPixelFormat class.
            </summary>
            <param name="value">The pixel format.</param>     
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.#ctor(Neurotec.Images.NPixelType,Neurotec.Media.NExtraChannel,System.Int32,Neurotec.Media.NChannelFormat,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of NPixelFormat class.
            </summary>
            <param name="pixelType">Type of pixels. </param>
            <param name="extraChannel">The extra channel. </param>
            <param name="channelCount">The number of channels. </param>
            <param name="channelFormat">Format of the channel. </param>
            <param name="bitsPerChannel">Number of bits per channel. </param>
            <param name="bitsPerIndex">Number of bits per index. </param>
            <param name="isSeparated"><b>true</b> if separated; else <b>false</b>.</param>
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the
            current Object.
            </summary>
            <param name="obj">The Object to compare with the current
                              Object.</param>
            <returns>
            <i>true</i> if the specified Object is equal to the current
            Object; otherwise, <i>false</i>. 
            </returns>                                                 
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.GetHashCode">
            <summary>
            Gets the hash code. Is intended for a hash function for a
            particular type. GetHashCode is suitable for use in hashing
            algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current Object. 
            </returns>                                                 
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.ToString">
            <summary>
            Retrieves string representation of NPixelFormat object.
            </summary>
            <returns>
            String representation of NPixelFormat object.
            </returns>                                             
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.ToString(System.String)">
            <summary>
            Retrieves string representation of NPixelFormat object.
            </summary>
            <param name="format">Reserved.</param>
            <returns>String representation of NPixelFormat object.</returns>
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.GetIndexed(System.Int32)">
            <summary>
            Retrieves an indexed version of the NPixelFormat.
            </summary>
            <param name="bitsPerIndex">Number of bits per index. </param>
            <returns>
            Indexed NPixelFormat.
            </returns>                                                   
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.GetNonIndexed">
            <summary>
            Retrieves a non-indexed version of the NPixelFormat.
            </summary>
            <returns>
            Non-indexed NPixelFormat.
            </returns>                                          
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.GetSeparated">
            <summary>
            Retrieves a separated version of the NPixelFormat.
            </summary>
            <returns>
            Separated NPixelFormat.
            </returns>                                        
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.GetNonSeparated">
            <summary>
            Retrieves a non-separated version of the NPixelFormat.
            </summary>
            <returns>
            Non-separated NPixelFormat.
            </returns>                                            
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.GetWithExtraChannel(Neurotec.Media.NExtraChannel)">
            <summary>
            Retrieves a version of the NPixelFormat with an extra channel.
            </summary>
            <param name="extraChannel">The extra channel.</param>
            <returns>
            NPixelFormat with an extra channel.
            </returns>                                                    
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.GetRowNativeSize(System.UInt32,System.Int32)">
            <summary>
            Calculates number of bytes needed to store line of specified length of pixels with specified
            NPixelFormat and alignment.
            </summary>
            <param name="length">A length of pixels.</param>
            <param name="alignment">Alignment.</param>
            <returns>
            No tables or formatting elements here!!! 
            </returns>                                                                                  
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.GetRowSize(System.UInt32,System.Int32)">
            <summary>
            Calculates number of bytes needed to store line of specified
            length of pixels with specified NPixelFormat and alignment.
            
            
            </summary>
            <param name="length">A length of pixels.</param>
            <param name="alignment">Alignment.</param>
            
            <returns>
            The number of bytes needed to store line of specified length
            of pixels with specified NPixel Format. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.GetRowLongSize(System.UInt32,System.Int32)">
            <summary>
            Calculates number of bytes needed to store line of specified
            length of pixels with specified NPixelFormat and alignment.
            </summary>
            <param name="length">A length of pixels.</param>
            <param name="alignment">Alignment.</param>
            <returns>
            The number of bytes needed to store line of specified length
            of pixels with specified NPixel Format. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.GetRowNativeSize(System.UInt32)">
            <summary>
            Calculates number of bytes needed to store line of specified length of pixels with specified
            NPixelFormat and alignment.
            </summary>
            <param name="length">A length of pixels.</param>
            <returns>
            The number of bytes needed to store line of specified length of pixels with specified NPixel Format. 
            </returns>                                                                                           
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.GetRowSize(System.UInt32)">
            <summary>
            Calculates number of bytes needed to store line of specified
            length of pixels with specified NPixelFormat.
            
            
            </summary>
            <param name="length">A length of pixels.</param>
            
            <returns>
            The number of bytes needed to store line of specified length
            of pixels with specified NPixel Format. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.GetRowLongSize(System.UInt32)">
            <summary>
            Calculates number of bytes needed to store line of specified
            length of pixels with specified NPixelFormat.
            
            
            </summary>
            <param name="length">A length of pixels.</param>
            
            <returns>
            The number of bytes needed to store line of specified length
            of pixels with specified NPixel Format. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.GetPaletteSize(System.Int32)">
            <summary>
            Retrieves the palette size.
            </summary>
            <param name="length">The length of pixels. </param>
            <returns>
            Palette size.
            </returns>                                         
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.IsValid">
            <summary>
            Checks whether current NPixelFormat value is valid.
            </summary>
            <returns>
            <i>true</i> if the object is valid NPixelFormat, <i>false</i>
            if not. 
            </returns>                                                   
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.PixelType">
            <summary>
            Gets or sets the type of the pixel.
            </summary>
            <value>
            The type of the pixel.
            </value>                           
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.BitsPerPixel">
            <summary>
            Each pixel value is stored in 24 bits consisting of three 8-bit values representing red, green and
            blue color components.
            </summary>
            <value>
            A number of bits per NPixelFormat. 
            </value>                                                                                          
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.BytesPerPixel">
            <summary>
            Gets or sets the number of bytes per pixel.
            </summary>
            <value>
            The number of bytes per pixel.
            </value>                                   
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.op_Explicit(Neurotec.Images.NPixelFormat)~System.UInt32">
            <summary>
            Gets value field of NPixelFormat object.
            </summary>
            <param name="pixelFormat">NPixelFormat object.</param>
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.op_Explicit(System.UInt32)~Neurotec.Images.NPixelFormat">
            <summary>
            This conversion operator converts from a uint type to a
            NPixelFormat type
            </summary>
            <param name="value">value to be converted</param>      
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.op_Equality(Neurotec.Images.NPixelFormat,Neurotec.Images.NPixelFormat)">
            <summary>
            Checks if two pixelFormats are equal.
            </summary>
            <param name="pixelFormat1">first pixelFormat to be compared.</param>
            <param name="pixelFormat2">second pixelFormat to be
                                       compared.</param>
            <returns>
            True if pixelFormats are equal, false otherwise. 
            </returns>                                                          
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.op_Inequality(Neurotec.Images.NPixelFormat,Neurotec.Images.NPixelFormat)">
            <summary>
            Checks if two pixelFormats are not equal.
            </summary>
            <param name="pixelFormat1">first pixelFormat to be compared.</param>
            <param name="pixelFormat2">second pixelFormat to be
                                       compared.</param>
            <returns>
            True if pixelFormats are not equal, false if equal. 
            </returns>                                                          
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.GetChannelType">
            <summary>
            Retrieves the current channel type.
            </summary>
            <returns>The current channel type.</returns>
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.ExtraChannel">
            <summary>
            Gets or sets the extra channel.
            </summary>
            <value>
            The extra channel.
            </value>                       
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.ChannelCount">
            <summary>
            Gets or sets the number of channels.
            </summary>
            <value>
            The number of channels.
            </value>                            
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.ChannelFormat">
            <summary>
            Gets or sets the format of the channel.
            </summary>
            <value>
            The format of the channel.
            </value>                               
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.BitsPerChannel">
            <summary>
            Gets or sets the number of bits per channel.
            </summary>
            <value>
            The number of bits per channel.
            </value>                                    
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.IsIndexed">
            <summary>
            Checks whether current NPixelFormat value is indexed.
            </summary>
            <value>
            <i>true</i> if current NPixelFormat is indexed, <i>false</i> if not. 
            </value>                                                             
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.BitsPerIndex">
            <summary>
            Gets or sets the number of bits per index.
            </summary>
            <value>
            The number of bits per index.
            </value>                                  
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.MaxPaletteLength">
            <summary>
            Gets or sets the maximum palette length.
            </summary>
            <value>
            The maximum palette length.
            </value>                                
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.IsSeparated">
            <summary>
            Checks whether current NPixelFormat value is separated.
            </summary>
            <value>
            <i>true</i> if current NPixelFormat is separated, <i>false</i> if not. 
            </value>                                                               
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.PlaneCount">
            <summary>
            Gets or sets the number of the planes.
            </summary>
            <value>
            The number of the planes.
            </value>                              
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.BitsPerValue">
            <summary>
            Gets or sets the number of bits per value.
            </summary>
            <value>
            The number of bits per value.
            </value>                                  
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.BitsPerPaletteEntry">
            <summary>
            Gets or sets the number of bits per palette entry.
            </summary>
            <value>
            The number of bits per palette entry.
            </value>                                          
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.BytesPerChannel">
            <summary>
            Gets or sets the number of bytes per channel.
            </summary>
            <value>
            The number of bytes per channel.
            </value>                                     
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.BytesPerValue">
            <summary>
            Gets or sets the number of bytes per value.
            </summary>
            <value>
            The number of bytes per value.
            </value>                                   
        </member>
        <member name="P:Neurotec.Images.NPixelFormat.BytesPerPaletteEntry">
            <summary>
            Gets or sets the number of bytes per palette entry.
            </summary>
            <value>
            The number of bytes per palette entry.
            </value>                                           
        </member>
        <member name="M:Neurotec.Images.NPixelFormat.Equals(Neurotec.Images.NPixelFormat)">
            <summary>
            Checks whether the current pixel format equals the other pixel format.
            </summary>
            <param name="other">The other pixel format.</param>
            <returns><i>true</i> if the specified Object is equal to the current
            Object; otherwise, <i>false</i>.</returns>
        </member>
        <member name="T:Neurotec.Images.NRgb">
            <summary>
            Represents an RGB color.
            </summary>    
        </member>
        <member name="P:Neurotec.Images.NRgb.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Images.NRgb.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the NRgb structure.
            </summary>
            <param name="red">The blue component value of this NRGB.</param>
            <param name="green">The green component value of this NRGB.</param>
            <param name="blue">The red component value of this NRGB. </param>  
        </member>
        <member name="M:Neurotec.Images.NRgb.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of NRGB class.
            </summary>
            <param name="value">RGB value array.</param>
        </member>
        <member name="M:Neurotec.Images.NRgb.ToString">
            <summary>
            Retrieves a string representation of NRgb object.
            </summary>
            <returns>
            String representation of NRgb object.
            </returns>                                       
        </member>
        <member name="M:Neurotec.Images.NRgb.ToString(System.String)">
            <summary>
            Retrieves string representation of NRgb object.
            </summary>
            <param name="format">Reserved.</param>
            <returns>String representation of NRgb object.</returns>
        </member>
        <member name="M:Neurotec.Images.NRgb.ToArray">
            <summary>
            Retrieves a byte array representation of NRgb object.
            </summary>
            <returns>
            Byte array representing NRgb object.
            </returns>                                           
        </member>
        <member name="P:Neurotec.Images.NRgb.Red">
            <summary>
            Gets the red component value of this NRgb structure.
            </summary>
            <value>
            The red component value of this NRgb.
            </value>                                            
        </member>
        <member name="P:Neurotec.Images.NRgb.Green">
            <summary>
            Gets the green component value of this NRgb structure.
            </summary>
            <value>
            The green component value of this NRgb.
            </value>                                              
        </member>
        <member name="P:Neurotec.Images.NRgb.Blue">
            <summary>
            Gets the blue component value of this NRgb structure.
            </summary>
            <value>
            The blue component value of this NRgb.
            </value>                                             
        </member>
        <member name="T:Neurotec.Images.PngInfo">
            <summary>
            Provides information about PNG format images.
            </summary>                                   
        </member>
        <member name="F:Neurotec.Images.PngInfo.DefaultCompressionLevel">
            <summary>
            Specifies default Png compression level.
            </summary>                              
        </member>
        <member name="P:Neurotec.Images.PngInfo.NativeType">
            <summary>
            Gets or sets
            </summary>
            <value>
            The function that retrieves NType object for the enclosing type.
            </value>                                                        
        </member>
        <member name="P:Neurotec.Images.PngInfo.CompressionLevel">
            <summary>
            Gets or sets compression level of a PNG image.
            </summary>
            <value>
            NInt value defining the compression level.
            </value>                                      
        </member>
        <member name="T:Neurotec.Images.TiffInfo">
            <summary>
            Provides information about TIFF format images.
            </summary>                                    
        </member>
        <member name="P:Neurotec.Images.TiffInfo.NativeType">
            <summary>
            Gets or sets
            </summary>
            <value>
            The function that retrieves NType object for the enclosing type.
            </value>                                                        
        </member>
        <member name="T:Neurotec.Images.WsqInfo">
            <summary>
            Provides information about Wsq images. 
            </summary>                             
        </member>
        <member name="F:Neurotec.Images.WsqInfo.DefaultBitRate">
            <summary>
            Default WSQ bit rate. 
            </summary>            
        </member>
        <member name="F:Neurotec.Images.WsqInfo.ImplementationNeurotechnologyWin32_x86">
            <summary>
            Indicates Win32-x86 implementation.
            </summary>
        </member>
        <member name="F:Neurotec.Images.WsqInfo.ImplementationNeurotechnologyWin64_x64">
            <summary>
            Indicates Win64-x64 implementation.
            </summary>
        </member>
        <member name="F:Neurotec.Images.WsqInfo.ImplementationNeurotechnologyDebian_i386">
            <summary>
            Indicates Debian i386 implementation.
            </summary>
        </member>
        <member name="F:Neurotec.Images.WsqInfo.ImplementationNeurotechnologyDebian_amd64">
            <summary>
            Indicates Debian amd64 implementation.
            </summary>
        </member>
        <member name="F:Neurotec.Images.WsqInfo.ImplementationNeurotechnologyMacOSX_Intel">
            <summary>
            Indicates MacOSX Intel implementation.
            </summary>
        </member>
        <member name="F:Neurotec.Images.WsqInfo.ImplementationNeurotechnologyMacOSX_Intel64">
            <summary>
            Indicates MacOSX Intel64 implementation.
            </summary>
        </member>
        <member name="F:Neurotec.Images.WsqInfo.ImplementationNeurotechnologyMacOSX_PowerPC">
            <summary>
            Indicates MacOSX PowerPC implementation.
            </summary>
        </member>
        <member name="F:Neurotec.Images.WsqInfo.RecoverCorruptFile">
            <summary>
            Image loading flag which attempts to load an image even if it cannot be fully read.
            </summary>
        </member>
        <member name="P:Neurotec.Images.WsqInfo.NativeType">
            <summary>
            Gets or sets
            </summary>
            <value>
            The function that retrieves NType object for the enclosing type.
            </value>                                                        
        </member>
        <member name="P:Neurotec.Images.WsqInfo.BitRate">
            <summary>
            Gets or sets WSQ image bit rate (Compression level).
            </summary>
            <value>
            WSQ image bit rate.
            </value>
            <remarks>
            WSQ images can be saved compressed. Compression is controlled
            using bit rate which can be calculated using this formula:
            11.25/N where N is compression ratio. Typical compression
            ratios:
            <xtable>
            Compression ratio   Bit rate
            ------------------  ---------
            1:15                0.75
            1:5                 2.25
            1:N                 11.25/N
            </xtable>
            </remarks>                                                   
        </member>
        <member name="P:Neurotec.Images.WsqInfo.ImplementationNumber">
            <summary>
            Gets or sets WSQ image implementation number.
            </summary>
            <value>
            WSQ image implementation number.
            </value>                                     
        </member>
        <member name="P:Neurotec.Images.WsqInfo.HasNistCom">
            <summary>
            Sets or checks whether the WSQ info file has a NIST comment.
            </summary>
        </member>
        <member name="P:Neurotec.Images.WsqInfo.NistCom">
            <summary>
            Retrieves the NIST comment of the WSQ info file.
            </summary>
        </member>
        <member name="T:Neurotec.Video.NVideoWriter">
            <summary>
            Provides functionality for writing to a video file.
            </summary>
            <remarks>
            <paraatr align="justify">
            When using XVID encoder make sure that automatic
            optimizations are turned off. Otherwise NVideoWriter may
            crash due to a bug in XVID code.
            
            If writing video files with XVID still crashes, then turn off
            all optimizations. Optimization settings can be located in
            Options-\>Other Options...-\>Common starting in a pop-up
            dialog box where you choose XVID codec.
            </paraatr>
            </remarks>                                                   
        </member>
        <member name="P:Neurotec.Video.NVideoWriter.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Video.NVideoWriter.#ctor(System.String,System.Int32,System.Int32,System.Double,Neurotec.Video.NVideoWriterOptions)">
            <summary>
            Initializes a new instance of NVideoWriter. Creates a video file.
            </summary>
            <param name="fileName">Path of the video file to be created.</param>
            <param name="width">Width of the video file frames in pixels.</param>
            <param name="height">Height of the video file frames in pixels.</param>
            <param name="frameRate">Frames per second of the resulting video.</param>
            <param name="options">Video writer options.</param>                      
        </member>
        <member name="M:Neurotec.Video.NVideoWriter.WriteFrame(Neurotec.Images.NImage)">
            <summary>
            Appends one frame to the video file.
            </summary>
            <param name="frame">frame to add to the video file.</param>
        </member>
        <member name="T:Neurotec.Video.NVideoWriterOptions">
            <summary>
            Manages video writer options.
            </summary>
        </member>
        <member name="P:Neurotec.Video.NVideoWriterOptions.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Video.NVideoWriterOptions.#ctor(System.Windows.Forms.IWin32Window)">
            <summary>
            Initializes a new instance of CompressionOptions. 
            Opens a dialog box with a list of available codecs.
            </summary>
        </member>
        <member name="T:Neurotec.Media.NAudioFormat">
            <summary>
            Defines digital audio file formats and provides methods for
            creating and manipulating audio types using Neurotechnology
            SDK.
            
            
            </summary>                                                 
        </member>
        <member name="F:Neurotec.Media.NAudioFormat.Unknown">
            Unknown audio format.
        </member>
        <member name="F:Neurotec.Media.NAudioFormat.Pcm">
            Uncompressed PCM audio. 
        </member>
        <member name="F:Neurotec.Media.NAudioFormat.Float">
            Uncompressed IEEE floating-point audio.
        </member>
        <member name="F:Neurotec.Media.NAudioFormat.Dts">
            Digital Theater Systems (DTS) audio.
        </member>
        <member name="F:Neurotec.Media.NAudioFormat.Drm">
            Encrypted audio data used with secure audio path.
        </member>
        <member name="F:Neurotec.Media.NAudioFormat.Msp1">
            MSP1 audio format.
        </member>
        <member name="F:Neurotec.Media.NAudioFormat.Mpeg">
            MPEG-1 audio.
        </member>
        <member name="F:Neurotec.Media.NAudioFormat.MP3">
            MPEG Audio Layer-3 (MP3).
        </member>
        <member name="F:Neurotec.Media.NAudioFormat.DolbyAC3Spdif">
            Dolby AC-3 audio over Sony/Philips Digital Interface
            (S/PDIF).                                           
        </member>
        <member name="F:Neurotec.Media.NAudioFormat.RawAac1">
            Advanced Audio Coding (AAC) (Raw audio data).
        </member>
        <member name="F:Neurotec.Media.NAudioFormat.WMAudioV8">
            Windows Media Audio 8 codec, Windows Media Audio 9 codec, or
            Windows Media Audio 9.1 codec.                              
        </member>
        <member name="F:Neurotec.Media.NAudioFormat.WMAudioV9">
            Windows Media Audio 9 Professional codec or Windows Media
            Audio 9.1 Professional codec.                            
        </member>
        <member name="F:Neurotec.Media.NAudioFormat.WMAudioLossless">
            Windows Media Audio 9 Lossless codec or Windows Media Audio
            9.1 codec.                                                 
        </member>
        <member name="F:Neurotec.Media.NAudioFormat.WmaSpdif">
            Windows Media Audio 9 Professional codec over S/PDIF. 
        </member>
        <member name="F:Neurotec.Media.NAudioFormat.Adts">
            Audio Data Transport Stream (ADTS) stream.
        </member>
        <member name="F:Neurotec.Media.NAudioFormat.Aac">
            Advanced Audio Coding (AAC).
            <remarks>
            The audio stream can contain raw AAC data or AAC data in an
            Audio Data Transport Stream (ADTS) stream.
            </remarks>                                                 
        </member>
        <member name="P:Neurotec.Media.NAudioFormat.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Media.NAudioFormat.MediaSubtypeToString(System.Int32)">
            <summary>
            Converts media subtype to string.
            </summary>
            <param name="value">Subtype value (int).</param>
            <returns>
            String which contains subtype string value. 
            </returns>                                      
        </member>
        <member name="M:Neurotec.Media.NAudioFormat.MediaSubtypeToString(System.Int32,System.String)">
            <summary>
            Converts media subtype to string.
            </summary>
            <param name="value">Subtype value (int).</param>
            <param name="format">Reserved.</param>
            <returns>String which contains subtype string value. </returns>
        </member>
        <member name="M:Neurotec.Media.NAudioFormat.#ctor">
            <summary>
            Creates new instance of NAudioFormat. 
            </summary>                            
        </member>
        <member name="P:Neurotec.Media.NAudioFormat.ChannelCount">
            <summary>
            Gets or sets audio channel count set in NAudioFormat.
            </summary>
            <value>
            Audio channel count. 
            </value>                                             
        </member>
        <member name="P:Neurotec.Media.NAudioFormat.SampleRate">
            <summary>
            Gets or sets digital audio sample rate supported by
            NAudioFormat.
            </summary>
            <value>
            \Sample rate supported by NAudioFormat. The value is sample
            rate in hertz (Hz).
            </value>                                                   
        </member>
        <member name="P:Neurotec.Media.NAudioFormat.BitsPerChannel">
            <summary>
            Gets or sets bits per channel value for NAudioFormat.
            </summary>
            <value>
            Bits per channel.
            </value>                                             
        </member>
        <member name="T:Neurotec.Media.NMedia">
            <summary>
            Provides information about NMedia library.
            </summary>                                
        </member>
        <member name="F:Neurotec.Media.NMedia.DllName">
            <summary>
            Name of DLL containing unmanaged part of this class.
            </summary>                                          
        </member>
        <member name="P:Neurotec.Media.NMedia.NativeModule">
            <summary>
            Defines the native module of the object.
            </summary>
        </member>
        <member name="T:Neurotec.Media.NMediaFormat">
            <summary>
            Provides methods to retrieve information about media formats.
            </summary>                                                   
        </member>
        <member name="P:Neurotec.Media.NMediaFormat.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Media.NMediaFormat.Equals(System.Object)">
            <summary>
            Checks whether the current media format equals the specified media format object.
            </summary>
            <param name="obj">Media format object.</param>
            <returns>NTrue if the media formats are equal; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.Media.NMediaFormat.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Neurotec.Media.NMediaFormat.IsCompatibleWith(Neurotec.Media.NMediaFormat)">
            <summary>
            Checks if media format is compatible with other media format.
            </summary>
            <param name="other">Other media format to check if it is
                                compatible with the first one. </param>
            <returns>
            true, if both media formats are compatible; false, otherwise.
            
            </returns>                                                   
        </member>
        <member name="P:Neurotec.Media.NMediaFormat.MediaType">
            <summary>
            Gets or sets media type from/for specified NMediaFormat.
            </summary>
            <value>
            One of media type values. At the moment only Audio and Video
            can be used. 
            </value>                                                    
        </member>
        <member name="P:Neurotec.Media.NMediaFormat.MediaSubtype">
            <summary>
            Gets or sets media subtype from/for specified media format.
            </summary>
            <value>
            Subtype constant to set.
            
            
            
            
            </value>                                                   
        </member>
        <member name="M:Neurotec.Media.NMediaFormat.op_Equality(Neurotec.Media.NMediaFormat,Neurotec.Media.NMediaFormat)">
            <summary>
            Equality operator used to check if specified operands are
            equal.
            </summary>
            <param name="value1">The first value to check.</param>
            <param name="value2">The second value to check.</param>
            <returns>
            true if the values of its operands are equal, false
            otherwise. 
            </returns>                                               
        </member>
        <member name="M:Neurotec.Media.NMediaFormat.op_Inequality(Neurotec.Media.NMediaFormat,Neurotec.Media.NMediaFormat)">
            <summary>
            The inequality operator used to check if specified operands
            are not equal.
            </summary>
            <param name="value1">The first value to check.</param>
            <param name="value2">The second value to check.</param>
            <returns>
            true if the values of its operands are different, false
            otherwise. 
            </returns>                                                 
        </member>
        <member name="M:Neurotec.Media.NMediaFormat.Equals(Neurotec.Media.NMediaFormat)">
            <summary>
            Checks whether the current media format equal the other media format.
            </summary>
            <param name="other">The other media format.</param>
            <returns>NTrue if the formats are equal; else NFalse.</returns>
        </member>
        <member name="T:Neurotec.Media.NMediaReader">
            <summary>
            Provides methods which can be used to read media data.
            </summary>                                            
        </member>
        <member name="M:Neurotec.Media.NMediaReader.NMediaReaderGetSource(Neurotec.Interop.HNObject,Neurotec.Interop.HNObject@)">
            <summary>
            \ \ 
            </summary>
            <param name="hReader">_nt_</param>
            <param name="hValue">_nt_</param>
            <returns>
            No tables or formatting elements here!!!
            </returns>
            <remarks>
            NObjectUnref shall be called on returned objects when they are no longer used to prevent memory
            leaks.
            </remarks>                                                                                     
        </member>
        <member name="P:Neurotec.Media.NMediaReader.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Media.NMediaReader.#ctor(Neurotec.Media.NMediaSource,Neurotec.Media.NMediaType,System.Boolean,System.UInt32)">
            <summary>
            Creates new instance of NMediaReader.
            </summary>
            <param name="source">Media source from which
                                 NMediaReader will be created.</param>
            <param name="mediaTypes">Media types supported by
                                     NMediaReader. Can be Audio and
                                     Video (only one at a time or both).
                                     </param>
            <param name="isLive">Flag indicating if media source is
                                 live. If set to true media from
                                 source will be read in real time
                                 (from devices). In this case video
                                 or audio samples will be dropped
                                 until user calls ReadAudioSample or
                                 ReadVideoSample functions. If user
                                 calls these functions too quickly
                                 they are blocked until new video
                                 frame or audio sample appears.<para></para>If
                                 set to false video frames or audio
                                 samples are not dropped and user
                                 can read them in any speed (gets
                                 all samples/frames). When set to
                                 false, NMediaReader works only with
                                 video/audio data saved in files. </param>
            <param name="flags">Flags controlling NMediaReader. </param>
            <remarks>
            These flags can be used (for flags parameter):
              * FlagDoNotUseDirectShow
              * FlagDoNotUseWindowsMediaFoundation
              * FlagPreferDirectShow
            These flags work only on Windows OS. 
            </remarks>                                                        
        </member>
        <member name="M:Neurotec.Media.NMediaReader.#ctor(System.String,Neurotec.Media.NMediaType,System.Boolean,System.UInt32)">
            <summary>
            Creates new instance of NMediaReader from specified file.
            </summary>
            <param name="fileName">\File name. The specified file
                                   should contain media source.</param>
            <param name="mediaTypes">Media types supported by
                                     NMediaReader. Can be Audio and
                                     Video (only one at a time or both).</param>
            <param name="isLive">Flag indicating if media source is
                                 live. If set to true media from
                                 source will be read in real time
                                 (from devices). In this case video
                                 or audio samples will be dropped
                                 until user calls ReadAudioSample or
                                 ReadVideoSample functions. If user
                                 calls these functions too quickly
                                 they are blocked until new video
                                 frame or audio sample appears.<para></para>If
                                 set to false video frames or audio
                                 samples are not dropped and user
                                 can read them in any speed (gets
                                 all samples/frames). When set to
                                 false, NMediaReader works only with
                                 video/audio data saved in files. </param>
            <param name="flags">Flags controlling NMediaReader.</param>
            <remarks>
            These flags can be used (for flags parameter):
              * FlagDoNotUseDirectShow
              * FlagDoNotUseWindowsMediaFoundation
              * FlagPreferDirectShow
            These flags work only on Windows OS. 
            </remarks>                                                          
        </member>
        <member name="M:Neurotec.Media.NMediaReader.#ctor(System.Uri,Neurotec.Media.NMediaType,System.Boolean,System.UInt32)">
            <summary>
            Creates new instance of NMediaReader from specified Url.
            </summary>
            <param name="url">Uniform resource identifier (URI)
                              which contains URL address (address
                              of IP camera). </param>
            <param name="mediaTypes">Media types supported by
                                     NMediaReader. Can be Audio and
                                     Video (only one at a time or both).
                                     </param>
            <param name="isLive">Flag indicating if media source is
                                 live. If set to true media from
                                 source will be read in real time
                                 (from devices). In this case video
                                 or audio samples will be dropped
                                 until user calls ReadAudioSample or
                                 ReadVideoSample functions. If user
                                 calls these functions too quickly
                                 they are blocked until new video
                                 frame or audio sample appears.<para></para>If
                                 set to false video frames or audio
                                 samples are not dropped and user
                                 can read them in any speed (gets
                                 all samples/frames). When set to
                                 false, NMediaReader works only with
                                 video/audio data saved in files. </param>
            <param name="flags">Flags controlling NMediaReader.</param>
            <remarks>
            These flags can be used (for flags parameter):
              * FlagDoNotUseDirectShow
              * FlagDoNotUseWindowsMediaFoundation
              * FlagPreferDirectShow
            These flags work only on Windows OS. 
            </remarks>                                                        
        </member>
        <member name="M:Neurotec.Media.NMediaReader.#ctor(System.String,Neurotec.Media.NMediaType,System.Boolean,System.Boolean,System.UInt32)">
            <summary>
            Creates new instance of NMediaReader from specified file or
            Url.
            </summary>
            <param name="fileNameOrUrl">String representation of file
                                        name or URL. The specified file
                                        should contain media source.</param>
            <param name="mediaTypes">Media types supported by
                                     NMediaReader. Can be Audio and
                                     Video (only one at a time or
                                     both).</param>
            <param name="isLive">Flag indicating if media source
                                 is live. If set to true media
                                 from source will be read in real
                                 time (from devices). In this
                                 case video or audio samples will
                                 be dropped until user calls
                                 ReadAudioSample or
                                 ReadVideoSample functions. If
                                 user calls these functions too
                                 quickly they are blocked until
                                 new video frame or audio sample
                                 appears.<para></para>If set to
                                 false video frames or audio
                                 samples are not dropped and user
                                 can read them in any speed (gets
                                 all samples/frames). When set to
                                 false, NMediaReader works only
                                 with video/audio data saved in
                                 files. </param>
            <param name="isUrl">Flag indicating if media source
                                is from Url (IP camera).</param>
            <param name="flags">Flags controlling NMediaReader.</param>
            <remarks>
            These flags can be used (for flags parameter):
              * FlagDoNotUseDirectShow
              * FlagDoNotUseWindowsMediaFoundation
              * FlagPreferDirectShow
            These flags work only on Windows OS. 
            </remarks>                                                      
        </member>
        <member name="M:Neurotec.Media.NMediaReader.#ctor(Neurotec.Media.NMediaSource,Neurotec.Media.NMediaType,System.Boolean)">
            <summary>
            Creates new instance of NMediaReader.
            </summary>
            <param name="source">Media source from which
                                 NMediaReader will be created.</param>
            <param name="mediaTypes">Media types supported by
                                     NMediaReader. Can be Audio and
                                     Video (only one at a time or both).
                                     </param>
            <param name="isLive">Flag indicating if media source is
                                 live. If set to true media from
                                 source will be read in real time
                                 (from devices). In this case video
                                 or audio samples will be dropped
                                 until user calls ReadAudioSample or
                                 ReadVideoSample functions. If user
                                 calls these functions too quickly
                                 they are blocked until new video
                                 frame or audio sample appears.<para></para>If
                                 set to false video frames or audio
                                 samples are not dropped and user
                                 can read them in any speed (gets
                                 all samples/frames). When set to
                                 false, NMediaReader works only with
                                 video/audio data saved in files. </param>    
        </member>
        <member name="M:Neurotec.Media.NMediaReader.#ctor(System.String,Neurotec.Media.NMediaType,System.Boolean)">
            <summary>
            Creates new instance of NMediaReader from specified file.
            </summary>
            <param name="fileName">\File name. The specified file
                                   should contain media source.</param>
            <param name="mediaTypes">Media types supported by
                                     NMediaReader. Can be Audio and
                                     Video (only one at a time or both).</param>
            <param name="isLive">Flag indicating if media source is
                                 live. If set to true media from
                                 source will be read in real time
                                 (from devices). In this case video
                                 or audio samples will be dropped
                                 until user calls ReadAudioSample or
                                 ReadVideoSample functions. If user
                                 calls these functions too quickly
                                 they are blocked until new video
                                 frame or audio sample appears.<para></para>If
                                 set to false video frames or audio
                                 samples are not dropped and user
                                 can read them in any speed (gets
                                 all samples/frames). When set to
                                 false, NMediaReader works only with
                                 video/audio data saved in files. </param>      
        </member>
        <member name="M:Neurotec.Media.NMediaReader.#ctor(System.Uri,Neurotec.Media.NMediaType,System.Boolean)">
            <summary>
            Creates new instance of NMediaReader from specified Url.
            </summary>
            <param name="url">Uniform resource identifier (URI)
                              which contains URL address (address
                              of IP camera). </param>
            <param name="mediaTypes">Media types supported by
                                     NMediaReader. Can be Audio and
                                     Video (only one at a time or both).
                                     </param>
            <param name="isLive">Flag indicating if media source is
                                 live. If set to true media from
                                 source will be read in real time
                                 (from devices). In this case video
                                 or audio samples will be dropped
                                 until user calls ReadAudioSample or
                                 ReadVideoSample functions. If user
                                 calls these functions too quickly
                                 they are blocked until new video
                                 frame or audio sample appears.<para></para>If
                                 set to false video frames or audio
                                 samples are not dropped and user
                                 can read them in any speed (gets
                                 all samples/frames). When set to
                                 false, NMediaReader works only with
                                 video/audio data saved in files. </param>    
        </member>
        <member name="M:Neurotec.Media.NMediaReader.#ctor(System.String,Neurotec.Media.NMediaType,System.Boolean,System.Boolean)">
            <summary>
            Creates new instance of NMediaReader from specified file or
            Url.
            </summary>
            <param name="fileNameOrUrl">String representation of file
                                        name or URL. The specified file
                                        should contain media source.</param>
            <param name="mediaTypes">Media types supported by
                                     NMediaReader. Can be Audio and
                                     Video (only one at a time or
                                     both).</param>
            <param name="isLive">Flag indicating if media source
                                 is live. If set to true media
                                 from source will be read in real
                                 time (from devices). In this
                                 case video or audio samples will
                                 be dropped until user calls
                                 ReadAudioSample or
                                 ReadVideoSample functions. If
                                 user calls these functions too
                                 quickly they are blocked until
                                 new video frame or audio sample
                                 appears.<para></para>If set to
                                 false video frames or audio
                                 samples are not dropped and user
                                 can read them in any speed (gets
                                 all samples/frames). When set to
                                 false, NMediaReader works only
                                 with video/audio data saved in
                                 files. </param>
            <param name="isUrl">Flag indicating if media source
                                is from Url (IP camera).</param>            
        </member>
        <member name="M:Neurotec.Media.NMediaReader.Start">
            <summary>
            Starts NMediaReader.
            </summary>          
        </member>
        <member name="M:Neurotec.Media.NMediaReader.Stop">
            <summary>
            Stops NMediaReader.
            </summary>         
        </member>
        <member name="M:Neurotec.Media.NMediaReader.Pause">
            <summary>
            Pauses specified NMediaReader.
            </summary>                    
        </member>
        <member name="M:Neurotec.Media.NMediaReader.ReadAudioSample(System.TimeSpan@,System.TimeSpan@)">
            <summary>
            Reads audio sample to NSoundBuffer
            </summary>
            <returns>
            NSoundBuffer which contains audio sample
            </returns>
            <remarks>
            Before using this method user should start NMediaReader using
            Neurotec.Media.NMediaReader.Start method.
            
            For more information on how to use this method see ReadAudio
            and ReadAudioFromDevice tutorials.
            </remarks>
            <param name="timeStamp">Time stamp (from the beginning).
                                    100ns units.</param>
            <param name="duration">Audio sample duration (100ns units).</param>
        </member>
        <member name="M:Neurotec.Media.NMediaReader.ReadAudioSample">
            <summary>
            Reads audio sample to NSoundBuffer
            </summary>
            <returns>
            NSoundBuffer which contains audio sample
            </returns>
            <remarks>
            Before using this method user should start NMediaReader using
            Neurotec.Media.NMediaReader.Start method.
            
            For more information on how to use this method see ReadAudio
            and ReadAudioFromDevice tutorials.
            
            
            </remarks>                                                   
        </member>
        <member name="M:Neurotec.Media.NMediaReader.ReadVideoSample(System.TimeSpan@,System.TimeSpan@)">
            <summary>
            Reads video sample using NMediaReader.
            </summary>
            <returns>
            NImage which contains video sample (frame).
            </returns>
            <remarks>
            Before using this method user should start NMediaReader using
            Neurotec.Media.NMediaReader.Start.
            
            For more information on how to use this method see ReadVideo
            and ReadVideoFromDevice tutorials.
            </remarks>
            <param name="timeStamp">Time stamp (from the beginning).
                                    100ns units. </param>
            <param name="duration">Video sample duration (100ns units).</param>
        </member>
        <member name="M:Neurotec.Media.NMediaReader.ReadVideoSample">
            <summary>
            Reads video sample using NMediaReader.
            </summary>
            <returns>
            NImage which contains video sample (frame).
            </returns>
            <remarks>
            Before using this method user should start NMediaReader using
            Neurotec.Media.NMediaReader.Start.
            
            For more information on how to use this method see ReadVideo
            and ReadVideoFromDevice tutorials.
            
            
            </remarks>                                                   
        </member>
        <member name="P:Neurotec.Media.NMediaReader.Source">
            <summary>
            Gets media source (file or device) of the NMediaReader.
            </summary>
            <value>
            Media source which type is NMediaSource.
            </value>                                               
        </member>
        <member name="P:Neurotec.Media.NMediaReader.IsLive">
            <summary>
            Checks if media source which is used by NMediaReader is live.
            </summary>
            <value>
            true if media source is live; false otherwise.
            </value>                                                     
        </member>
        <member name="P:Neurotec.Media.NMediaReader.State">
            <summary>
            Gets NMediaReader state.
            </summary>
            <value>
            One of NMediaState values.
            </value>                  
        </member>
        <member name="P:Neurotec.Media.NMediaReader.Length">
            <summary>
            Gets file length when NMediaReader source is file.
            </summary>
            <value>
            Time interval (TimeSpan) representing file length.
            </value>                                          
        </member>
        <member name="P:Neurotec.Media.NMediaReader.Position">
            <summary>
            Gets or sets NMediaReader position in media source (file).
            </summary>
            <value>
            Time interval (TimeSpan) representing NMediaReader position
            in media source.
            </value>                                                   
        </member>
        <member name="T:Neurotec.Media.NMediaSource">
            <summary>
            Provides methods for working with media source.
            </summary>                                     
        </member>
        <member name="F:Neurotec.Media.NMediaSource.FlagDoNotUseDirectShow">
            Used when user prefers not to use DirecShow for NMediaSource.
        </member>
        <member name="F:Neurotec.Media.NMediaSource.FlagDoNotUseWindowsMediaFoundation">
            Used when user prefers not to use Windows Media Foundation
            for NMediaSource.                                         
        </member>
        <member name="F:Neurotec.Media.NMediaSource.FlagPreferDirectShow">
            Used when user prefers to use DirectShow for NMediaSource.
        </member>
        <member name="F:Neurotec.Media.NMediaSource.FlagAllowDuplicateDevices">
            This field is used to allow enumerating duplicate devices. If
            this field was set and the same device is accessible through
            DirectShow and Windows Media Foundation (Windows 7) then this
            device will be enumerated twice.
            
            
                                                                         
        </member>
        <member name="P:Neurotec.Media.NMediaSource.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Media.NMediaSource.EnumDevices(Neurotec.Media.NMediaType)">
            <summary>
            Enumerates all source devices by specified media type.
            </summary>
            <param name="mediaType">Device media type. </param>
            <returns>
            Devices array of NMediaSource type. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Media.NMediaSource.EnumDevices(Neurotec.Media.NMediaType,System.UInt32)">
            <summary>
            Enumerates all source devices by specified media type.
            </summary>
            <param name="mediaType">Device media type. </param>
            <param name="flags">Flags controlling NMediaSource. </param>
            <returns>
            Devices array of NMediaSource type. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Media.NMediaSource.FromFile(System.String)">
            <summary>
            Creates NMediaSource from specified file.
            </summary>
            <param name="fileName">String containing file name. </param>
            <returns>
            Media source from file.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Media.NMediaSource.FromFile(System.String,System.UInt32)">
            <summary>
            Creates NMediaSource from specified file.
            </summary>
            <param name="fileName">String containing file name. </param>
            <param name="flags">Flags controlling NMediaSource.</param>
            <returns>
            Media source from file.
            </returns>
            <remarks>
            Created NMediaSource is used by NMediaReader to read data.
            
            These flags can be used (for flags parameter):
              * FlagDoNotUseDirectShow
              * FlagDoNotUseWindowsMediaFoundation
              * FlagPreferDirectShow
            \Note: these flags work only on Windows OS.
            
            
            </remarks>                                                  
        </member>
        <member name="M:Neurotec.Media.NMediaSource.FromUrl(System.String)">
            <summary>
            Gets the media source from specified URL.
            </summary>
            <param name="url">The URL containing the media source.</param>
            <returns>The media source.</returns>
        </member>
        <member name="M:Neurotec.Media.NMediaSource.FromUrl(System.String,System.UInt32)">
            <summary>
            Gets the media source from specified URL.
            </summary>
            <param name="url">The URL containing the media source.</param>
            <param name="flags">Flags controlling NMediaSource.</param>
            <returns>The media source.</returns>
        </member>
        <member name="M:Neurotec.Media.NMediaSource.FromUrl(System.Uri)">
            <summary>
            Gets the media source from specified URL.
            </summary>
            <param name="url">The URL containing the media source.</param>
            <returns>The media source.</returns>
        </member>
        <member name="M:Neurotec.Media.NMediaSource.FromUrl(System.Uri,System.UInt32)">
            <summary>
            Gets the media source from specified URL.
            </summary>
            <param name="url">The URL containing the media source.</param>
            <param name="flags">Flags controlling NMediaSource.</param>
            <returns>The media source.</returns>
        </member>
        <member name="M:Neurotec.Media.NMediaSource.Equals(System.Object)">
            <summary>
            Checks whether the current NMediaSource equals the specified object.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>NTrue, if objects are equal; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.Media.NMediaSource.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Neurotec.Media.NMediaSource.GetFormats(Neurotec.Media.NMediaType)">
            <summary>
            Gets the media formats of specified media type.
            </summary>
            <param name="mediaType">The specified media type.</param>
            <returns>Array of media formats.</returns>
        </member>
        <member name="M:Neurotec.Media.NMediaSource.GetCurrentFormat(Neurotec.Media.NMediaType)">
            <summary>
            Gets the current media format of the specified media type.
            </summary>
            <param name="mediaType">The specified media type.</param>
            <returns>The current media format.</returns>
        </member>
        <member name="M:Neurotec.Media.NMediaSource.SetCurrentFormat(Neurotec.Media.NMediaType,Neurotec.Media.NMediaFormat)">
            <summary>
            Sets the current media format of the specified media type to specified value.
            </summary>
            <param name="mediaType">The specified media type.</param>
            <param name="format">New media format value.</param>
        </member>
        <member name="P:Neurotec.Media.NMediaSource.Id">
            <summary>
            Gets the ID of the current media source.
            </summary>
        </member>
        <member name="P:Neurotec.Media.NMediaSource.DisplayName">
            <summary>
            Gets the display name of the current media source.
            </summary>
        </member>
        <member name="P:Neurotec.Media.NMediaSource.MediaType">
            <summary>
            Gets the media type of the current media source.
            </summary>
        </member>
        <member name="M:Neurotec.Media.NMediaSource.op_Equality(Neurotec.Media.NMediaSource,Neurotec.Media.NMediaSource)">
            <summary>
            Checks whether two NMediaSource values are equal.
            </summary>
            <param name="value1">First NMediaSource value.</param>
            <param name="value2">Second NMediaSource value.</param>
            <returns>NTrue, if NMediaSource values are equal; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.Media.NMediaSource.op_Inequality(Neurotec.Media.NMediaSource,Neurotec.Media.NMediaSource)">
            <summary>
            Checks whether two NMediaSource values are not equal.
            </summary>
            <param name="value1">First NMediaSource value.</param>
            <param name="value2">Second NMediaSource value.</param>
            <returns>NTrue, if NMediaSource values are not equal; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.Media.NMediaSource.Equals(Neurotec.Media.NMediaSource)">
            <summary>
            Determines whether the specified NMediaSource is equal to the
            current NMediaSource.
            </summary>
            <param name="other">The NMediaSource object to compare with
                                the current NMediaSource.</param>
            <returns>
            true if the specified NMediaSource is equal to the current
            NMediaSource; otherwise, false.
            </returns>                                                   
        </member>
        <member name="T:Neurotec.Media.NMediaType">
            <summary>
            Enumerates media type values.
            </summary>                   
        </member>
        <member name="F:Neurotec.Media.NMediaType.None">
            <summary>
            Media type was not recognized.
            </summary>
        </member>
        <member name="F:Neurotec.Media.NMediaType.Audio">
            <summary>
            Indicates that media type is audio.
            </summary>
        </member>
        <member name="F:Neurotec.Media.NMediaType.Video">
            <summary>
            Indicates that media type is video.
            </summary>
        </member>
        <member name="T:Neurotec.Media.NMediaState">
            <summary>
            Enumerates media state values.
            </summary>                    
        </member>
        <member name="F:Neurotec.Media.NMediaState.Stopped">
            <summary>
            Indicates stopped media stream.
            </summary>
        </member>
        <member name="F:Neurotec.Media.NMediaState.Paused">
            <summary>
            Indicates paused media stream.
            </summary>
        </member>
        <member name="F:Neurotec.Media.NMediaState.Running">
            <summary>
            Indicates running media stream.
            </summary>
        </member>
        <member name="T:Neurotec.Media.NVideoInterlaceMode">
            Represents video interlace mode.
        </member>
        <member name="F:Neurotec.Media.NVideoInterlaceMode.Unknown">
            <summary>
            Unknown video mode.
            </summary>
        </member>
        <member name="F:Neurotec.Media.NVideoInterlaceMode.Interlaced">
            <summary>
            Interlaced video mode.
            </summary>
        </member>
        <member name="F:Neurotec.Media.NVideoInterlaceMode.Progressive">
            <summary>
            Progressive video mode.
            </summary>
        </member>
        <member name="T:Neurotec.Media.NMediaTypes">
            <summary>
            Provides methods to check if media type is valid.
            </summary>                                       
        </member>
        <member name="M:Neurotec.Media.NMediaTypes.IsMediaTypeValid(Neurotec.Media.NMediaType)">
            <summary>
            Checks whether the specified media type is valid.
            </summary>
            <param name="value">The media type.</param>
            <returns>NTrue if the media type is valid; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.Media.NMediaTypes.IsMediaTypeValidSingle(Neurotec.Media.NMediaType)">
            <summary>
            Checks if the single value passed to a method is a valid
            media type.
            </summary>
            <param name="value">One of NMediaTypes values to check. </param>
            <returns>
            true if specified value is valid; false, otherwise.
            </returns>                                                      
        </member>
        <member name="M:Neurotec.Media.NMediaTypes.IsVideoInterlaceModeValid(Neurotec.Media.NVideoInterlaceMode)">
            <summary>
            Checks whether the video interlace mode is valid.
            </summary>
            <param name="value">The video interlace mode.</param>
            <returns>NTrue, if the video interlace mode is valid; else NFalse.</returns>
        </member>
        <member name="P:Neurotec.Media.NMediaTypes.NMediaTypeNativeType">
            <summary>
            Defines the native type of the media type.
            </summary>
        </member>
        <member name="P:Neurotec.Media.NMediaTypes.NMediaStateNativeType">
            <summary>
            Defines the native type of the media state.
            </summary>
        </member>
        <member name="P:Neurotec.Media.NMediaTypes.NVideoInterlaceModeNativeType">
            <summary>
            Defines the native type of the video interlace mode.
            </summary>
        </member>
        <member name="P:Neurotec.Media.NMediaTypes.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="T:Neurotec.Media.NExtraChannel">
            <summary>
            Enumerates extra channel options.
            </summary>
        </member>
        <member name="F:Neurotec.Media.NExtraChannel.None">
            <summary>
            No extra channel.
            </summary>
        </member>
        <member name="F:Neurotec.Media.NExtraChannel.Alpha">
            <summary>
            Alpha channel.
            </summary>
        </member>
        <member name="F:Neurotec.Media.NExtraChannel.PAlpha">
            <summary>
            PAlpha channel.
            </summary>
        </member>
        <member name="T:Neurotec.Media.NChannelFormat">
            <summary>
            Enumerates channel format options.
            </summary>
        </member>
        <member name="F:Neurotec.Media.NChannelFormat.UnsignedInteger">
            <summary>
            Unsigned integer (uint).
            </summary>
        </member>
        <member name="F:Neurotec.Media.NChannelFormat.SignedInteger">
            <summary>
            Signed integer (int).
            </summary>
        </member>
        <member name="F:Neurotec.Media.NChannelFormat.FloatingPoint">
            <summary>
            Floating point number (float).
            </summary>
        </member>
        <member name="T:Neurotec.Media.INSampleFormat">
            <summary>
            Provides methods to retrieve information about sample formats.
            </summary>
        </member>
        <member name="M:Neurotec.Media.INSampleFormat.ToString(System.String)">
            <summary>
            Retrieves a string representation of the object.
            </summary>
            <param name="format">Reserved.</param>
            <returns>A string representation of the object.</returns>
        </member>
        <member name="M:Neurotec.Media.INSampleFormat.GetChannelType">
            <summary>
            Retrieves the type of the channel.
            </summary>
            <returns>The type of the channel.</returns>
        </member>
        <member name="P:Neurotec.Media.INSampleFormat.ExtraChannel">
            Gets the extra channel.
        </member>
        <member name="P:Neurotec.Media.INSampleFormat.ChannelCount">
            Gets the channel count.
        </member>
        <member name="P:Neurotec.Media.INSampleFormat.ChannelFormat">
            Gets the channel format.
        </member>
        <member name="P:Neurotec.Media.INSampleFormat.BitsPerChannel">
            Gets the number of bits per channel.
        </member>
        <member name="P:Neurotec.Media.INSampleFormat.IsIndexed">
            Checks whether the format is indexed.
        </member>
        <member name="P:Neurotec.Media.INSampleFormat.BitsPerIndex">
            Gets the number of bits per index.
        </member>
        <member name="P:Neurotec.Media.INSampleFormat.MaxPaletteLength">
            Gets the maximum palette length.
        </member>
        <member name="P:Neurotec.Media.INSampleFormat.IsSeparated">
            Gets whether the format is separated.
        </member>
        <member name="P:Neurotec.Media.INSampleFormat.PlaneCount">
            Gets the number of planes.
        </member>
        <member name="P:Neurotec.Media.INSampleFormat.BitsPerValue">
            Gets the number of bits per value.
        </member>
        <member name="P:Neurotec.Media.INSampleFormat.BitsPerSample">
            Gets the number of bits per sample.
        </member>
        <member name="P:Neurotec.Media.INSampleFormat.BitsPerPaletteEntry">
            Gets the number of bits per palette entry.
        </member>
        <member name="P:Neurotec.Media.INSampleFormat.BytesPerChannel">
            Gets the number of bytes per channel.
        </member>
        <member name="P:Neurotec.Media.INSampleFormat.BytesPerValue">
            Gets the number of bytes per value.
        </member>
        <member name="P:Neurotec.Media.INSampleFormat.BytesPerSample">
            Gets the number of bytes per sample.
        </member>
        <member name="P:Neurotec.Media.INSampleFormat.BytesPerPaletteEntry">
            Gets the number of bytes per palette entry.
        </member>
        <member name="T:Neurotec.Media.NSampleFormat">
            <summary>
            Provides methods to retrieve information about sample formats. 
            </summary>
        </member>
        <member name="F:Neurotec.Media.NSampleFormat.MaxChannelCount">
            <summary>
            Defines the maximum number of channels.
            </summary>
        </member>
        <member name="M:Neurotec.Media.NSampleFormat.IsExtraChannelValid(Neurotec.Media.NExtraChannel)">
            <summary>
            Checks whether the specified extra channel is valid.
            </summary>
            <param name="value">The extra channel.</param>
            <returns>NTrue if the channel is valid; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.Media.NSampleFormat.IsChannelFormatValid(Neurotec.Media.NChannelFormat)">
            <summary>
            Checks whether the specified channel format is valid.
            </summary>
            <param name="value">The channel format.</param>
            <returns>NTrue if the channel format is valid; else NFalse.</returns>
        </member>
        <member name="P:Neurotec.Media.NSampleFormat.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.Media.NSampleFormat.NExtraChannelNativeType">
            <summary>
            Defines the native type of the extra channel.
            </summary>
        </member>
        <member name="P:Neurotec.Media.NSampleFormat.NChannelFormatNativeType">
            <summary>
            Defines the native type of the channel format.
            </summary>
        </member>
        <member name="T:Neurotec.Media.NVideoFormat">
            <summary>
            Class represents video format. Each video source supports one
            or more video formats. Video format is used to decode
            (encode) video stream and extract (encode) each video frame.
            </summary>                                                   
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Unknown">
            Value for unknown video format.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Rgb24">
            Value for video format RGB, 24 bpp.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Argb32">
            Value for video format RGB, 32 bpp with alpha channel.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Rgb32">
            Value for video format RGB, 32 bpp.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Rgb555">
            Value for video format RGB 555, 16 bpp.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Rgb565">
            Value for video format RGB 565, 16 bpp.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Rgb8">
            Value for video format RGB, 8bpp.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.L8">
            Value for video format L8.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.L16">
            Value for video format L16.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.AI44">
            Value for video format AI44.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Ayuv">
            Value for video format AYUV.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Yuy2">
            Value for video format YUY2.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Yvyu">
            Value for video format YVYU.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Yvu9">
            Value for video format YVU9.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Uyvy">
            Value for video format UYVY.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.NV11">
            Value for video format NV11.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.NV12">
            Value for video format NV12.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.NV21">
            Value for video format NV21.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.YV12">
            Value for video format YV12.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.I420">
            Value for video format I420.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Iyuv">
            Value for video format IYUV.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Y210">
            Value for video format Y210.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Y216">
            Value for video format Y216.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Y410">
            Value for video format Y40.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Y416">
            Value for video format Y416.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Y41P">
            Value for video format Y41P.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Y41T">
            Value for video format Y41T.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Y42T">
            Value for video format Y42T.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.P210">
            Value for video format P210.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.P216">
            Value for video format P216.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.P010">
            Value for video format P010.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.P016">
            Value for video format P016.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.V210">
            Value for video format V210.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.V216">
            Value for video format V216.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.V410">
            Value for video format V40.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.MP43">
            Value for video format Microsoft MPEG 4 codec version 3.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.MP4S">
            Value for video format ISO MPEG 4 codec version 1.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.M4S2">
            Value for video format MPEG-4 part 2 video.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.MP4V">
            Value for video format MPEG-4 part 2 video.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Wmv1">
            Value for video format Windows Media Video codec version 7.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Wmv2">
            Value for video format Windows Media Video 8 codec.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Wmv3">
            Value for video format Windows Media Video 9 codec.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Wvc1">
            Value for video format SMPTE 421M (&quot;VC-1&quot;).
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Mss1">
            Value for video format Windows Media Screen codec version 1.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Mss2">
            Value for video format Windows Media Video 9 Screen codec.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Mpg1">
            Value for video format MPEG-1 video.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Dvsl">
            Value for video format SD-DVCR (525-60 or 625-50).
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Dvsd">
            Value for video format SDL-DVCR (525-60 or 625-50).
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Dvhd">
            Value for video format HD-DVCR (1125-60 or 1250-50).
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.DV25">
            Value for video format DVCPRO 25 (525-60 or 625-50).
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.DV50">
            Value for video format DVCPRO 50 (525-60 or 625-50).
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Dvh1">
            Value for video format DVC/DV Video.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Dvc">
            Value for video format DVC/DV Video.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.H264">
            Value for video format H.264.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.Mjpg">
            Value for video format Motion JPEG.
        </member>
        <member name="F:Neurotec.Media.NVideoFormat.DX50">
            Value for video format DX50.
        </member>
        <member name="P:Neurotec.Media.NVideoFormat.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Media.NVideoFormat.MediaSubtypeToString(System.Int32)">
            <summary>
            Creates media subtype representing string.
            </summary>
            <param name="value">Video format value.</param>
            <returns>
            Media subtype representing string.
            </returns>                                     
        </member>
        <member name="M:Neurotec.Media.NVideoFormat.MediaSubtypeToString(System.Int32,System.String)">
            <summary>
            Creates media subtype representing string.
            </summary>
            <param name="value">Video format value.</param>
            <param name="format">Reserved.</param>
            <returns>Media subtype representing string.</returns>
        </member>
        <member name="M:Neurotec.Media.NVideoFormat.#ctor">
            <summary>
            Default NVideoFormat constructor. NVideoFormat object can be
            constructed to setup video device in user defined format.
            </summary>                                                  
        </member>
        <member name="P:Neurotec.Media.NVideoFormat.Width">
            \ \ 
            <summary>
            Gets or sets video format frame width.
            </summary>
            <value>
            Value represents video frame width in pixels.
            </value>                                     
        </member>
        <member name="P:Neurotec.Media.NVideoFormat.Height">
            <summary>
            Gets or sets video format frame height.
            </summary>
            <value>
            Value represents video frame height in pixels.
            </value>                                      
        </member>
        <member name="P:Neurotec.Media.NVideoFormat.FrameRate">
            <summary>
            Gets or sets video format frame rate.
            </summary>
            <value>
            Value represents video frames per second rate.
            </value>                                      
        </member>
        <member name="P:Neurotec.Media.NVideoFormat.InterlaceMode">
            <summary>
            Gets or sets video format <see cref="T:Neurotec.Media.NVideoInterlaceMode" text="interlace mode" />.
            </summary>
            <value>
            Value represents video interlace mode. 
            </value>                                                                                          
        </member>
        <member name="P:Neurotec.Media.NVideoFormat.PixelAspectRatio">
            \ \ 
            <summary>
            Gets or sets video format pixel aspect ratio.
            </summary>
            <value>
            Value represents pixel aspect ratio.
            </value>                                     
        </member>
        <member name="T:Neurotec.SmartCards.ApduClassSecureMessaging">
            <summary>
            Specifies secure messaging applied to the APDU command-response pairs according to ISO/IEC 7816-4:2005.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.ApduClassSecureMessaging.None">
            <summary>
            No indication or no secure messaging applied.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.ApduClassSecureMessaging.Proprietary">
            <summary>
            Proprietary secure messaging format.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.ApduClassSecureMessaging.HeaderNotProcessed">
            <summary>
            Secure messaging according to ISO/IEC 7816-4:2005 section 6. APDU command header not processed according to ISO/IEC 7816-4:2005 section 6.2.3.1.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.ApduClassSecureMessaging.HeaderAuthenticated">
            <summary>
            Secure messaging according to ISO/IEC 7816-4:2005 section 6. APDU command header authenticated according to ISO/IEC 7816-4:2005 section 6.2.3.1.
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.ApduClass">
            <summary>
            Represents APDU command class.
            </summary>                    
        </member>
        <member name="P:Neurotec.SmartCards.ApduClass.ApduClassSecureMessagingNativeType">
            <summary>
            Defines the native type of the APDU class secure messaging.
            </summary>
        </member>
        <member name="P:Neurotec.SmartCards.ApduClass.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.SmartCards.ApduClass.op_Explicit(Neurotec.SmartCards.ApduClass)~System.Byte">
            <summary>
            Converts APDU class to byte.
            </summary>
            <param name="value">ApduClass object.</param>
            <returns>
            ApduClass converted to byte.
            </returns>                                   
        </member>
        <member name="M:Neurotec.SmartCards.ApduClass.op_Explicit(System.Byte)~Neurotec.SmartCards.ApduClass">
            <summary>
            Converts byte to APDU class.
            </summary>
            <param name="value">Byte to be converted to APDU class.</param>
            <returns>ApduClass object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.ApduClass.op_Equality(Neurotec.SmartCards.ApduClass,Neurotec.SmartCards.ApduClass)">
            <summary>
            Gets a value indicating whether the ApduClass is identical to
            a second ApduClass.
            </summary>
            <param name="v1">ApduClass object.</param>
            <param name="v2">ApduClass object.</param>
            <returns>
            true if the ApduClass is identical to a second ApduClass;
            otherwise, false.
            </returns>                                                   
        </member>
        <member name="M:Neurotec.SmartCards.ApduClass.op_Inequality(Neurotec.SmartCards.ApduClass,Neurotec.SmartCards.ApduClass)">
            <summary>
            Gets a value indicating whether the ApduClass is not
            identical to a second ApduClass.
            </summary>
            <param name="v1">ApduClass object.</param>
            <param name="v2">ApduClass object.</param>
            <returns>
            true if its two operands refer to different objects;
            otherwise, false.
            </returns>                                          
        </member>
        <member name="M:Neurotec.SmartCards.ApduClass.#ctor(System.Byte)">
            <summary>Initializes a new instance of the ApduClass .</summary>
            <param name="value">Class byte (CLA) of the APDU command header.</param>
        </member>
        <member name="M:Neurotec.SmartCards.ApduClass.#ctor(System.Boolean,Neurotec.SmartCards.ApduClassSecureMessaging,System.Int32)">
            <summary>Initializes a new instance of the ApduClass .</summary>
            <param name="isLastOrTheOnly">Boolean parameter specifying whether the APDU command is the last or only command of a chain.</param>
            <param name="secureMessaging">The identifier of a secure messaging mechanism applied to the APDU command.</param>
            <param name="channelNumber">Number of a logical channel to pass the APDU command through.</param>
        </member>
        <member name="M:Neurotec.SmartCards.ApduClass.Equals(System.Object)">
            <summary>Overloaded. Determines whether two Object instances are equal.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.ApduClass.GetHashCode">
            <summary>Serves as a hash function for a particular type. GetHashCode is suitable for use in hashing algorithms and data structures like a hash table.</summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.ApduClass.ToString">
            <summary>Returns a String that represents the current Object.</summary>
            <returns>Returns a String that represents the current Object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.ApduClass.ToString(System.String)">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <param name="format">Reserved.</param>
            <returns>Returns a String that represents the current Object.</returns>
        </member>
        <member name="P:Neurotec.SmartCards.ApduClass.IsValid">
            <summary>Represents APDU command class.</summary>
            <value>APDU command class byte (CLA) value.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduClass.IsInterindustry">
            <summary>Represents APDU command class.</summary>
            <value>APDU command class byte (CLA) value.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduClass.IsProprietary">
            <summary>Represents APDU command class.</summary>
            <value>APDU command class byte (CLA) value.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduClass.IsInterindustryFirst">
            <summary>Represents APDU command class.</summary>
            <value>APDU command class byte (CLA) value.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduClass.IsInterindustryFurther">
            <summary>Represents APDU command class.</summary>
            <value>APDU command class byte (CLA) value.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduClass.IsInterindustryReserved">
            <summary>Represents APDU command class.</summary>
            <value>APDU command class byte (CLA) value.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduClass.IsLastOrTheOnly">
            <summary>Represents APDU command class.</summary>
            <value>Boolean parameter specifying whether the APDU command is the last or only command of a chain.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduClass.SecureMessaging">
            <summary>Represents APDU command class.</summary>
            <value>The identifier of a secure messaging mechanism applied to the APDU command.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduClass.ChannelNumber">
            <summary>Represents APDU command class.</summary>
            <value>Number of a logical channel to pass the APDU command through.</value>
        </member>
        <member name="M:Neurotec.SmartCards.ApduClass.Equals(Neurotec.SmartCards.ApduClass)">
            <summary>
            Checks whether the current ApduClass object equals the other ApduClass object.
            </summary>
            <param name="other">The other ApduClass object.</param>
            <returns><i>true</i> if the objects are equal, else <i>false</i>.</returns>
        </member>
        <member name="T:Neurotec.SmartCards.ApduInstruction">
            <summary>
            Represents APDU command instruction.
            </summary>                          
        </member>
        <member name="P:Neurotec.SmartCards.ApduInstruction.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.SmartCards.ApduInstruction.op_Explicit(Neurotec.SmartCards.ApduInstruction)~System.Byte">
            <summary>
            Converts APDU instruction to byte.
            </summary>
            <param name="value">ApduInstruction object.</param>
            <returns>
            ApduInstruction converted to byte.
            </returns>                                         
        </member>
        <member name="M:Neurotec.SmartCards.ApduInstruction.op_Explicit(System.Byte)~Neurotec.SmartCards.ApduInstruction">
            <summary>
            Converts byte to APDU instruction.
            </summary>
            <param name="value">Byte value of the APDU instruction.</param>
            <returns>
            ApduInstruction object.
            </returns>                                                     
        </member>
        <member name="M:Neurotec.SmartCards.ApduInstruction.op_Equality(Neurotec.SmartCards.ApduInstruction,Neurotec.SmartCards.ApduInstruction)">
            <summary>
            Gets a value indicating whether the ApduInstruction is
            identical to a second ApduInstruction.
            </summary>
            <param name="v1">ApduInstruction object.</param>
            <param name="v2">ApduInstruction object.</param>
            <returns>
            true if the ApduInstruction is identical to a second
            ApduInstruction; otherwise, false.
            </returns>                                            
        </member>
        <member name="M:Neurotec.SmartCards.ApduInstruction.op_Inequality(Neurotec.SmartCards.ApduInstruction,Neurotec.SmartCards.ApduInstruction)">
            <summary>
            Gets a value indicating whether the ApduInstruction is not
            identical to a second ApduInstruction.
            </summary>
            <param name="v1">ApduInstruction object.</param>
            <param name="v2">ApduInstruction object.</param>
            <returns>
            true if its two operands refer to different objects;
            otherwise, false.s
            </returns>                                                
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.DeactivateFile">
            <summary>
            ApduInstruction for DEACTIVATE FILE command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.DeactivateRecord">
            <summary>
            ApduInstruction for DEACTIVATE RECORD command as specified in
            ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.AactivateRecord">
            <summary>
            ApduInstruction for ACTIVATE RECORD command as specified in
            ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.EraseRecord">
            <summary>
            ApduInstruction for ERASE RECORD (S) command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.EraseBinary">
            <summary>
            ApduInstruction for ERASE BINARY command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                              
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.EraseBinaryBerTlv">
            <summary>
            ApduInstruction for ERASE BINARY command with BER-TLV encoded
            data as specified in ISO/IEC 7816-4:2005.
            </summary>                                                   
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.PerformScqlOperation">
            <summary>
            ApduInstruction for PERFORM SCQL OPERATION command as
            specified in ISO/IEC 7816-4:2005.
            </summary>                                           
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.PerformTransactionOperation">
            <summary>
            ApduInstruction for PERFORM TRANSACTION OPERATION command as
            specified in ISO/IEC 7816-4:2005.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.PerformUserOperation">
            <summary>
            ApduInstruction for PERFORM USER OPERATION command as
            specified in ISO/IEC 7816-4:2005.
            </summary>                                           
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.Verify">
            <summary>
            ApduInstruction for VERIFY command as specified in ISO/IEC
            7816-4:2005.
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.VerifyBerTlv">
            <summary>
            ApduInstruction for VERIFY command with BER-TLV encode.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.ManageSecurityEnvironment">
            <summary>
            ApduInstruction for MANAGE SECURITY ENVIRONMENT command as
            specified in ISO/IEC 7816-4:2005.
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.ChangeReferenceData">
            <summary>
            ApduInstruction for CHANGE REFERENCE DATA command as
            specified in ISO/IEC 7816-4:2005.
            </summary>                                          
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.ChangeReferenceDataBerTlv">
            <summary>
            ApduInstruction for CHANGE REFERENCE DATA command with BER-TLV
            encoded data as specified in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.DisableVerificationRequirement">
            <summary>
            ApduInstruction for DISABLE VERIFICATION REQUIREMENT command
            as specified in ISO/IEC 7816-4:2005.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.EnableVerificationRequirement">
            <summary>
            ApduInstruction for ENABLE VERIFICATION REQUIREMENT command
            as specified in ISO/IEC 7816-4:2005.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.PerformSecurityOperation">
            <summary>
            ApduInstruction for PERFORM SECURITY OPERATION command as
            specified in ISO/IEC 7816-4:2005.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.PerformSecurityOperationBerTlv">
            <summary>
            ApduInstruction for PERFORM SECURITY OPERATION command 
            with BER-TLV encoded data as specified in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.ResetRetryCounter">
            <summary>
            ApduInstruction for RESET RETRY COUNTER command as specified
            in ISO/IEC 7816-4:2005.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.ResetRetryCounterBerTlv">
            <summary>
            ApduInstruction for RESET RETRY COUNTER command with BER-TLV
            encoded data as specified in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.PerformBiometricOperation">
            <summary>
            ApduInstruction for PERFORM BIOMETRIC OPERATION command as specified
            in ISO/IEC 7816-4:2013.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.PerformBiometricOperationBerTlv">
            <summary>
            ApduInstruction for PERFORM BIOMETRIC OPERATION command with BER-TLV
            encoded data as specified in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.Compare">
            <summary>
            ApduInstruction for COMPARE command as specified in ISO/IEC 7816-4:2013.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.GetAttribute">
            <summary>
            ApduInstruction for GET ATTRIBUTE command as specified
            in ISO/IEC 7816-4:2013.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.GetAttributeBerTlv">
            <summary>
            ApduInstruction for GET ATTRIBUTE command with BER-TLV
            encoded data as specified in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.ApplicationManagementRequest">
            <summary>
            ApduInstruction for APPLICATION MANAGEMENT REQUEST command
            as specified in ISO/IEC 7816-4:2013.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.ApplicationManagementRequestBerTlv">
            <summary>
            ApduInstruction for APPLICATION MANAGEMENT REQUEST command
            with BER-TLV encoded data as specified in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.ActivateFile">
            <summary>
            ApduInstruction for ACTIVATE FILE command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.GenerateAsymmetricKeyPair">
            <summary>
            ApduInstruction for GENERATE ASYMMETRIC KEY PAIR command as
            specified in ISO/IEC 7816-4:2005.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.GenerateAsymmetricKeyPairBerTlv">
            <summary>
            ApduInstruction for GENERATE ASYMMETRIC KEY PAIR command
            with BER-TLV encoded data as specified in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.ManageChannel">
            <summary>
            ApduInstruction for MANAGE CHANNEL command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.ExternalAuthenticate">
            <summary>
            ApduInstruction for EXTERNAL (/ MUTUAL) AUTHENTICATE command
            as specified in ISO/IEC 7816-4:2005.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.GetChallenge">
            <summary>
            ApduInstruction for GET CHALLENGE command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.GeneralAuthenticate">
            <summary>
            ApduInstruction for GENERAL AUTHENTICATE command as specified
            in ISO/IEC 7816-4:2005.
            </summary>                                                   
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.GeneralAuthenticateBerTlv">
            <summary>
            ApduInstruction for GENERAL AUTHENTICATE command with BER-TLV
            encoded data as specified in ISO/IEC 7816-4:2005.
            </summary>                                                   
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.InternalAuthenticate">
            <summary>
            ApduInstruction for INTERNAL AUTHENTICATE command as
            specified in ISO/IEC 7816-4:2005.
            </summary>                                          
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.SearchBinary">
            <summary>
            ApduInstruction for SEARCH BINARY command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.SearchBinaryBerTlv">
            <summary>
            ApduInstruction for SEARCH BINARY command with BER-TLV
            encoded data as specified in ISO/IEC 7816-4:2005.
            </summary>                                            
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.SearchRecord">
            <summary>
            ApduInstruction for SEARCH RECORD command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.Select">
            <summary>
            ApduInstruction for SELECT command as specified in ISO/IEC
            7816-4:2005.
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.SelectData">
            <summary>
            ApduInstruction for SELECT DATA command as specified in ISO/IEC
            7816-4:2013.
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.ReadBinary">
            <summary>
            ApduInstruction for READ BINARY command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.ReadBinaryBerTlv">
            <summary>
            ApduInstruction for READ BINARY command with BER-TLV encoded
            data as specified in ISO/IEC 7816-4:2005.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.ReadRecord">
            <summary>
            ApduInstruction for READ RECORD (S) command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.ReadRecordBerTlv">
            <summary>
            ApduInstruction for READ RECORD (S) command with BER-TLV
            encoded data as specified in ISO/IEC 7816-4:2005.
            </summary>                                              
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.GetResponse">
            <summary>
            ApduInstruction for GET RESPONSE command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                              
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.Envelope">
            <summary>
            ApduInstruction for ENVELOPE command as specified in ISO/IEC
            7816-4:2005.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.EnvelopeBerTlv">
            <summary>
            ApduInstruction for ENVELOPE command with BER-TLV encoded
            data as specified in ISO/IEC 7816-4:2005.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.GetData">
            <summary>
            ApduInstruction for GET DATA command as specified in ISO/IEC
            7816-4:2005.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.GetDataBerTlv">
            <summary>
            ApduInstruction for GET DATA command with BER-TLV encoded
            data as specified in ISO/IEC 7816-4:2005.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.GetNextData">
            <summary>
            ApduInstruction for GET NEXT DATA command as
            specified in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.GetNextDataBerTlv">
            <summary>
            ApduInstruction for GET NEXT DATA command with BER-TLV
            encoded data as specified in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.ManageData">
            <summary>
            ApduInstruction for MANAGE DATA command as
            specified in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.WriteBinary">
            <summary>
            ApduInstruction for WRITE BINARY command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                              
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.WriteBinaryBerTlv">
            <summary>
            ApduInstruction for WRITE BINARY command with BER-TLV encoded
            data as specified in ISO/IEC 7816-4:2005.
            </summary>                                                   
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.WriteRecord">
            <summary>
            ApduInstruction for WRITE RECORD command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                              
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.UpdateBinary">
            <summary>
            ApduInstruction for UPDATE BINARY command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.UpdateBinaryBerTlv">
            <summary>
            ApduInstruction for UPDATE BINARY command with BER-TLV
            encoded data as specified in ISO/IEC 7816-4:2005.
            </summary>                                            
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.PutNextData">
            <summary>
            ApduInstruction for PUT NEXT DATA command as
            specified in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.PutNextDataBerTlv">
            <summary>
            ApduInstruction for PUT NEXT DATA command with BER-TLV
            encoded data as specified in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.PutData">
            <summary>
            ApduInstruction for PUT DATA command as specified in ISO/IEC
            7816-4:2005.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.PutDataBerTlv">
            <summary>
            ApduInstruction for PUT DATA command with BER-TLV encoded
            data as specified in ISO/IEC 7816-4:2005.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.UpdateRecord">
            <summary>
            ApduInstruction for UPDATE RECORD command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.UpdateRecordBerTlv">
            <summary>
            ApduInstruction for UPDATE RECORD command with BER-TLV
            encoded data as specified in ISO/IEC 7816-4:2005.
            </summary>                                            
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.UpdateData">
            <summary>
            ApduInstruction for UPDATE DATA command as specified
            in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.UpdateDataBerTlv">
            <summary>
            ApduInstruction for UPDATE DATA command with BER-TLV
            encoded data as specified in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.CreateFile">
            <summary>
            ApduInstruction for CREATE FILE command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.AppendRecord">
            <summary>
            ApduInstruction for APPEND RECORD command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.DeleteFile">
            <summary>
            ApduInstruction for DELETE FILE command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.TerminateDF">
            <summary>
            ApduInstruction for TERMINATE DF command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                              
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.TerminateEF">
            <summary>
            ApduInstruction for TERMINATE EF command as specified in
            ISO/IEC 7816-4:2005.
            </summary>                                              
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.LoadApplication">
            <summary>
            ApduInstruction for LOAD APPLICATION command as specified
            in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.LoadApplicationBerTlv">
            <summary>
            ApduInstruction for LOAD APPLICATION command with BER-TLV
            encoded data as specified in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.DeleteData">
            <summary>
            ApduInstruction for DELETE DATA command as specified
            in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.RemoveApplication">
            <summary>
            ApduInstruction for REMOVE APPLICATION command as specified
            in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.RemoveApplicationBerTlv">
            <summary>
            ApduInstruction for REMOVE APPLICATION command with BER-TLV
            encoded data as specified in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduInstruction.TerminateCardUsage">
            <summary>
            ApduInstruction for TERMINATE CARD USAGE command as specified
            in ISO/IEC 7816-4:2005.
            </summary>                                                   
        </member>
        <member name="M:Neurotec.SmartCards.ApduInstruction.#ctor(System.Byte)">
            <summary>Initializes a new instance of the ApduInstruction .</summary>
            <param name="value">byte value of the APDU instruction.</param>
        </member>
        <member name="M:Neurotec.SmartCards.ApduInstruction.Equals(System.Object)">
            <summary>Overloaded. Determines whether two Object instances are equal.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.ApduInstruction.GetHashCode">
            <summary>Serves as a hash function for a particular type. GetHashCode is suitable for use in hashing algorithms and data structures like a hash table.</summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.ApduInstruction.ToString">
            <summary>Returns a String that represents the current Object.</summary>
            <returns>Returns a String that represents the current Object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.ApduInstruction.ToString(System.String)">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <param name="format">Reserved.</param>
            <returns>Returns a String that represents the current Object.</returns>
        </member>
        <member name="P:Neurotec.SmartCards.ApduInstruction.IsValid">
            <summary>Indicates whether APDU command instruction byte (INS) is valid, i.e. does not violate any of the INS encoding rules specified in ISO/IEC 7816-3:2006 and ISO/IEC 7816-4:2005.</summary>
            <value>true if APDU command instruction byte (INS) is valid; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduInstruction.IsDataBerTlvEncoded">
            <summary>Indicates whether the data field of the APDU command with appropriate instruction byte (INS) is BER-TLV encoded.</summary>
            <value>true if the data field of the APDU command with appropriate instruction byte (INS) is BER-TLV encoded; otherwise, false.</value>
        </member>
        <member name="M:Neurotec.SmartCards.ApduInstruction.Equals(Neurotec.SmartCards.ApduInstruction)">
            <summary>
            Checks whether the current ApduInstruction object equals the other ApduClass object.
            </summary>
            <param name="other">The other ApduInstruction object.</param>
            <returns><i>true</i> if the objects are equal, else <i>false</i>.</returns>
        </member>
        <member name="T:Neurotec.SmartCards.ApduStatus">
            <summary>
            Represents APDU response status.
            </summary>                      
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.SmartCards.ApduStatus.op_Explicit(Neurotec.SmartCards.ApduStatus)~System.UInt16">
            <summary>
            Converts APDU status to ushort.
            </summary>
            <param name="value">ApduStatus object.</param>
            <returns>
            ApduStatus converted to byte.
            </returns>                                    
        </member>
        <member name="M:Neurotec.SmartCards.ApduStatus.op_Explicit(System.UInt16)~Neurotec.SmartCards.ApduStatus">
            <summary>
            Converts byte to APDU status.
            </summary>
            <param name="value">ushort value of the APDU status.</param>
            <returns>
            ApduStatus object.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.SmartCards.ApduStatus.op_Equality(Neurotec.SmartCards.ApduStatus,Neurotec.SmartCards.ApduStatus)">
            <summary>
            Gets a value indicating whether the ApduStatus is identical
            to a second ApduStatus.
            </summary>
            <param name="v1">ApduStatus object.</param>
            <param name="v2">ApduStatus object.</param>
            <returns>
            true if the ApduStatus is identical to a second ApduStatus;
            otherwise, false.
            </returns>                                                 
        </member>
        <member name="M:Neurotec.SmartCards.ApduStatus.op_Inequality(Neurotec.SmartCards.ApduStatus,Neurotec.SmartCards.ApduStatus)">
            <summary>
            Gets a value indicating whether the ApduStatus is not
            identical to a second ApduStatus.
            </summary>
            <param name="v1">ApduStatus object.</param>
            <param name="v2">ApduStatus object.</param>
            <returns>
            true if its two operands refer to different objects;
            otherwise, false.
            </returns>                                           
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.NoQualification">
            <summary>
            ApduStatus meaning normal processing, no further
            qualification as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                        
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.Proprietary9XXX">
            <summary>
            Mask for ApduStatus meaning proprietary status 9XXX as
            specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                            
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.DataStillAvailableXX">
            <summary>
            Mask for ApduStatus meaning normal processing (SW2 encodes
            the number of data bytes still available) as specified in
            ISO/IEC 7816-4:2005/2013.
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.WarningSonvmuXX">
            <summary>
            Mask for ApduStatus meaning warning processing state of
            non-volatile memory is unchanged (further qualification in
            SW2) as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.WarningSonvmuNoInformation">
            <summary>
            ApduStatus meaning warning processing state of non-volatile
            memory is unchanged, no information given as specified in
            ISO/IEC 7816-4:2005/2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.WarningSonvmuTriggeringByTheCardStart">
            <summary>
            End of values for ApduStatus meaning warning processing state
            of non-volatile memory is unchanged, triggering by the card
            as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                   
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.WarningSonvmuTriggeringByTheCardEnd">
            <summary>
            Start of values for ApduStatus meaning warning processing
            state of non-volatile memory is unchanged, triggering by the
            card as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.WarningSonvmuPartOfReturnedDataMayBeCorrupted">
            <summary>
            ApduStatus meaning warning processing state of non-volatile
            memory is unchanged, part of returned data may be corrupted
            as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.WarningSonvmuEndOfFileOrRecordBeforeReadingNeBytes">
            <summary>
            ApduStatus meaning warning processing state of non-volatile
            memory is unchanged, end of file or record reached before
            reading Ne bytes as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.WarningSonvmuSelectedFileDeactivated">
            <summary>
            ApduStatus meaning warning processing state of non-volatile
            memory is unchanged, selected file deactivated as specified
            in ISO/IEC 7816-4:2005/2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.WarningSonvmuFileControlInformationIncorrectyFormatted">
            <summary>
            ApduStatus meaning warning processing state of non-volatile
            memory is unchanged, file control information not formatted
            as specified according to 5.3.3 in ISO/IEC 7816-4:2005 or
            7.4 n ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.WarningSonvmuSelectedFileInTerminationState">
            <summary>
            ApduStatus meaning warning processing state of non-volatile
            memory is unchanged, selected file in termination state as
            specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.WarningSonvmuNoInputDataAvailableFromASensorOnTheCard">
            <summary>
            ApduStatus meaning warning processing state of non-volatile
            memory is unchanged, no input data available from a sensor on
            the card as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                   
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.WarningSonvmuAtLeastOneOfTheReferencedRecordsIsDeactivated">
            <summary>
            ApduStatus meaning warning processing state of non-volatile
            memory is unchanged, at least one of the referenced records 
            is deactivated as specified in ISO/IEC 7816-4:2013.
            </summary>                                                   
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.WarningSonvmcXX">
            <summary>
            Mask for ApduStatus meaning warning processing state of
            non-volatile memory has changed (further qualification in
            SW2) as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.WarningSonvmcNoInformation">
            <summary>
            ApduStatus meaning warning processing state of non-volatile
            memory has changed, no information given as specified in
            ISO/IEC 7816-4:2005/2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.WarningSonvmcUnsuccessfulComparison">
            <summary>
            ApduStatus meaning warning processing state of non-volatile
            memory has changed, unsuccessful comparison (exact meaning 
            depends on command) as specified in ISO/IEC 7816-4:2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.WarningSonvmcFileFilledUpByTheLastWrite">
            <summary>
            ApduStatus meaning warning processing state of non-volatile
            memory has changed, file filled up by the last write as
            specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.WarningSonvmcCounterX">
            <summary>
            Mask for ApduStatus meaning warning processing state of
            non-volatile memory has changed, counter from 0 to 15 encoded
            by 'X' (exact meaning depending on the command) as specified
            in ISO/IEC 7816-4:2005/2013.
            </summary>                                                   
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorSonvmuXX">
            <summary>
            Mask for ApduStatus meaning execution error state of
            non-volatile memory is unchanged (further qualification in
            SW2) as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorSonvmuExecutionError">
            <summary>
            ApduStatus meaning execution error state of non-volatile
            memory is unchanged, execution error as specified in ISO/IEC
            7816-4:2005/2013.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorSonvmuImmediateResponseRequiredByTheCard">
            <summary>
            ApduStatus meaning execution error state of non-volatile
            memory is unchanged, immediate response required by the card
            as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorSonvmuTriggeringByTheCardStart">
            <summary>
            Start of values for ApduStatus meaning execution error state
            of non-volatile memory is unchanged, triggering by the card
            as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorSonvmuTriggeringByTheCardEnd">
            <summary>
            ApduStatus meaning execution error state of on-volatile
            memory is unchanged, triggering by the card as specified
            in ISO/IEC 7816-4:2005/2013.
            </summary>                                                   
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorSonvmuLogicalChannelSharedAccessDenied">
            <summary>
            ApduStatus meaning execution error state of non-volatile 
            memory is unchanged, logical channel shared access
            denied as specified in ISO/IEC 7816-4:2013.
            </summary>                                                   
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorSonvmuLogicalChannelOpeningDenied">
            <summary>
            End of values for ApduStatus meaning execution error state of
            non-volatile memory is unchanged, logical channel opening
            denied as specified in ISO/IEC 7816-4:2013.
            </summary>                                                   
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorSonvmcXX">
            <summary>
            Mask for ApduStatus meaning execution error state of
            non-volatile memory has changed (further qualification in
            SW2) as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorSonvmcNoInformation">
            <summary>
            ApduStatus meaning execution error state of non-volatile
            memory has changed, no information given as specified in
            ISO/IEC 7816-4:2005/2013.
            </summary>                                              
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorSonvmcMemoryFailure">
            <summary>
            ApduStatus meaning memory failure as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorSecurityXX">
            <summary>
            Mask for ApduStatus meaning execution error security-related
            issues as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorSriNoInformation">
            <summary>
            ApduStatus meaning execution error execution error security-related
            issues no information given as specified in
            ISO/IEC 7816-4:2013.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWrongLength">
            <summary>
            ApduStatus meaning checking error wrong length, no further
            indication as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWlNoInformation">
            <summary>
            ApduStatus meaning checking error wrong length,
            no information given as specified in ISO/IEC 7816-4:2013.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWlCommandApduFormatNotCompliantWithStandard">
            <summary>
            ApduStatus meaning checking error wrong length, 
            command APDU format not compliant with ISO/IEC 7816-4:2013
            standard as specified in 5.1 of ISO/IEC 7816-4:2013.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWlValueOfLcIsNotTheOneExpected">
            <summary>
            ApduStatus meaning checking error wrong length, 
            the value of Lc is not the one expected as 
            specified in ISO/IEC 7816-4:2013.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorProprietary67XX">
            <summary>
            Mask for ApduStatus meaning proprietary checking error 67XX
            as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorFicnsXX">
            <summary>
            Mask for ApduStatus meaning checking error functions in CLA
            not supported (further qualification in SW2) as specified in
            ISO/IEC 7816-4:2005/2013.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorFicnsNoInformation">
            <summary>
            ApduStatus meaning checking error functions in CLA not
            supported, no information given as specified in ISO/IEC
            7816-4:2005/2013.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorFicnsLogicalChannelNotSupported">
            <summary>
            ApduStatus meaning checking error functions in CLA not
            supported, logical channel not supported as specified in
            ISO/IEC 7816-4:2005/2013.
            </summary>                                              
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorFicnsSecureMessagingNotSupported">
            <summary>
            ApduStatus meaning checking error functions in CLA not
            supported, secure messaging not supported as specified in
            ISO/IEC 7816-4:2005/2013.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorFicnsLastCommandOfTheChainExpected">
            <summary>
            ApduStatus meaning checking error functions in CLA not
            supported, last command of the chain expected as specified in
            ISO/IEC 7816-4:2005/2013.
            </summary>                                                   
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorFicnsCommandChainingNotSupported">
            <summary>
            ApduStatus meaning checking error functions in CLA not
            supported, command chaining not supported as specified in
            ISO/IEC 7816-4:2005/2013.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorCnaXX">
            <summary>
            Mask for ApduStatus meaning checking error command not
            allowed (further qualification in SW2) as specified in
            ISO/IEC 7816-4:2005/2013.
            </summary>                                            
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorCnaNoInformation">
            <summary>
            ApduStatus meaning checking error command not allowed, no
            information given as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorCnaCommandIncompatibleWithFileStructure">
            <summary>
            ApduStatus meaning checking error command not allowed,
            command incompatible with file structure as specified in
            ISO/IEC 7816-4:2005/2013.
            </summary>                                              
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorCnaSecurityStatusNotSatisfied">
            <summary>
            ApduStatus meaning checking error command not allowed,
            security status not satisfied as specified in ISO/IEC
            7816-4:2005/2013.
            </summary>                                            
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorCnaAuthenticationMethodBlocked">
            <summary>
            ApduStatus meaning checking error command not allowed,
            authentication method blocked as specified in ISO/IEC
            7816-4:2005/2013.
            </summary>                                            
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorCnaReferenceDataNotUsable">
            <summary>
            ApduStatus meaning checking error command not allowed,
            reference data not usable as specified in ISO/IEC
            7816-4:2005/2013.
            </summary>                                            
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorCnaConditionsOfUseNotSatisfied">
            <summary>
            ApduStatus meaning checking error command not allowed,
            \conditions of use not satisfied as specified in ISO/IEC
            7816-4:2005/2013.
            </summary>                                              
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorCnaCommandNotAllowed">
            <summary>
            ApduStatus meaning checking error command not allowed,
            command not allowed (no current EF) as specified in ISO/IEC
            7816-4:2005/2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorCnaExpectedSecureMessagingDataObjectsMissing">
            <summary>
            ApduStatus meaning checking error command not allowed,
            expected secure messaging data objects missing as specified
            in ISO/IEC 7816-4:2005/2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorCnaIncorrectSecureMessagingDataObjects">
            <summary>
            ApduStatus meaning checking error command not allowed,
            incorrect secure messaging data objects as specified in
            ISO/IEC 7816-4:2005/2013.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWP1P2XX">
            <summary>
            Mask for ApduStatus meaning checking error wrong parameters
            P1-P2 (further qualification in SW2) as specified in ISO/IEC
            7816-4:2005/2013.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWP1P2NoInformation">
            <summary>
            ApduStatus meaning checking error wrong parameters P1-P2, no
            information given as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWP1P2IncorrectParametersInTheCommandDataField">
            <summary>
            ApduStatus meaning checking error wrong parameters P1-P2,
            incorrect parameters in the command data field as specified
            in ISO/IEC 7816-4:2005/2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWP1P2FunctionNotSupported">
            <summary>
            ApduStatus meaning checking error wrong parameters P1-P2,
            function not supported as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWP1P2FileOrApplicationNotFound">
            <summary>
            ApduStatus meaning checking error wrong parameters P1-P2,
            file or application not found as specified in ISO/IEC
            7816-4:2005/2013.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWP1P2RecordNotFound">
            <summary>
            ApduStatus meaning checking error wrong parameters P1-P2,
            record not found as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWP1P2NotEnoughMemorySpaceInTheFile">
            <summary>
            ApduStatus meaning checking error wrong parameters P1-P2, not
            enough memory space in the file as specified in ISO/IEC
            7816-4:2005/2013.
            </summary>                                                   
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWP1P2NcInconsistentWithTlvStructure">
            <summary>
            ApduStatus meaning checking error wrong parameters P1-P2, Nc
            inconsistent with TLV structure as specified in ISO/IEC
            7816-4:2005/2013.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWP1P2IncorrectParametersP1P2">
            <summary>
            ApduStatus meaning checking error wrong parameters P1-P2,
            incorrect parameters P1-P2 as specified in ISO/IEC
            7816-4:2005/2013.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWP1P2NcInconsistentWithParametersP1P2">
            <summary>
            ApduStatus meaning checking error wrong parameters P1-P2, Nc
            inconsistent with parameters P1-P2 as specified in ISO/IEC
            7816-4:2005/2013.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWP1P2ReferencedDataOrReferenceDataNotFound">
            <summary>
            ApduStatus meaning checking error wrong parameters P1-P2,
            referenced data or reference data not found (exact meaning
            depending on the command) as specified in ISO/IEC
            7816-4:2005/2013.
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWP1P2FileAlreadyExists">
            <summary>
            ApduStatus meaning checking error wrong parameters P1-P2,
            file already exists as specified in ISO/IEC 7816-4:2005.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWP1P2DFNameAlreadyExists">
            <summary>
            ApduStatus meaning checking error wrong parameters P1-P2, DF
            name already exists as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWP1P2NoQualification">
            <summary>
            ApduStatus meaning checking error wrong parameters P1-P2, no
            further indication as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorProprietary6BXX">
            <summary>
            Mask for ApduStatus meaning proprietary checking error 6BXX
            as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorWrongLeXX">
            <summary>
            Mask for ApduStatus meaning checking error wrong Le field
            (SW2 encodes the exact number of available data bytes) as
            specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorInstructionNotSupportedOrInvalid">
            <summary>
            ApduStatus meaning checking error instruction code not
            supported or invalid as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorProprietary6DXX">
            <summary>
            Mask for ApduStatus meaning proprietary checking error 6DXX
            as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorClassNotSupported">
            <summary>
            ApduStatus meaning checking error class not supported as
            specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                              
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorProprietary6EXX">
            <summary>
            Mask for ApduStatus meaning proprietary checking error 6EXX
            as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorNoPreciseDiagnosis">
            <summary>
            ApduStatus meaning checking error no precise diagnosis as
            specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.ApduStatus.ErrorProprietary6FXX">
            <summary>
            Mask for ApduStatus meaning proprietary checking error 6FXX
            as specified in ISO/IEC 7816-4:2005/2013.
            </summary>                                                 
        </member>
        <member name="M:Neurotec.SmartCards.ApduStatus.#ctor(System.Byte,System.Byte)">
            <summary>Initializes a new instance of the ApduStatus .</summary>
            <param name="sw1">First byte of processing state.</param>
            <param name="sw2">Second byte of processing state.</param>
        </member>
        <member name="M:Neurotec.SmartCards.ApduStatus.#ctor(System.UInt16)">
            <summary>Initializes a new instance of the ApduStatus .</summary>
            <param name="value">Indicates the processing state.</param>
        </member>
        <member name="M:Neurotec.SmartCards.ApduStatus.Equals(System.Object)">
            <summary>Overloaded. Determines whether two Object instances are equal.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.ApduStatus.GetHashCode">
            <summary>Serves as a hash function for a particular type. GetHashCode is suitable for use in hashing algorithms and data structures like a hash table.</summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.ApduStatus.ToString">
            <summary>Returns a String that represents the current Object.</summary>
            <returns>Returns a String that represents the current Object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.ApduStatus.ToString(System.String)">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <param name="format">Reserved.</param>
            <returns>Returns a String that represents the current Object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.ApduStatus.GetMeaning(System.String)">
            <summary>
            Returns a String that represents the general and specific
            meanings of the interindustry values of SW1-SW2 
            according to ISO/IEC 7816-4:2005 and ISO/IEC 7816-4:2013 standard revisions.
            </summary>
            <param name="customMessage">Additional custom data to incorporate into return string</param>
            <returns>Returns a string.</returns>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsValid">
            <summary>Retrieves value indicating whether APDU response status is valid, i.e. does not violate any of the SW1SW2 status bytes encoding rules specified in ISO/IEC 7816-3:2006 and ISO/IEC 7816-4:2005.</summary>
            <value>true if APDU command instruction byte (INS) is valid; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsInterindustry">
            <summary>Retrieves value indicating whether APDU response status is interindustry.</summary>
            <value>true if APDU response status (SW1SW2) is interindustry; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsProprietary">
            <summary>Retrieves value indicating whether APDU response status is proprietary.</summary>
            <value>true if APDU response status (SW1SW2) is proprietary; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsProcessComplete">
            <summary>Retrieves value indicating whether APDU response status means process completed.</summary>
            <value>true if APDU processing is completed; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsProcessAborted">
            <summary>Retrieves value indicating whether APDU response status means process aborted.</summary>
            <value>true if APDU processing was aborted; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsNormalProcessing">
            <summary>Retrieves value indicating whether APDU response status means normal processing.</summary>
            <value>true if APDU response status (SW1SW2) specifies normal processing; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsWarningProcessing">
            <summary>Retrieves value indicating whether APDU response status means warning processing.</summary>
            <value>true if APDU response status (SW1SW2) specifies warning processing.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsExecutionError">
            <summary>Retrieves value indicating whether APDU response status means execution error.</summary>
            <value>true if APDU response status (SW1SW2) specifies execution error; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsCheckingError">
            <summary>Retrieves value indicating whether APDU response status means checking error.</summary>
            <value>true if checking error occurred; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsStateOfNonVolatileMemoryChanged">
            <summary>Retrieves value indicating whether APDU response status means state of non-volatile memory has changed.</summary>
            <value>true if state of non-volatile memory has changed; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsStateOfNonVolatileMemoryUnchanged">
            <summary>Retrieves value indicating whether APDU response status means state of non-volatile memory has changed state of non-volatile memory is unchanged.</summary>
            <value>true if state of non-volatile memory remained unchanged; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.DataStillAvailableValue">
            <summary>Gets the number of available data bytes from the APDU response status.</summary>
            <value>The number of available data bytes from the APDU response status.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.WarningSonvmuTriggeringByTheCardValue">
            <summary>Retrieves the length of a query that the interface device should recover to try to complete the APDU command that has been previously aborted by the cardfrom the APDU response status. Applicable only if APDU status is 62XX.</summary>
            <value>The length of a further query that the interface device should retrieve before processing the card-originated byte string in the outside world.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.WarningSonvmcCounterValue">
            <summary>Retrieves the value of a counter returned by the card from the APDU response status. Applicable only if APDU status is 63CX.</summary>
            <value>The value of a counter returned by the card (exact meaning depending on the APDU command).</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.ErrorSonvmuTriggeringByTheCardValue">
            <summary>Retrieves the length of a query that the interface device should recover to try to complete the APDU command that has been previously aborted by the cardfrom the APDU response status. Applicable only if APDU status is 64XX.</summary>
            <value>The length of a query that the interface device should recover to try to complete the APDU command .</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.ErrorWrongLeValue">
            <summary>Retrieves the exact number of available data bytes from the APDU response status. Applicable only if APDU status is 6CXX.</summary>
            <value>the exact number of available data bytes in case error specifying wrong APDU response length (Le) field has been received (i.e. SW1SW2 = '6CXX').</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.SW1">
            <summary>Retrieves the first byte of the specified APDU status.</summary>
            <value>First status byte.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.SW2">
            <summary>Retrieves the second byte of the specified APDU status.</summary>
            <value>Second status byte.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsProprietary9XXX">
            <summary>Retrieves a value indicating whether APDU status means proprietary status 9XXX.</summary>
            <value>true if APDU response status (SW1SW2) is proprietary 9XXX; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsDataStillAvailable">
            <summary>Retrieves a value indicating whether APDU status means normal processing (SW2 encodes the number of data bytes still available).</summary>
            <value>true if number of available data bytes from the APDU response status is available; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsWarningSonvmu">
            <summary>Retrieves a value indicating whether APDU status means warning processing state of non-volatile memory is unchanged (further qualification in SW2).</summary>
            <value>true if triggering by the card; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsWarningSonvmuTriggeringByTheCard">
            <summary>Retrieves a value indicating whether APDU status means warning processing state of non-volatile memory is unchanged, triggering by the card.</summary>
            <value>true if warning is triggering by the card; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsWarningSonvmc">
            <summary>Retrieves a value indicating whether APDU status means warning processing state of non-volatile memory has changed (further qualification in SW2).</summary>
            <value>If warning occurred; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsWarningSonvmcCounter">
            <summary>Retrieves a value indicating whether APDU status means warning processing state of non-volatile memory has changed, counter from 0 to 15 (exact meaning depending on the command).</summary>
            <value>true if counter from 0 to 15 encoded by 'X'; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsErrorSonvmu">
            <summary>Retrieves a value indicating whether APDU status means execution error state of nonvolatile memory is unchanged (further qualification in SW2).</summary>
            <value>true if execution error occurred; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsErrorSonvmuTriggeringByTheCard">
            <summary>Retrieves a value indicating whether APDU status means execution error state of nonvolatile memory is unchanged, triggering by the card.</summary>
            <value>true if error is triggering by the card; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsErrorSonvmc">
            <summary>Retrieves a value indicating whether APDU status means execution error state of nonvolatile memory has changed (further qualification in SW2).</summary>
            <value>true if state of non-volatile memory has changed; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsErrorSecurity">
            <summary>Retrieves a value indicating whether APDU status means execution error security-related issues.</summary>
            <value>true if security error occurred; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsErrorProprietary67XX">
            <summary>Retrieves a value indicating whether APDU status means proprietary error 67XX.</summary>
            <value>true if error occurred; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsErrorFicns">
            <summary>Retrieves a value indicating whether APDU status means checking error functions in CLA not supported (further qualification in SW2).</summary>
            <value>true if error occurred; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsErrorCna">
            <summary>Retrieves a value indicating whether APDU status means checking error command not allowed (further qualification in SW2).</summary>
            <value>true if error occurred; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsErrorWP1P2">
            <summary>Retrieves a value indicating whether APDU status means checking error wrong parameters P1-P2 (further qualification in SW2).</summary>
            <value>true if error occurred; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsErrorProprietary6BXX">
            <summary>Retrieves a value indicating whether APDU status means proprietary error 6BXX.</summary>
            <value>true if error occurred; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsErrorWrongLe">
            <summary>Retrieves a value indicating whether APDU status means checking error wrong Le field (SW2 encodes the exact number of available data bytes).</summary>
            <value>true if wrong Le field; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsErrorProprietary6DXX">
            <summary>Retrieves a value indicating whether APDU status means proprietary error 6DXX.</summary>
            <value>true if error occurred; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsErrorProprietary6EXX">
            <summary>Retrieves a value indicating whether APDU status means proprietary error 6EXX.</summary>
            <value>true if class error occurred; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.ApduStatus.IsErrorProprietary6FXX">
            <summary>Retrieves a value indicating whether APDU status means proprietary error 6FXX.</summary>
            <value>true if error occurred; otherwise, false.</value>
        </member>
        <member name="M:Neurotec.SmartCards.ApduStatus.Equals(Neurotec.SmartCards.ApduStatus)">
            <summary>
            Checks whether the current ApduStatus object equals the other ApduClass object.
            </summary>
            <param name="other">The other ApduStatus object.</param>
            <returns><i>true</i> if the objects are equal, else <i>false</i>.</returns>
        </member>
        <member name="T:Neurotec.SmartCards.BerTagClass">
            <summary>
            Specifies a class of a BER-TLV data object.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.BerTagClass.Universal">
            <summary>
            Universal class of a BER-TLV data object.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.BerTagClass.Application">
            <summary>
            Application class of a BER-TLV data object.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.BerTagClass.ContextSpecific">
            <summary>
            Context-specific class of a BER-TLV data object.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.BerTagClass.Private">
            <summary>
            Private class of a BER-TLV data object.
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.BerTagEncoding">
            <summary>
            Specifies an encoding of a BER-TLV data object.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.BerTagEncoding.Primitive">
            <summary>
            Primitive encoding of a BER-TLV data object.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.BerTagEncoding.Constructed">
            <summary>
            Constructed encoding of a BER-TLV data object.
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.BerTag">
            <summary>
            Represents BER-TLV tag.
            </summary>             
        </member>
        <member name="P:Neurotec.SmartCards.BerTag.BerTagClassNativeType">
            <summary>
            Defines the native type of the BER-TLV tag class.
            </summary>
        </member>
        <member name="P:Neurotec.SmartCards.BerTag.BerTagEncodingNativeType">
            <summary>
            Defines the native type of the BER-TLV tag encoding.
            </summary>
        </member>
        <member name="P:Neurotec.SmartCards.BerTag.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.SmartCards.BerTag.op_Explicit(Neurotec.SmartCards.BerTag)~System.Int32">
            <summary>
            Converts BER tag to int.
            </summary>
            <param name="value">BerTag object.</param>
            <returns>
            BerTag converted to int.
            </returns>                                
        </member>
        <member name="M:Neurotec.SmartCards.BerTag.op_Explicit(System.Int32)~Neurotec.SmartCards.BerTag">
            <summary>
            Converts int to BER tag.
            </summary>
            <param name="value">Integer value of BER tag.</param>
            <returns>
            BerTag object.
            </returns>                                           
        </member>
        <member name="M:Neurotec.SmartCards.BerTag.op_Equality(Neurotec.SmartCards.BerTag,Neurotec.SmartCards.BerTag)">
            <summary>
            Gets a value indicating whether the BerTag is identical to a
            second BerTag.
            </summary>
            <param name="v1">BerTag object.</param>
            <param name="v2">BerTag object.</param>
            <returns>
            true if the BerTag is identical to a second BerTag;
            otherwise, false.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.SmartCards.BerTag.op_Inequality(Neurotec.SmartCards.BerTag,Neurotec.SmartCards.BerTag)">
            <summary>
            Gets a value indicating whether the BerTag is not identical
            to a second BerTag.
            </summary>
            <param name="v1">BerTag object.</param>
            <param name="v2">BerTag object.</param>
            <returns>
            true if its two operands refer to different objects;
            otherwise, false.
            </returns>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.EndOfContents">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying the end of contents.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.Boolean">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying boolean type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.Integer">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying integer type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.BitString">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying bit string type. 
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.OctetString">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying octet string type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.Null">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying null type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.ObjectIdentifier">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying object identifier type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.ObjectDescriptor">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying Object-Descriptor type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.External">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying external type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.InstanceOf">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying instance-of type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.Real">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying real type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.Enumerated">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying enumerated type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.EmbeddedPdv">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying embedded PDV type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.Utf8String">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying UTF8String type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.RelativeObjectIdentifier">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying relative object identifier type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.Sequence">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying sequence type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.SequenceOf">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying sequence-of type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.Set">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying set type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.SetOf">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying set-of type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.NumericString">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying Numeric-String type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.PrintableString">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying PrintableString type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.TeletexString">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying TeletexString type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.T61String">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying T61String type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.VideotexString">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying Videotex-String type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.IA5String">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying IA5String type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.UtcTime">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying UTCTime type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.GeneralizedTime">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying GenerealizedTime type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.GraphicString">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying Graphic-String type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.VisibleString">
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying VisibleString type.                         
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.Iso646String">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying ISO646String type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.GeneralString">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying General-String type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.UniversalString">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying Universal-String type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.CharacterString">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying character string type.
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.BerTag.BmpString">
            <summary>
            ASN.1 (ISO/IEC 8825-1:2002) universal class BER-TLV tag
            specifying BMPString type.
            </summary>                                             
        </member>
        <member name="M:Neurotec.SmartCards.BerTag.Read(System.Byte[])">
            <summary>Reads BER-TLV tag field from memory buffer.</summary>
            <param name="buffer">Byte array that contains BER-TLV tag field.</param>
            <returns>BerTag object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.BerTag.Read(Neurotec.IO.NBuffer)">
            <summary>
            Reads BER-TLV tag field from memory buffer.
            </summary>
            <param name="buffer">NBuffer that contains BER-TLV tag field.</param>
            <returns>BerTag object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.BerTag.Read(Neurotec.IO.NBuffer,System.Int32@)">
            <summary>
            Reads BER-TLV tag field from memory buffer with specified tag.
            </summary>
            <param name="buffer">NBuffer that contains BER-TLV tag field.</param>
            <param name="size">[out] NBuffer size.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.SmartCards.BerTag.#ctor(System.Int32)">
            <summary>Initializes a new instance of the BerTag .</summary>
            <param name="value">BER-TLV tag.</param>
        </member>
        <member name="M:Neurotec.SmartCards.BerTag.#ctor(Neurotec.SmartCards.BerTagClass,Neurotec.SmartCards.BerTagEncoding,System.Int32)">
            <summary>Initializes a new instance of the BerTag .</summary>
            <param name="cls">Class of the BER-TLV tag field.</param>
            <param name="encoding">Encoding of the BER-TLV tag field</param>
            <param name="number">Raw tag number of the BER-TLV tag field.</param>
        </member>
        <member name="M:Neurotec.SmartCards.BerTag.Equals(System.Object)">
            <summary>Overloaded. Determines whether two Object instances are equal.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.BerTag.GetHashCode">
            <summary>Serves as a hash function for a particular type. GetHashCode is suitable for use in hashing algorithms and data structures like a hash table.</summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.BerTag.ToString">
            <summary>Returns a String that represents the current Object.</summary>
            <returns>Returns a String that represents the current Object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.BerTag.ToString(System.String)">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <param name="format">Reserved.</param>
            <returns>Returns a String that represents the current Object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.BerTag.IsValid(System.Boolean)">
            <summary>Specifies whether 0xFF value is valid for the first byte of BER-TLV tag fields.</summary>
            <param name="ffIsValidForTheFirstByte">Specifies whether 0xFF value is valid for the first byte of BER-TLV tag fields.</param>
            <returns>true if BER-TLV tag field is valid.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.BerTag.Write(Neurotec.IO.NBuffer)">
            <summary>
            Writes BER-TLV tag field to memory buffer.
            </summary>
            <param name="buffer">NBuffer to which to write the BER-TLV tag field.</param>
            <returns>Size of the NBuffer.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.BerTag.Save">
            <summary>Saves BER-TLV tag to byte array.</summary>
            <returns>The size of saved BER-TLV data object.</returns>
        </member>
        <member name="P:Neurotec.SmartCards.BerTag.Class">
            <summary>Gets the class of the BER-TLV tag field.</summary>
            <value>BER-TLV tag field Value.</value>
        </member>
        <member name="P:Neurotec.SmartCards.BerTag.Encoding">
            <summary>Gets the encoding of the BER-TLV data object.</summary>
            <value>BER-TLV tag field Value.</value>
        </member>
        <member name="P:Neurotec.SmartCards.BerTag.Number">
            <summary>Gets the tag number encoded in the BERTLV tag field.</summary>
            <value>BER-TLV tag field value.</value>
        </member>
        <member name="P:Neurotec.SmartCards.BerTag.Length">
            <summary>Gets the length of the BER-TLV tag field.</summary>
            <value>BER-TLV tag field value.</value>
        </member>
        <member name="M:Neurotec.SmartCards.BerTag.Equals(Neurotec.SmartCards.BerTag)">
            <summary>
            Checks whether the current BerTag object equals the other ApduClass object.
            </summary>
            <param name="other">The other BerTag object.</param>
            <returns><i>true</i> if the objects are equal, else <i>false</i>.</returns>
        </member>
        <member name="T:Neurotec.SmartCards.BerTlv">
            <summary>
            Provides functionality for creation, validation, retrieval
            and update of BER-TLV data objects that are fully compliant
            with BER-TLV encoding rules specified in ISO/IEC 7816-4:2005.
            </summary>                                                   
        </member>
        <member name="F:Neurotec.SmartCards.BerTlv.FlagFFIsValidForTheTagFirstByte">
            Indicates that 0xFF is a valid first byte in a tag.
        </member>
        <member name="P:Neurotec.SmartCards.BerTlv.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.SmartCards.BerTlv.Create(Neurotec.SmartCards.BerTag)">
            <summary>Creates BER-TLV data object.</summary>
            <param name="tag">BER-TLV tag field value.</param>
            <returns>A handle to created BER-TLV data object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.BerTlv.Create(Neurotec.SmartCards.BerTag,System.UInt32)">
            <summary>
            Creates BER-TLV data object.
            </summary>
            <param name="tag">BER-TLV tag field value.</param>
            <param name="flags">Associated flags.</param>
            <returns>A handle to created BER-TLV data object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.BerTlv.FromMemory(System.Byte[])">
            <summary>Creates BER-TLV data object from memory buffer.</summary>
            <param name="buffer">Byte array to read BERTLV data from.</param>
            <returns>A handle to created BER-TLV data object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.BerTlv.FromMemory(Neurotec.IO.NBuffer)">
            <summary>
            Creates BER-TLV data object from memory buffer.
            </summary>
            <param name="buffer">NBuffer to read BERTLV data from.</param>
            <returns>A handle to created BER-TLV data object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.BerTlv.FromMemory(Neurotec.IO.NBuffer,System.UInt32)">
            <summary>
            Creates BER-TLV data object from memory buffer.
            </summary>
            <param name="buffer">NBuffer to read BERTLV data from.</param>
            <param name="flags">Associated flags.</param>
            <returns>A handle to created BER-TLV data object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.BerTlv.FromMemory(Neurotec.IO.NBuffer,System.UInt32,System.Int32@)">
            <summary>
            Creates BER-TLV data object from memory buffer.
            </summary>
            <param name="buffer">NBuffer to read BERTLV data from.</param>
            <param name="flags">Associated flags.</param>
            <param name="size">NBuffer size.</param>
            <returns>A handle to created BER-TLV data object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.BerTlv.LoadMany(System.Byte[])">
            <summary>Creates an array of BER-TLV data objects.</summary>
            <param name="buffer">Byte array to read BERTLVs data from.</param>
            <returns>Pointer to an array of pointers to handles of created BER-TLV data objects.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.BerTlv.LoadMany(Neurotec.IO.NBuffer)">
            <summary>
            Creates an array of BER-TLV data objects.
            </summary>
            <param name="buffer">NBuffer to read BERTLVs data from.</param>
            <returns>Pointer to an array of pointers to handles of created BER-TLV data objects.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.BerTlv.LoadMany(Neurotec.IO.NBuffer,System.UInt32)">
            <summary>
            Creates an array of BER-TLV data objects.
            </summary>
            <param name="buffer">NBuffer to read BERTLVs data from.</param>
            <param name="flags">Associated flags.</param>
            <returns>Pointer to an array of pointers to handles of created BER-TLV data objects.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.BerTlv.LoadMany(Neurotec.IO.NBuffer,System.UInt32,System.Int32@)">
            <summary>
            Creates an array of BER-TLV data objects.
            </summary>
            <param name="buffer">NBuffer to read BERTLVs data from.</param>
            <param name="flags">Associated flags.</param>
            <param name="size">NBuffer size.</param>
            <returns></returns>
        </member>
        <member name="P:Neurotec.SmartCards.BerTlv.Owner">
            <summary>
            The owner of ConstructedBerTlv
            </summary>
        </member>
        <member name="P:Neurotec.SmartCards.BerTlv.Tag">
            <summary>Gets the BER-TLV data object tag field.</summary>
            <value>The value of the BER-TLV tag field.</value>
        </member>
        <member name="P:Neurotec.SmartCards.BerTlv.Length">
            <summary>Gets the BER-TLV data object length field.</summary>
            <value>The value of the BER-TLV length field.</value>
        </member>
        <member name="P:Neurotec.SmartCards.BerTlv.MinLengthSize">
            <summary>
            Gets the minimal size of the BER-TLV length field.
            </summary>
            <value>
            The minimal size of the BER-TLV length field.
            </value>                                          
        </member>
        <member name="P:Neurotec.SmartCards.BerTlv.Size">
            <summary>Gets the size of a BER-TLV data object.</summary>
            <value>The value of the BER-TLV size.</value>
        </member>
        <member name="T:Neurotec.SmartCards.ConstructedBerTlv">
            <summary>
            Provides functionality for creation, validation, retrieval
            and update of constructed BER-TLV data objects that are fully
            compliant with BER-TLV encoding rules specified in ISO/IEC
            7816-4:2005.
            </summary>                                                   
        </member>
        <member name="T:Neurotec.SmartCards.ConstructedBerTlv.DataObjectCollection">
            <summary>
            Represents the collection of data objects in constructed
            BER-TLV data object.
            </summary>                                             
        </member>
        <member name="M:Neurotec.SmartCards.ConstructedBerTlv.DataObjectCollection.IndexOf(Neurotec.SmartCards.BerTag)">
            <summary>Retrieves the index within the ConstructedBerTlv.DataObjectCollection of the specified integer.</summary>
            <param name="tag">BerTag object.</param>
            <returns>The zero-based index of the integer in the ConstructedBerTlv.DataObjectCollection.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.ConstructedBerTlv.DataObjectCollection.Contains(Neurotec.SmartCards.BerTag)">
            <summary>Determines whether the specified item is located within the collection.</summary>
            <param name="tag">BerTag object.</param>
            <returns>true if the specified object is in the collection; otherwise, false.</returns>
        </member>
        <member name="P:Neurotec.SmartCards.ConstructedBerTlv.DataObjectCollection.Item(Neurotec.SmartCards.BerTag)">
            <summary>
            Gets the BerTlv object indicated by tag.
            </summary>
            <param name="tag">BerTlv tag.</param>
            <returns>BerTlv object.</returns>
        </member>
        <member name="P:Neurotec.SmartCards.ConstructedBerTlv.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.SmartCards.ConstructedBerTlv.DataObjects">
            <summary>Gets the BER-TLV data object that is encapsulated in a constructed BER-TLV.</summary>
            <value>ConstructedBerTlv.DataObjectCollection object.</value>
        </member>
        <member name="T:Neurotec.SmartCards.Interop.HSCard">
            <summary>
            Represents a safe handle to the smart card.
            </summary>
        </member>
        <member name="M:Neurotec.SmartCards.Interop.HSCard.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of HSCard class.
            </summary>
            <param name="handle">Pointer to the smart card.</param>
            <param name="ownsHandle">Whether the smart card owns the pointer.</param>
        </member>
        <member name="P:Neurotec.SmartCards.Interop.HSCard.IsInvalid">
            <summary>
            NTrue if the handle is invalid; else NFalse.
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.Interop.HSCardContext">
            <summary>
            Represents a safe handle to smart card context.
            </summary>
        </member>
        <member name="M:Neurotec.SmartCards.Interop.HSCardContext.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of HSCardContext class.
            </summary>
            <param name="handle">Handle to the </param>
            <param name="ownsHandle">Whether the class owns the handle.</param>
        </member>
        <member name="P:Neurotec.SmartCards.Interop.HSCardContext.IsInvalid">
            <summary>
            Checks whether the current HSCardContext is invalid.
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.Biometry.SCardBiometricType">
            <summary>
            Specifies the type of biometric data according to ISO/IEC 7816-11:2004 and ISO/IEC 19785-3:2007 standards.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.None">
            <summary>
            No information given.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.MultipleBiometrics">
            <summary>
            Multiple biometrics used.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.FacialFeatures">
            <summary>
            Facial features.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.Voice">
            <summary>
            Voice.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.Fingerprint">
            <summary>
            Fingerprint.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.Iris">
            <summary>
            Iris.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.Retina">
            <summary>
            Retina.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.HandGeometry">
            <summary>
            Hand geometry.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.SignatureDynamics">
            <summary>
            Signature dynamics.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.KeystrokeDynamics">
            <summary>
            Keystroke dynamics.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.LipMovement">
            <summary>
            Lip movement.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.ThermalFaceImage">
            <summary>
            Thermal face image.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.ThermalHandImage">
            <summary>
            Thermal hand image.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.Gait">
            <summary>
            Gait.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.BodyOdor">
            <summary>
            Body odor.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.Dna">
            <summary>
            DNA.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.EarShape">
            <summary>
            Ear shape.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.FingerGeometry">
            <summary>
            Finger geometry.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.PalmPrint">
            <summary>
            Palm print.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.VeinPattern">
            <summary>
            Vein pattern.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricType.FootPrint">
            <summary>
            Foot print.
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.Biometry.SCardBiometricSubtype">
            <summary>
            Specifies the subtype of biometric data according to ISO/IEC 7816-11:2004 and ISO/IEC 19785-3:2007 standards.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricSubtype.None">
            <summary>
            No information given.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricSubtype.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricSubtype.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricSubtype.Thumb">
            <summary>
            Thumb.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricSubtype.PointerFinger">
            <summary>
            Pointer finger.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricSubtype.MiddleFinger">
            <summary>
            Middle finger.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricSubtype.RingFinger">
            <summary>
            Ring finger.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBiometricSubtype.LittleFinger">
            <summary>
            Little finger.
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.Biometry.SCardAuthenticationType">
            <summary>
            Specifies the authentication type according to ISO/IEC 24787-2010 standard.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardAuthenticationType.ComparisonOnCard">
            <summary>
            Comparison on card.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardAuthenticationType.WorkCharingComparisonOnCard">
            <summary>
            Work sharing comparison on-card.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardAuthenticationType.SystemOnCard">
            <summary>
            System-on-card.
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.Biometry.SCardFmrGrade">
            <summary>
            Specifies the FMR (false match rate) according to ISO/IEC 24787-2010 standard.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardFmrGrade.NoIndicationGiven">
            <summary>
            No indication given.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardFmrGrade.FmrGrade1">
            <summary>
            FMR grade 1 (largest).
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardFmrGrade.FmrGrade2">
            <summary>
            FMR grade 2.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardFmrGrade.FmrGrade3">
            <summary>
            FMR grade 3.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardFmrGrade.FmrGrade4">
            <summary>
            FMR grade 4.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardFmrGrade.FmrGrade5">
            <summary>
            FMR grade 5.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardFmrGrade.FmrGrade6">
            <summary>
            FMR grade 6 (smallest).
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.Biometry.SCardChallengeQualifier">
            <summary>
            Specifies challenge qualifiers that may be used in BER-TLV data objects embedded in the ISO/IEC 7816-11:2004 Challenge Template.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardChallengeQualifier.Unspecified">
            <summary>
            No information given.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardChallengeQualifier.Utf8Coding">
            <summary>
            UTF8 coding.
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.Biometry.SCardBitTags">
            <summary>
            Defines BER-TLV tags that can be used in Biometric
            Information Template (BIT).
            </summary>                                        
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitTags.AlgorithmReference">
            <summary>
            The tag field of the algorithm reference primitive BER-TLV
            data object used in the ISO/IEC 7816-11:2004 Biometric
            Information Template (BIT). 
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitTags.ReferenceDataQualifier">
            <summary>
            The tag field of the reference data qualifier primitive
            BER-TLV data object used in the ISO/IEC 7816-11:2004
            Biometric Information Template (BIT). 
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitTags.StandardDataObjects">
            <summary>
            The tag field of the standard data objects constructed
            BER-TLV used in the ISO/IEC 7816-11:2004 Biometric
            Information Template (BIT). 
            </summary>                                            
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitTags.TagAllocationAuthorityDataObjects">
            <summary>
            The tag field of the tag allocation data objects constructed
            BER-TLV used in the ISO/ IEC 7816-11:2004 Biometric
            Information Template (BIT). 
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitTags.BiometricHeaderTemplate">
            <summary>
            The tag field of the CBEFF (ISO/IEC 19785-1:2006) compliant
            Biometric Header Template (BHT) constructed BER-TLV used in
            the ISO/IEC 7816-11:2004 Biometric Information Template
            (BIT). 
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitTags.ConfigurationData">
            <summary>
            The tag field of the configuration data constructed 
            BER-TLV data object used in the ISO/IEC 24787:2010 
            Biometric Information Template (BIT).
            </summary>                                                 
        </member>
        <member name="T:Neurotec.SmartCards.Biometry.SCardBitBhtTags">
            <summary>
            Defines BER-TLV tags that can be used in Biometric Header
            Template (BHT) inside Biometric Information Template (BIT).
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.PatronHeaderVersion">
            <summary>
            The tag field of the CBEFF BIT patron header version primitive BER-TLV
            data object used in the Biometric Header Template (BHT).
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BitIndex">
            <summary>
            The tag field of the CBEFF BIT unique reference identifier (index)
            primitive BER-TLV data object used in the Biometric Header
            Template (BHT).
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BdtBiometricType">
            <summary>
            The tag field of the CBEFF BDT biometric type primitive BER-TLV data
            object used in the Biometric Header Template (BHT).
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BdtBiometricSubtype">
            <summary>
            The tag field of the CBEFF BDT biometric subtype primitive BER-TLV data
            object used in the Biometric Header Template (BHT). The
            biometric subtype BER-TLV must be used in common with the
            biometric type BER-TLV.
            </summary>                                                   
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BdtCreationDate">
            <summary>
            The tag field of the CBEFF BDT creation date primitive BER-TLV data
            object used in the Biometric Header Template (BHT).
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BitCreator">
            <summary>
            The tag field of the CBEFF BIT creator primitive BER-TLV data object
            used in the Biometric Header Template (BHT).
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BdtValidityPeriod">
            <summary>
            The tag field of the CBEFF BDT validity period primitive BER-TLV data
            object used in the Biometric Header Template (BHT).
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BdtProductIdentifier">
            <summary>
            The tag field of the CBEFF BDT Product Identifier (PID) primitive
            BER-TLV data object used in the Biometric Header Template
            (BHT).
            </summary>                                                   
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BdtFormatOwner">
            <summary>
            The tag field of the CBEFF BDT format owner primitive BER-TLV
            data object used in the Biometric Header Template (BHT).
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BdtFormatType">
            <summary>
            The tag field of the CBEFF BDT format type primitive BER-TLV data
            object used in the Biometric Header Template (BHT).
            </summary>                                                   
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BiometricAlgorithmParametersData">
            <summary>
            The tag field of the biometric matching algorithm parameters
            primitive BER-TLV data object used in the Biometric Header
            Template (BHT).
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BiometricAlgorithmParametersTemplate">
            <summary>
            The tag field of the biometric matching algorithm parameters
            constructed BER-TLV data object used in the Biometric Header
            Template (BHT).
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BdtChallengeResponse">
            <summary>
            The tag field of the CBEFF BDT challenge response primitive
            BER-TLV data object used in the Biometric Header Template (BHT).
            The tag is RFU by ISO/IEC JTC 1/SC 37 for TLV-encoded patron format
            in ISO/IEC 19785-3:2007.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BdtIndex">
            <summary>
            The tag field of the CBEFF BDT index primitive 
            BER-TLV data object used in the Biometric Header Template (BHT)
            The tag is RFU by ISO/IEC JTC 1/SC 37 for TLV-encoded patron format
            in ISO/IEC 19785-3:2007.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BdtProcessedLevel">
            <summary>
            The tag field of the CBEFF BDT processed level primitive 
            BER-TLV data object used in the Biometric Header Template (BHT).
            The tag is RFU by ISO/IEC JTC 1/SC 37 for TLV-encoded patron format
            in ISO/IEC 19785-3:2007.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BdtPurpose">
            <summary>
            The tag field of the CBEFF BDT purpose primitive
            BER-TLV data object used in the Biometric Header Template (BHT).
            The tag is RFU by ISO/IEC JTC 1/SC 37 for TLV-encoded patron format
            in ISO/IEC 19785-3:2007.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BdtQuality">
            <summary>
            The tag field of the CBEFF BDT quality primitive
            BER-TLV data object used in the Biometric Header Template (BHT).
            The tag is RFU by ISO/IEC JTC 1/SC 37 for TLV-encoded patron format
            in ISO/IEC 19785-3:2007.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BitCreationDate">
            <summary>
            The tag field of the CBEFF BIT creation date primitive
            BER-TLV data object used in the Biometric Header Template (BHT).
            The tag is RFU by ISO/IEC JTC 1/SC 37 for TLV-encoded patron format
            in ISO/IEC 19785-3:2007.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BitPatronFormatOwner">
            <summary>
            The tag field of the CBEFF BIT patron format owner
            BER-TLV data object used in the Biometric Header Template (BHT).
            The tag is RFU by ISO/IEC JTC 1/SC 37 for TLV-encoded patron format
            in ISO/IEC 19785-3:2007.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BitPatronFormatType">
            <summary>
            The tag field of the CBEFF BIT patron format type primitive
            BER-TLV data object used in the Biometric Header Template (BHT).
            The tag is RFU by ISO/IEC JTC 1/SC 37 for TLV-encoded patron format
            in ISO/IEC 19785-3:2007.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.BitValidityPeriod">
            <summary>
            The tag field of the CBEFF BIT validity period primitive
            BER-TLV data object used in the Biometric Header Template (BHT).
            The tag is RFU by ISO/IEC JTC 1/SC 37 for TLV-encoded patron format
            in ISO/IEC 19785-3:2007.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.CbeffVersion">
            <summary>
            The tag field of the CBEFF version primitive
            BER-TLV data object used in the Biometric Header Template (BHT).
            The tag is RFU by ISO/IEC JTC 1/SC 37 for TLV-encoded patron format
            in ISO/IEC 19785-3:2007.
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.StandardBht">
            <summary>
            The tag field of the Biometric Header Template (BHT)
            constructed BER-TLV data object that corresponds to the
            biometric data with standardized format in the ISO/IEC
            7816-11:2004 Biometric Data Template (BDT). Such BHT is
            encapsulated in the superior layer BHT of the ISO/IEC
            7816-11:2004 Biometric Information Template (BIT).
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtTags.ProprietaryBht">
            <summary>
            The tag field of the Biometric Header Template (BHT)
            constructed BER-TLV data object that corresponds to the
            biometric data with proprietary format in the ISO/IEC
            7816-11:2004 Biometric Data Template (BDT). Such BHT is
            encapsulated in the superior layer BHT of the ISO/IEC
            7816-11:2004 Biometric Information Template (BIT).
            </summary>                                             
        </member>
        <member name="T:Neurotec.SmartCards.Biometry.SCardBdtTags">
            <summary>
            Defines BER-TLV tags that can be used in Biometric Data
            Template (BDT).
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBdtTags.ChallengeData">
            <summary>
            The tag field of the user prompting challenge primitive
            BER-TLV data object used in the ISO/IEC 7816-11:2004
            Biometric Data Template (BDT).
            </summary>                                             
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBdtTags.ChallengeTemplate">
            <summary>
            The tag field of the user prompting challenge constructed
            BER-TLV data object used in the ISO/IEC 7816-11:2004
            Biometric Data Template (BDT).
            </summary>                                               
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBdtTags.StandardBiometricData">
            <summary>
            The tag field of the biometric data with standardized format
            primitive BER-TLV data object used in the ISO/IEC
            7816-11:2004 Biometric Data Template (BDT).
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBdtTags.StandardBiometricDataObjects">
            <summary>
            The tag field of the biometric data with standardized format
            constructed BER-TLV data object used in the ISO/IEC
            7816-11:2004 Biometric Data Template (BDT).
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBdtTags.ProprietaryBiometricData">
            <summary>
            The tag field of the biometric data with proprietary format
            primitive BER-TLV data object used in the ISO/IEC
            7816-11:2004 Biometric Data Template (BDT).
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBdtTags.ProprietaryBiometricDataObjects">
            <summary>
            The tag field of the biometric data with proprietary format
            constructed BER-TLV data object used in the ISO/IEC
            7816-11:2004 Biometric Data Template (BDT).
            </summary>                                                 
        </member>
        <member name="T:Neurotec.SmartCards.Biometry.SCardBdtCTTags">
            <summary>
            Defines BER-TLV tags that can be used in Challenge Template
            (CT) inside Biometric Data Template (BDT).
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBdtCTTags.ChallengeQualifier">
            <summary>
            The tag field of the challenge qualifier primitive BER-TLV
            data object used in the ISO/IEC 7816-11:2004 Challenge
            Template.
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBdtCTTags.Challenge">
            <summary>
            The tag field of the challenge primitive BER-TLV data object
            used in the ISO/IEC 7816-11:2004 Challenge Template.
            </summary>                                                  
        </member>
        <member name="T:Neurotec.SmartCards.Biometry.SCardBitCDTags">
            <summary>
            Defines BER-TLV tags that can be used in Configuration Data
            (CD) inside Biometric Information Template (BIT).
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitCDTags.MaximumVerificationDataSize">
            <summary>
            The tag field of the maximum size of biometric verification
            data primitive BER-TLV data object used in the
            ISO/IEC 24787:2010 Configuration Data (CD).
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitCDTags.MaximumReferenceDataSize">
            <summary>
            The tag field of the maximum size of biometric reference 
            data primitive BER-TLV data object used in the
            ISO/IEC 24787:2010 Configuration Data (CD).
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitCDTags.NumberOfBiometricTemplates">
            <summary>
            The tag field of the number of biometric templates
            primitive BER-TLV data object used in the
            ISO/IEC 24787:2010 Configuration Data (CD).
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitCDTags.ReenrollmentPossibility">
            <summary>
            The tag field of the possibility of re-enrollment
            primitive BER-TLV data object used in the
            ISO/IEC 24787:2010 Configuration Data (CD).
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitCDTags.MinimumVerificationDataQuality">
            <summary>
            The tag field of minimum verification data quality
            primitive BER-TLV data object used in the
            ISO/IEC 24787:2010 Configuration Data (CD).
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitCDTags.InitialRetryCounter">
            <summary>
            The tag field of initial value of the retry counter
            primitive BER-TLV data object used in the
            ISO/IEC 24787:2010 Configuration Data (CD).
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitCDTags.InternalQualityRestrictions">
            <summary>
            The tag field of internal quality restrictions
            primitive BER-TLV data object used in the
            ISO/IEC 24787:2010 Configuration Data (CD).
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitCDTags.PropietaryData">
            <summary>
            The tag field of proprietary data primitive BER-TLV data 
            object used in the ISO/IEC 24787:2010 Configuration Data (CD).
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitCDTags.BiometricAuthenticationTypeAndFmrGrade">
            <summary>
            The tag field of biometric authentication type(s) and
            performance of the card primitive BER-TLV data object
            used in the ISO/IEC 24787:2010 Configuration Data (CD).
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitCDTags.AlgorithmIdentifier">
            <summary>
            The tag field of algorithm identifier constructed 
            BER-TLV data object used in the ISO/IEC 24878:2010
            Configuration Data (CD). Reserved for future.
            </summary>                                                
        </member>
        <member name="T:Neurotec.SmartCards.Biometry.SCardBitBhtBaptTags">
            <summary>
            Defines BER-TLV tags that can be used in Biometric algorithm parameters
            template (BAPT) inside Biometric Header Template (BHT).
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtBaptTags.FeatureCountOrLength">
            <summary>
            The tag field for storing information either regarding minimal 
            and maximal length or number of biometric format specific 
            features (e.g., minimum and maximum number of minutiae for 
            fingerprint templates) in ISO/IEC 7816-11:2004 Biometric algorithm 
            parameters (BAP) template in Biometric header  template (BHT) of 
            Biometric information template (BIT).
            </summary>                                                 
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtBaptTags.FeatureOrder">
            <summary>
            The tag field for storing information regarding ordering of biometric 
            format specific features (e.g., FmcrMinutiaOrder value for fingerprint templates) 
            in ISO/IEC 7816-11:2004 Biometric algorithm parameters (BAP) template
            in Biometric header template (BHT) of Biometric information template (BIT).
            </summary>                                                   
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtBaptTags.ExtendedFeatureHandlingIndicator">
            <summary>
            The tag field for storing biometric format specific extended 
            features handling indicator value (e.g., FmcrFeatureHandling for fingerprint 
            templates) in ISO/IEC 7816-11:2004 Biometric algorithm parameters (BAP) template in
            Biometric header template (BHT) of Biometric information template (BIT).
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtBaptTags.Alignment">
            <summary>
            The tag field for storing alignment information in ISO/IEC 7816-11:2004, 
            ISO/IEC 24787:2010 Biometric algorithm parameters (BAP) template in
            Biometric header template BHT) in Biometric information template (BIT).
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtBaptTags.MinimumVerificationDataQuality">
            <summary>
            The tag field for storing minimum verification data quality 
            in ISO/IEC 7816-11:2004, ISO/IEC 24787:2010 Biometric algorithm 
            parameters (BAP) template in Biometric header template (BHT)
            of Biometric information template (BIT).
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtBaptTags.BiometricAuthenticationTypeAndFmrGrade">
            <summary>
            The tag field for storing biometric authentication type and
            algorithm strength in ISO/IEC 7816-11:2004, ISO/IEC 24787:2010 
            Biometric algorithm parameters (BAP) template in Biometric header template (BHT)
            of Biometric information template (BIT).
            </summary>                                                  
        </member>
        <member name="F:Neurotec.SmartCards.Biometry.SCardBitBhtBaptTags.MaximumResponseTime">
            <summary>
            The tag field for storing maximum response time in ISO/IEC 7816-11:2004,
            ISO/IEC 24787:2010Biometric algorithm parameters (BAP) template in
            Biometric header template (BHT) of Biometric information template (BIT).
            </summary>                                                  
        </member>
        <member name="T:Neurotec.SmartCards.Biometry.NSmartCardsBiometry">
            <summary>
            Specifies ISO/IEC 7816-11:2004 and ISO/IEC 19785-3:2007 compliant types and subtypes of biometric
            data, challenge qualifiers also ISO/IEC 7816-11:2004 and ISO/IEC 7816-6:2004 compliant tag fields of
            interindustry BER-TLV data objects (BerTlv) used in ISO/IEC 7816-11:2004 Biometric Information
            Templates (BITs) and Biometric Data Templates (BDTs).
            </summary>                                                                                          
        </member>
        <member name="P:Neurotec.SmartCards.Biometry.NSmartCardsBiometry.SCardBiometricTypeNativeType">
            <summary>
            Defines the native type of the Smart card biometric type.
            </summary>
        </member>
        <member name="P:Neurotec.SmartCards.Biometry.NSmartCardsBiometry.SCardBiometricSubtypeNativeType">
            <summary>
            Defines the native type of the Smart card biometric subtype.
            </summary>
        </member>
        <member name="P:Neurotec.SmartCards.Biometry.NSmartCardsBiometry.SCardChallengeQualifierNativeType">
            <summary>
            Defines the native type of the Smart card challenge qualifier.
            </summary>
        </member>
        <member name="P:Neurotec.SmartCards.Biometry.NSmartCardsBiometry.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.SmartCards.Biometry.NSmartCardsBiometry.AuthenticationTypeIsValid(Neurotec.SmartCards.Biometry.SCardAuthenticationType)">
            <summary>
            Checks whether an authentication type value is valid, according to ISO/IEC 24787:2010 standard.
            </summary>
            <param name="authType">authentication type value.</param>
            <returns>NTrue if is valid; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.Biometry.NSmartCardsBiometry.FmrGradeIsValid(Neurotec.SmartCards.Biometry.SCardFmrGrade)">
            <summary>
            Checks whether an False Match Rate (FMR) grade value is valid, according to ISO/IEC 24787:2010 standard.
            </summary>
            <param name="fmrGrade">FMR grade byte value.</param>
            <returns>NTrue if is valid; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.Biometry.NSmartCardsBiometry.AuthenticationTypeAndFmrGradeByteIsValid(System.Byte)">
            <summary>
            Checks whether an authentication type and False Match Rate (FMR) grade merged byte value is valid, according to ISO/IEC 24787:2010 standard.
            </summary>
            <param name="authTypeAndFmrGradeByte">authentication type and FMR grade byte value.</param>
            <returns>NTrue if is valid; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.Biometry.NSmartCardsBiometry.MakeAuthenticationTypeAndFmrGrade(Neurotec.SmartCards.Biometry.SCardAuthenticationType,Neurotec.SmartCards.Biometry.SCardFmrGrade)">
            <summary>
            Makes an authentication type and False Match Rate (FMR) grade byte value according to ISO/IEC 24787-2010 standard.
            </summary>
            <param name="authType">authentication type.</param>
            <param name="fmrGrade">FMR grade.</param>
            <returns>byte representing authentication type and FMR grade.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.Biometry.NSmartCardsBiometry.GetAuthenticationType(System.Byte)">
            <summary>
            Gets authentication type from ISO/IEC 24787:2010 compliant authentication type and False Match Rate (FMR) grade byte value.
            </summary>
            <param name="authTypeAndFmrGradeByte">authentication type and FMR grade byte value.</param>
            <returns>SCardAuthenticationType representing authentication type.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.Biometry.NSmartCardsBiometry.GetFmrGrade(System.Byte)">
            <summary>
            Gets FMR grade from ISO/IEC 24787:2010 compliant authentication type and False Match Rate (FMR) grade byte value.
            </summary>
            <param name="authTypeAndFmrGradeByte">authentication type and FMR grade.</param>
            <returns>SCardFmrGrade representing FMR grade.</returns>
        </member>
        <member name="P:Neurotec.SmartCards.NSmartCardsCommands.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.SCardTags">
            <summary>
            Defines BER-TLV tags that can be used during communication
            with a smart card.
            </summary>                                                
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CountryCodeAndNationalData">
            Indication of a country followed by national data and
            optional national data.                              
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.IssuerIdentificationNumber">
            Data element for identifying the card issuer (coding and
            registration defined in ISO/IEC 7812-1[8]), possibly followed
            by more data.                                                
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardServiceData">
            Indication of methods available in the card for supporting
            services.                                                 
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.InitialAccessData">
            Indication of a command-to-perform for retrieving the initial
            data string (coding defined in ISO/IEC 7816-4).              
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardIssuersData">
            Proprietary.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.PreIssuingData">
            Proprietary.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardCapabilities">
            Data element fixing card behaviors.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.StatusInformation">
            Information on card life cycle status and processing status.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.ApplicationFamilyIdentifier">
            Application Family Identifier (AFI). Designation of several
            application areas to enable global interoperability (see
            ISO/IEC 14443).                                            
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.ExtendedHeaderList">
            Data element for indirectly referencing data elements (coding
            defined in ISO/IEC 7816-4).                                  
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.ApplicationIdentifier">
            Data element identifying an application in the card.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.ApplicationLabel">
            Data element for use at the man-machine interface.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.FileReference">
            Reference to a file e.g. a path (coding defined in ISO/IEC
            7816-4).                                                  
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CommandToPerform">
            Command APDU.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.DiscretionaryData">
            Data element not defined in ISO/IEC 7816.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.OffsetDataObject">
            For use with commands using an odd INS code.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.ApplicationTrack1">
            Structure defined in ISO/IEC 7813 and coding in ISO 8583,
            including field separators but excluding start and end
            sentinels and longitudinal check characters as defined
            therein.                                                 
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.ApplicationTrack2">
            Structure defined in ISO/IEC 7813 and coding in ISO 8583,
            including field separators but excluding start and end
            sentinels and longitudinal check characters as defined
            therein.                                                 
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.ApplicationTrack3">
            Structure defined in ISO 4909 and coding in ISO 8583,
            including field separators but excluding start and end
            sentinels and longitudinal check characters as defined
            therein.                                              
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardExpirationDate">
            Date after which the card expires.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.PrimaryAccountNumber">
            Number identifying a customer account or card.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.Name">
            Name of an individual.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.TagList">
            Concatenation of tag fields without delimitation.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.HeaderList">
            Concatenation of pairs of tag fields and length fields
            without delimitation (as defined in ISO/IEC 7816-4).  
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.LoginDataProprietary">
            Proprietary information intended for connecting the interface
            device to a remote host, a remote server or an application
            within these devices.                                        
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardholderName">
            Name of the card holder.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardTrack1">
            Structure defined in ISO/IEC 7813[9] and coding in ISO
            8583[10], including field separators but excluding start and
            end sentinels and longitudinal check characters as defined
            therein. The data content is the same as track 1 of the
            magnetic stripe, including discretionary data.              
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardTrack2">
            Structure defined in ISO/IEC 7813[9] and coding in ISO
            8583[10], including field separators but excluding start and
            end sentinels and longitudinal check characters as defined
            therein. The data content is the same as track 2 of the
            magnetic stripe, including discretionary data.              
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardTrack3">
            Structure defined in ISO 4909 and coding in ISO 8583,
            including field separators but excluding start and end
            sentinels and longitudinal check characters as defined
            therein. The data content is the same as track 3 of the
            magnetic stripe, including discretionary data.         
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.ApplicationExpirationDate">
            Date after which an application expires, under the
            responsibility of the application provider.       
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.ApplicationEffectiveDate">
            Date from which the application can be used, under the
            responsibility of the application provider.           
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardEffectiveDate">
            Date from which the card can be used, under the
            responsibility of the card issuer.             
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.InterchangeControl">
            Indication to use in association with a country code to
            indicate whether international interchange is permitted on a
            card.                                                       
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CountryCode">
            Indication of a country.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.InterchangeProfile">
            Data element describing capabilities available in the card to
            perform an interchange transaction.                          
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CurrencyCode">
            Code for the representation of currencies and funds.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.DateOfBirth">
            Date of birth of related individual.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardholderNationality">
            Nationality of the cardholder.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.LanguagePreferences">
            Indication, in order of preference, of up to four languages
            for the cardholder.                                        
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardholderBiometricData">
            Biometric data related to the cardholder.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.PinUsagePolicy">
            Indication whether PIN entry is required and under what
            circumstances.                                         
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.ServiceCode">
            Identification of geographic / service availability.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.TransactionCounter">
            Counter incremented under the control of the application in
            the card after each transaction.                           
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.TransactionDate">
            Used to recognize the date and time of the last transaction.
            Length is 4 for YDDD and 10 for full field.                 
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardSequenceNumber">
            Number distinguishing between separate cards with the same
            primary account number.                                   
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.Sex">
            Gender of an individual.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CurrencyExponent">
            Number by which an amount of the currency indicated in the
            card shall be multiplied.                                 
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.StaticInternalAuthentication">
            Data element containing a digital signature value which may
            be used either alone or in conjunction with the tags
            StaticInternalAuthenticationFirstAssociatedData and
            StaticInternalAuthenticationSecondAssociatedData.          
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.StaticInternalAuthenticationFirstAssociatedData">
            Public key certificate data element to use either alone or in
            conjunction with the tag
            StaticInternalAuthenticationSecondAssociatedData, to derive a
            public key value.                                            
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.StaticInternalAuthenticationSecondAssociatedData">
            Data auxiliary to the public key certificate, tag
            StaticInternalAuthenticationFirstAssociatedData, used to
            derive the notarized public key.                        
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.DynamicInternalAuthentication">
            Composite data element used for identifying the algorithm and
            the key to use in the INTERNAL AUTHENTICATE command.         
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.DynamicExternalAuthentication">
            Composite data element used for identifying the algorithm and
            the key to use in the EXTERNAL AUTHENTICATE command.         
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.DynamicMutualAuthentication">
            Composite data element used for identifying the algorithm and
            the key to use in the mutual authentication process.         
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardholderPortraitImage">
            Encoded image data, used for the cardholder portrait image.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.ElementList">
            Sequence of elements and related information, without
            identifiers (to be used only within a wrapper).      
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.Address">
            Address of an individual.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardholderHandwrittenSignatureImage">
            Image of the cardholder's handwritten signature.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.ApplicationImage">
            Icon or logo associated with an application.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.DisplayMessage">
            Data element containing a message to display.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.Timer">
            Data element specifying the maximal time, in tenths of a
            second, for performing or executing a process.          
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.MessageReference">
            Data element specifying the reference of a message.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardholderPrivateKey">
            Data element containing the cardholder's private key for
            digital signature functionality using asymmetric mechanisms.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardholderPublicKey">
            Data element containing the cardholder's public key data
            elements for digital signature functionality using asymmetric
            mechanisms.                                                  
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.PublicKeyOfCertificationAuthority">
            Data element containing the certification authority's public
            key for digital signature functionality used to verify
            certificates.                                               
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.Deprecated">
            Deprecated in ISO/IEC 7816.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CertificateHolderAuthorization">
            A certificate holder authorization (e.g. a role identifier)
            may be contained in a data element or data object with tag.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.IntegratedCircuitManufacturerIdentifier">
            Indication of a manufacturer of integrated circuits.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CertificateContent">
            Data element containing the content of a certificate.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.UniformResourceLocator">
            Uniform resource locator.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.AnswerToReset">
            Indicates operating characteristics of the card.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.HistoricalBytes">
            Used to indicate operating characteristics of the card.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.InternationalBankAccountNumber">
            International Bank Account Number (IBAN). A number used
            internationally to uniquely identify the account of a
            customer at a financial institution (see ISO 13616).   
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.BankIdentifierCode">
            A universal Bank Identifier Code for use in automated
            processing in banking and related financial environments (see
            ISO 9362).                                                   
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CountryCodeAlpha2Format">
            Country Code (alpha 2 format). Indication of a country (see
            ISO 3166-1).                                               
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CountryCodeAlpha3Format">
            Country Code (alpha 3 format). Indication of a country (see
            ISO 3166-1).                                               
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.AccountType">
            Indicates the type of account selected by the cardholder for
            the transaction (see EMV for coding).                       
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.DigitalSignature">
            Data element containing a digital signature (asymmetric or
            symmetric algorithm).                                     
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.ApplicationTemplate">
            Template identifying an application in the card.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.FcpTemplate">
            Template for nesting file control parameters.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.Wrapper">
            Template for indirect referencing and retrieval of data
            elements.                                              
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.FmdTemplate">
            Template for nesting file management data.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardholderRelatedData">
            Template nesting data related to the cardholder.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardData">
            Template nesting data related to the card.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.AuthenticationData">
            Template nesting authentication data and parameters
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.SpecialUserRequirements">
            Template containing at least a tag allocation authority (tag
            '06', '41', '42' or '4F') and a data object by which this
            authority indicates the user requirements, possibly related
            to a disability.                                            
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.LoginTemplate">
            Template conveying data intended for connecting the interface
            device to a remote server or an application within such
            devices (defined in ISO/IEC 7816-4).                         
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.QualifiedName">
            Template nesting the name of an individual and related
            information, e.g., sex, date of birth etc.            
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardholderImageTemplate">
            Cardholder related images stored within the card.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.ApplicationImageTemplate">
            Template nesting at least an application image.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.ApplicationRelatedData">
            Template nesting parameters of an application.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.FciTemplate">
            Template for nesting file control parameters and file
            management data.                                     
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.NonInterindustryDataObjects70">
            Templates nesting non-interindustry data objects.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.NonInterindustryDataObjects71">
            Templates nesting non-interindustry data objects.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.NonInterindustryDataObjects72">
            Templates nesting non-interindustry data objects.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.DiscretionaryDataObjects">
            Concatenation of data objects not defined in ISO/IEC 7816.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.NonInterindustryDataObjects74">
            Templates nesting non-interindustry data objects.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.NonInterindustryDataObjects75">
            Templates nesting non-interindustry data objects.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.NonInterindustryDataObjects76">
            Templates nesting non-interindustry data objects.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.NonInterindustryDataObjects77">
            Templates nesting non-interindustry data objects.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CompatibleTagAllocationAuthority">
            Template used to identify a compatible tag allocation scheme
            and the authority responsible for the scheme.               
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CoexistentTagAllocationAuthority">
            Template used to identify a coexistent tag allocation scheme
            and the authority responsible for the scheme.               
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.SecuritySupportTemplate">
            Template for encapsulating counters and auxiliary data.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.SecurityEnvironmentTemplate">
            Template nesting components of a security environment.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.DynamicAuthenticationTemplate">
            Template used in the command and response data fields of the
            GENERAL AUTHENTICATE command (defined in ISO/IEC 7816-4).   
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.SecureMessagingTemplate">
            Template nesting secure messaging data objects.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.InterindustryDataObjects">
            Template nesting interindustry data objects.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.DisplayControl">
            Template used to control data displayed at the terminal.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardholderCertificate">
            Template nesting the cardholder public key, further
            information, signature of certification authority. 
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardholderRequirementsIncludedFeatures">
            Data element containing a cardholder's requirements for
            included features e.g. cardholder requires audio assistance
            from an ATM.                                               
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardholderRequirementsExcludedFeatures">
            Data element containing cardholder's requirements for
            excluded features e.g. cardholder is not able to use
            fingerprint verification.                            
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.BiometricDataTemplate">
            Template nesting biometric reference data objects.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.DigitalSignatureBlock">
            Template nesting digital signature related data objects.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardholderPrivateKeyTemplate">
            Template nesting private key related data objects.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CardholderPublicKeyTemplate">
            Template containing the cardholder's public key data objects
            for digital signature functionality using asymmetric
            mechanisms.                                                 
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.CertificateContentTemplate">
            Template for nesting certificate content data objects.
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.BiometricInformationTemplate">
            Template nesting biometric information data objects
        </member>
        <member name="F:Neurotec.SmartCards.SCardTags.BiometricInformationGroupTemplate">
            Template used for nesting biometric information templates
        </member>
        <member name="T:Neurotec.SmartCards.NSmartCardsDataElements">
            <summary>
            Specifies tags of ISO/IEC 7816-6:2004 interindustry data elements used for interchange.
            </summary>                                                                             
        </member>
        <member name="P:Neurotec.SmartCards.NSmartCardsDataElements.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.PrimitiveBerTlv">
            <summary>
            Provides functionality for creation, validation, retrieval
            and update of primitive BER-TLV data objects that are fully
            compliant with BER-TLV encoding rules specified in ISO/IEC
            7816-4:2005.
            </summary>                                                 
        </member>
        <member name="P:Neurotec.SmartCards.PrimitiveBerTlv.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.SmartCards.PrimitiveBerTlv.GetValueAsBoolean">
            <summary>Retrieves the value field of a primitive BER-TLV as Boolean.</summary>
            <returns>The field value of a primitive BER-TLV.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.PrimitiveBerTlv.GetValueAsInteger">
            <summary>Retrieves the value field of a primitive BER-TLV as integer. Can retrieve from 1 to 4 byte value.</summary>
            <returns>The field value of a primitive BER-TLV.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.PrimitiveBerTlv.GetValueAsByte">
            <summary>Retrieves the value field of a primitive BER-TLV as Byte.</summary>
            <returns>The field value of a primitive BER-TLV.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.PrimitiveBerTlv.GetValueAsSByte">
            <summary>Retrieves the value field of a primitive BER-TLV as SByte.</summary>
            <returns>The field value of a primitive BER-TLV.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.PrimitiveBerTlv.GetValueAsUInt16">
            <summary>Retrieves the value field of a primitive BER-TLV as UInt16.</summary>
            <returns>The field value of a primitive BER-TLV.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.PrimitiveBerTlv.GetValueAsInt16">
            <summary>Retrieves the value field of a primitive BER-TLV as an Int16.</summary>
            <returns>The field value of a primitive BER-TLV.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.PrimitiveBerTlv.GetValueAsUInt32">
            <summary>Retrieves the value field of a primitive BER-TLV as UInt32.</summary>
            <returns>The field value of a primitive BER-TLV.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.PrimitiveBerTlv.GetValueAsInt32">
            <summary>Retrieves the value field of a primitive BER-TLV as Int32.</summary>
            <returns>The field value of a primitive BER-TLV.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.PrimitiveBerTlv.SetValue(System.Boolean)">
            <summary>Sets the value field of a primitive BER-TLV as a Boolean and updates the length field and the size of a BER-TLV respectively.</summary>
            <param name="value">The primitive BER-TLV value field.</param>
        </member>
        <member name="M:Neurotec.SmartCards.PrimitiveBerTlv.SetValueAsInteger(System.Int32)">
            <summary>Sets the value field of a primitive BER-TLV as integer. Can set from 1 to 4 byte value.</summary>
            <param name="value">The field value of a primitive BER-TLV.</param>
        </member>
        <member name="M:Neurotec.SmartCards.PrimitiveBerTlv.SetValue(System.Byte)">
            <summary>Sets the value field of a primitive BER-TLV as a Byte and updates the length field and the size of a BER-TLV respectively.</summary>
            <param name="value">The primitive BER-TLV value field.</param>
        </member>
        <member name="M:Neurotec.SmartCards.PrimitiveBerTlv.SetValue(System.SByte)">
            <summary>Sets the value field of a primitive BER-TLV as a SByte and updates the length field and the size of a BER-TLV respectively.</summary>
            <param name="value">The primitive BER-TLV value field.</param>
        </member>
        <member name="M:Neurotec.SmartCards.PrimitiveBerTlv.SetValue(System.UInt16)">
            <summary>Sets the value field of a primitive BER-TLV as a UInt16 and updates the length field and the size of a BER-TLV respectively.</summary>
            <param name="value">The primitive BER-TLV value field.</param>
        </member>
        <member name="M:Neurotec.SmartCards.PrimitiveBerTlv.SetValue(System.Int16)">
            <summary>Sets the value field of a primitive BER-TLV as a Int16 and updates the length field and the size of a BER-TLV respectively.</summary>
            <param name="value">The primitive BER-TLV value field.</param>
        </member>
        <member name="M:Neurotec.SmartCards.PrimitiveBerTlv.SetValue(System.UInt32)">
            <summary>Sets the value field of a primitive BER-TLV as a UInt32 and updates the length field and the size of a BER-TLV respectively.</summary>
            <param name="value">The primitive BER-TLV value field.</param>
        </member>
        <member name="M:Neurotec.SmartCards.PrimitiveBerTlv.SetValue(System.Int32)">
            <summary>Sets the value field of a primitive BER-TLV as a Int32 and updates the length field and the size of a BER-TLV respectively.</summary>
            <param name="value">The primitive BER-TLV value field.</param>
        </member>
        <member name="P:Neurotec.SmartCards.PrimitiveBerTlv.Value">
            <summary>
            Gets or sets the value field of a primitive BER-TLV as a NBuffer.
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.SCardShare">
            <summary>Specifies sharing of the connection between applications.</summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardShare.Exclusive">
            <summary>
            This application is not willing to share this card with other applications.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardShare.Shared">
            <summary>
            This application is willing to share this card with other applications.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardShare.Direct">
            <summary>
            This application demands direct control of the reader, so it is not available to other applications.
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.SCardAction">
            <summary>Specifies action to take on the card on connection close.</summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardAction.Leave">
            <summary>
            Don't do anything special on close.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardAction.Reset">
            <summary>
            Reset the card on close.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardAction.Unpower">
            <summary>
            Power down the card on close.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardAction.Eject">
            <summary>
            Eject the card on close.
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.SCardProtocols">
            <summary>Specifies smart card protocol.</summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardProtocols.Undefined">
            <summary>
            There is no active protocol.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardProtocols.T0">
            <summary>
            T=0 is the active protocol.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardProtocols.T1">
            <summary>
            T=1 is the active protocol.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardProtocols.Raw">
            <summary>
            Raw is the active protocol.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardProtocols.Tx">
            <summary>
            This is the mask of ISO defined transmission protocols.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardProtocols.Default">
            <summary>
            Use the default transmission parameters / card clock freq.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardProtocols.Optimal">
            <summary>
            Use optimal transmission parameters / card clock freq. Since using the optimal parameters is the default case no bit is defined to be 1.
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.SCardState">
            <summary>Specifies smart card reader state.</summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardState.Unknown">
            <summary>
            This value implies the driver is unaware of the current state of the reader.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardState.Absent">
            <summary>
            This value implies there is no card in the reader.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardState.Present">
            <summary>
            This value implies there is a card is present in the reader, but that it has not been moved into position for use.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardState.Swallowed">
            <summary>
            This value implies there is a card in the reader in position for use. The card is not powered.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardState.Powered">
            <summary>
            This value implies there is power is being provided to the card, but the Reader Driver is unaware of the mode of the card.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardState.Negotiable">
            <summary>
            This value implies the card has been reset and is awaiting PTS negotiation.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardState.Specific">
            <summary>
            This value implies the card has been reset and specific communication protocols have been established.
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.SCardIORequest">
            <summary>
            Manages SmartCard input/output requests.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardIORequest.T0Pci">
            T0 protocol control information.
        </member>
        <member name="F:Neurotec.SmartCards.SCardIORequest.T1Pci">
            T1 protocol control information.
        </member>
        <member name="F:Neurotec.SmartCards.SCardIORequest.RawPci">
            Raw protocol control information.
        </member>
        <member name="M:Neurotec.SmartCards.SCardIORequest.#ctor(Neurotec.SmartCards.SCardProtocols,System.Int32)">
            <summary>
            Initializes a new instance of SCardIORequest class.
            </summary>
            <param name="protocol">Smart card protocol.</param>
            <param name="pciLength">Length of protocol control information.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardIORequest.#ctor(Neurotec.IO.NBuffer)">
            <summary>
            Initializes a new instance of SCardIORequest class.
            </summary>
            <param name="pci">Protocol control information.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardIORequest.GetPci">
            <summary>
            Gets the protocol control information.
            </summary>
            <returns>Protocol control information.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCardIORequest.GetPciData">
            <summary>
            Gets protocol control information data.
            </summary>
            <returns>Protocol control information data.</returns>
        </member>
        <member name="P:Neurotec.SmartCards.SCardIORequest.Protocol">
            <summary>Gets one of SCardProtocols value.</summary>
            <value>One of SCardProtocols value.</value>
        </member>
        <member name="P:Neurotec.SmartCards.SCardIORequest.PciLength">
            <summary>The length of SCardIORequest.</summary>
            <value></value>
        </member>
        <member name="T:Neurotec.SmartCards.SCard">
            <summary>
            Represents the smart card.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AtrLength">
            Maximum attribute length.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.PAPowerDown">
            Power down the card.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.PAColdReset">
            Cycle power and reset the card.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.PAWarmReset">
            Force a reset on the card.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.T0HeaderLength">
            T0 header length.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.T0CmdLength">
            T0 command length.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.T1PrologueLength">
            T1 prologue length.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.T1EpilogueLength">
            T1 epilogue length.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.T1MaxIfs">
            T1 maximum IFS.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.ClassVendorInfo">
            Vendor information definitions.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.ClassCommunications">
            Communication definitions.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.ClassProtocol">
            Protocol definitions.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.ClassPowerMgmt">
            Power Management definitions.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.ClassSecurity">
            Security Assurance definitions.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.ClassMechanical">
            Mechanical characteristic definitions.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.ClassVendorDefined">
            Vendor specific definitions.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.ClassIfdProtocol">
            Interface Device Protocol options.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.ClassIccState">
            ICC State specific definitions.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.ClassPerf">
            Performance counters.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.ClassSystem">
            System-specific definitions.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.CtlPower">
            Smart card power.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.CtlGetAttribute">
            Gets smart card attribute.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.CtlSetAttribute">
            Sets smart card attribute.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.CtlConfiscate">
            Confiscates the smart card.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.CtlTransmit">
            Transmits the smart card.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.CtlEject">
            Ejects the smart card.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.CtlSwallow">
            Swallows the smart card.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.CtlIsPresent">
            Whether the smart card is present.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.CtlIsAbsent">
            Whether the smart card is absent.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.CtlSetProtocol">
            Sets the smart card protocol.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.CtlGetState">
            Gets the smart card state.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.CtlGetLastError">
            Gets the last error.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.CtlGetPerfCntr">
            Gets the performance center.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrVendorName">
            Vendor name.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrVendorIfdType">
            Vendor-supplied interface device type (model designation of reader).
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrVendorIfdVersion">
            Vendor-supplied interface device version (DWORD in the form 0xMMmmbbbb where MM = major version, mm = minor version, and bbbb = build number).
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrVendorIfdSerialNo">
            Vendor-supplied interface device serial number.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrChannelId">
             DWORD encoded as 0xDDDDCCCC, where DDDD = data channel type and CCCC = channel number.
             
             The following encodings are defined for DDDD:
             	0x01 serial I/O; CCCC is a port number.
            .	0x0x04 PS/2 keyboard port; CCCC is zero.02 parallel I/O; CCCC is a port number.
            .	0x08 SCSI; CCCC is SCSI ID number.
            .	0x10 IDE; CCCC is device number.
            .	0x20 USB; CCCC is device number.
            .	0xFy vendor-defined interface with y in the range zero through 15; CCCC is vendor defined.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrProtocolTypes">
            DWORD encoded as 0x0rrrpppp where rrr is RFU and should be 0x000. pppp encodes the supported protocol types. A '1' in a given bit position indicates support for the associated ISO protocol, so if bits zero and one are set, both T=0 and T=1 protocols are supported.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrDefaultClk">
            Default clock rate.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrMaxClk">
            Maximum clock rate.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrDefaultDataRate">
            Default data rate.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrMaxDataRate">
            Maximum data rate.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrMaxIfsd">
            Maximum bytes for information file size device.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrPowerMgmtSupport">
            Zero if device does not support power down while smart card is inserted. Nonzero otherwise.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrUserToCardAuthDevice">
            User-to-card authentication device.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrUserAuthInputDevice">
            User authentication input device.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrCharacteristics">
            DWORD indicating which mechanical characteristics are supported. If zero, no special characteristics are supported.
            Note that multiple bits can be set: 
                0x00000001 Card swallowing mechanism.
                0x00000002 Card ejection mechanism.
                0x00000004 Card capture mechanism.
            All other values are reserved for future use (RFU).
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrCurrentProtocolType">
            DWORD encoded as 0x0rrrpppp where rrr is RFU and should be 0x000. pppp encodes the current protocol type. Whichever bit has been set indicates which ISO protocol is currently in use.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrCurrentClk">
            Current clock rate.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrCurrentF">
            Clock conversion factor.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrCurrentD">
            Bit rate conversion factor.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrCurrentN">
            Current guard time.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrCurrentW">
            Current work waiting time.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrCurrentIfsc">
            Current byte size for information field size card.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrCurrentIfsd">
            Current byte size for information field size device.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrCurrentBwt">
            Current block waiting time.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrCurrentCwt">
            Current character waiting time.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrCurrentEbcEncoding">
            Current error block control encoding.
                0 = longitudinal redundancy check (LRC)
                1 = cyclical redundancy check (CRC)
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrExtendedBwt">
            Extended block waiting time.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrIccPresence">
            Single byte indicating smart card presence:
                0 = not present
                1 = card present but not swallowed (applies only if reader supports smart card swallowing)
                2 = card present (and swallowed if reader supports smart card swallowing)
                4 = card confiscated.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrIccInterfaceStatus">
            Single byte. Zero if smart card electrical contact is not active; nonzero if contact is active.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrCurrentIOState">
            The current input/output state.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrAtrString">
            Answer to reset (ATR) string.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrIccTypePerAtr">
            Single byte indicating smart card type:
                0 = unknown type
                1 = 7816 Asynchronous
                2 = 7816 Synchronous
            Other values RFU.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrEscReset">
            Resets IStiUSD::Escape method.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrEscCancel">
            Cancels IStiUSD::Escape method.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrEscAuthRequest">
            IStiUSD::Escape method requests authentication.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrMaxInput">
            Maximum input value.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrDeviceUnit">
            Instance of this vendor's reader attached to the computer.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrDeviceInUse">
            Reserved for future use.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrDeviceFriendlyName">
            Reader's display name.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrDeviceSystemName">
            Reader's system name.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.AttrSupressT1IfsRequest">
            Whether to suppress T1 IFS request.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.PerfNumTransmissions">
            Number of transmissions.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.PerfBytesTransmitted">
            Number of bytes transmitted.
        </member>
        <member name="F:Neurotec.SmartCards.SCard.PerfTransmissionTime">
            Transmissions time.
        </member>
        <member name="M:Neurotec.SmartCards.SCard.GetCtlCode(System.Int32)">
            <summary>
            Gets the control code for the specified function.
            </summary>
            <param name="function">The specified function.</param>
            <returns>The control code.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.GetAttrValue(System.Int32,System.Int32)">
            <summary>
            Gets the value of the specified attribute.
            </summary>
            <param name="cls">Attribute class.</param>
            <param name="tag">Attribute tag.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of SCard class.
            </summary>
            <param name="handle">The handle to the instance.</param>
            <param name="ownsHandle">NTrue if the instance owns the handle; else NFalse.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.#ctor(Neurotec.SmartCards.Interop.HSCard)">
            <summary>
            Initializes a new instance of SCard class.
            </summary>
            <param name="handle">The handle to the instance.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.Reconnect(Neurotec.SmartCards.SCardShare,Neurotec.SmartCards.SCardProtocols,Neurotec.SmartCards.SCardAction)">
            <summary>
            Reconnects the smart card.
            </summary>
            <param name="shareMode">Sharing mode.</param>
            <param name="preferredProtocols">Preferred protocols.</param>
            <param name="initialization">Smart card initialization.</param>
            <returns>Smart card protocols.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.Disconnect(Neurotec.SmartCards.SCardAction)">
            <summary>
            Disconnects the smart card.
            </summary>
            <param name="disposition">Smart card disposition.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.BeginTransaction">
            <summary>
            Begins transaction.
            </summary>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.EndTransaction(Neurotec.SmartCards.SCardAction)">
            <summary>
            Ends the transaction.
            </summary>
            <param name="disposition">Smart card disposition.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.CancelTransaction">
            <summary>
            Cancels the transaction.
            </summary>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.GetAtr">
            <summary>
            Gets attributes of the current smart card.
            </summary>
            <returns>Byte array representing the card attributes.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.GetReaderNames">
            <summary>
            Gets reader names of the current smart card.
            </summary>
            <returns>String array representing the reader names.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.Transmit(Neurotec.SmartCards.SCardIORequest,Neurotec.IO.NBuffer,Neurotec.IO.NBuffer)">
            <summary>
            Sends a service request to a smart card.
            </summary>
            <param name="sendPci">Sending protocol control information.</param>
            <param name="sendBuffer">Sending buffer.</param>
            <param name="recvBuffer">Receiving buffer.</param>
            <returns>Number of bytes written into receiving buffer.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.Transmit(Neurotec.SmartCards.SCardIORequest,Neurotec.IO.NBuffer,Neurotec.SmartCards.SCardIORequest,Neurotec.IO.NBuffer)">
            <summary>
            Sends a service request to a smart card.
            </summary>
            <param name="sendPci">Sending protocol control information.</param>
            <param name="sendBuffer">Sending buffer.</param>
            <param name="recvPci">Receiving protocol control information.</param>
            <param name="recvBuffer">Receiving buffer.</param>
            <returns>Number of bytes written into receiving buffer.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.TransmitApdu(Neurotec.SmartCards.ApduClass,Neurotec.SmartCards.ApduInstruction,System.Byte,System.Byte,Neurotec.IO.NBuffer,Neurotec.IO.NBuffer,System.Int32@)">
            <summary>
            Transmits the smart card application protocol data unit.
            </summary>
            <param name="class">APDU class.</param>
            <param name="instruction">APDU instruction.</param>
            <param name="p1">First APDU instruction parameter.</param>
            <param name="p2">Second APDU instruction parameter.</param>
            <param name="data">NBuffer containing application protocol data.</param>
            <param name="responseData">NBuffer containing response data.</param>
            <param name="nr">[out] Response data.</param>
            <returns>ApduStatus object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.TransmitApdu(Neurotec.SmartCards.ApduClass,Neurotec.SmartCards.ApduInstruction,System.Byte,System.Byte,System.Boolean,Neurotec.IO.NBuffer)">
            <summary>
            Transmits the smart card application protocol data unit.
            </summary>
            <param name="class">APDU class.</param>
            <param name="instruction">APDU instruction.</param>
            <param name="p1">First APDU instruction parameter.</param>
            <param name="p2">Second APDU instruction parameter.</param>
            <param name="isExtended">NTrue if the APDU is extended; else NFalse.</param>
            <param name="data">NBuffer containing application protocol data.</param>
            <returns>ApduStatus object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.TransmitApdu(Neurotec.SmartCards.ApduClass,Neurotec.SmartCards.ApduInstruction,System.Byte,System.Byte,Neurotec.IO.NBuffer)">
            <summary>
            Transmits the smart card application protocol data unit.
            </summary>
            <param name="class">APDU class.</param>
            <param name="instruction">APDU instruction.</param>
            <param name="p1">First APDU instruction parameter.</param>
            <param name="p2">Second APDU instruction parameter.</param>
            <param name="data">NBuffer containing application protocol data.</param>
            <returns>ApduStatus object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.TransmitApdu(Neurotec.SmartCards.ApduClass,Neurotec.SmartCards.ApduInstruction,System.Byte,System.Byte,System.Boolean,Neurotec.IO.NBuffer,System.Int32@)">
            <summary>
            Transmits the smart card application protocol data unit.
            </summary>
            <param name="class">APDU class.</param>
            <param name="instruction">APDU instruction.</param>
            <param name="p1">First APDU instruction parameter.</param>
            <param name="p2">Second APDU instruction parameter.</param>
            <param name="isExtended">NTrue if the APDU is extended; else NFalse.</param>
            <param name="responseData">NBuffer containing response data.</param>
            <param name="nr">[out] Response data.</param>
            <returns>ApduStatus object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.TransmitApdu(Neurotec.SmartCards.ApduClass,Neurotec.SmartCards.ApduInstruction,System.Byte,System.Byte,Neurotec.IO.NBuffer,System.Int32@)">
            <summary>
            Transmits the smart card application protocol data unit.
            </summary>
            <param name="class">APDU class.</param>
            <param name="instruction">APDU instruction.</param>
            <param name="p1">First APDU instruction parameter.</param>
            <param name="p2">Second APDU instruction parameter.</param>
            <param name="responseData">NBuffer containing response data.</param>
            <param name="nr">[out] Response data.</param>
            <returns>ApduStatus object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.TransmitApdu(Neurotec.SmartCards.ApduClass,Neurotec.SmartCards.ApduInstruction,System.Byte,System.Byte)">
            <summary>
            Transmits the smart card application protocol data unit.
            </summary>
            <param name="class">APDU class.</param>
            <param name="instruction">APDU instruction.</param>
            <param name="p1">First APDU instruction parameter.</param>
            <param name="p2">Second APDU instruction parameter.</param>
            <returns>ApduStatus object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.TransmitApdu(Neurotec.SmartCards.ApduClass,Neurotec.SmartCards.ApduInstruction,System.Byte,System.Byte,System.Boolean,Neurotec.IO.NBuffer,Neurotec.IO.NBuffer,System.Int32@)">
            <summary>
            Transmits the smart card application protocol data unit.
            </summary>
            <param name="class">APDU class.</param>
            <param name="instruction">APDU instruction.</param>
            <param name="p1">First APDU instruction parameter.</param>
            <param name="p2">Second APDU instruction parameter.</param>
            <param name="isExtended">NTrue if the APDU is extended; else NFalse.</param>
            <param name="data">NBuffer containing application protocol data.</param>
            <param name="responseData">NBuffer containing response data.</param>
            <param name="nr">[out] Response data.</param>
            <returns>ApduStatus object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.Control(System.Int32)">
            <summary>
            Causes the reader to perform an operation specified by the control code.
            </summary>
            <param name="controlCode">Control code for the operation.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.Control(System.Int32,Neurotec.IO.NBuffer)">
            <summary>
            Causes the reader to perform an operation specified by the control code.
            </summary>
            <param name="controlCode">Control code for the operation.</param>
            <param name="inBuffer">NBuffer that contains the data required to perform the operation.</param>
            <returns>Size, in bytes, of the data stored into the buffer.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.Control(System.Int32,Neurotec.IO.NBuffer,Neurotec.IO.NBuffer)">
            <summary>
            Causes the reader to perform an operation specified by the control code.
            </summary>
            <param name="controlCode">Control code for the operation.</param>
            <param name="inBuffer">NBuffer that contains the data required to perform the operation.</param>
            <param name="outBuffer">NBuffer that receives the operation's output data.</param>
            <returns>Size, in bytes, of the data stored into the buffer.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.Control(System.Int32,System.Int32)">
            <summary>
            Causes the reader to perform an operation specified by the control code.
            </summary>
            <param name="controlCode">Control code for the operation.</param>
            <param name="inValue">Input value.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.Control(System.Int32,System.Int32,Neurotec.IO.NBuffer)">
            <summary>
            Causes the reader to perform an operation specified by the control code.
            </summary>
            <param name="controlCode">Control code for the operation.</param>
            <param name="inValue">Input value.</param>
            <param name="outBuffer">NBuffer that receives the operation's output data.</param>
            <returns>Size, in bytes, of the data stored into the buffer.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.ControlAsDWord(System.Int32)">
            <summary>
            Causes the reader to perform an operation specified by the control code.
            </summary>
            <param name="controlCode">Control code for the operation.</param>
            <returns>DWORD that receives the size, in bytes, of the data stored into the buffer.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.ControlAsDWord(System.Int32,Neurotec.IO.NBuffer)">
            <summary>
            Causes the reader to perform an operation specified by the control code.
            </summary>
            <param name="controlCode">Control code for the operation.</param>
            <param name="inBuffer">NBuffer that contains the data required to perform the operation.</param>
            <returns>DWORD that receives the size, in bytes, of the data stored into the buffer.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.ControlAsDWord(System.Int32,System.Int32)">
            <summary>
            Causes the reader to perform an operation specified by the control code.
            </summary>
            <param name="controlCode">Control code for the operation.</param>
            <param name="inValue">Input value.</param>
            <returns>DWORD that receives the size, in bytes, of the data stored into the buffer.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.GetReaderCapabilities(System.Int32,Neurotec.IO.NBuffer)">
            <summary>
            Gets capabilities of a reader defined by a tag and attributes.
            </summary>
            <param name="tag">Reader tag.</param>
            <param name="attr">NBuffer containing reader attributes.</param>
            <returns>Integer containing reader capabilities.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.GetReaderCapabilities(System.Int32)">
            <summary>
            Gets capabilities of a reader defined by a tag.
            </summary>
            <param name="tag">Reader tag.</param>
            <returns>NBuffer containing reader capabilities.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.GetReaderCapabilitiesAsString(System.Int32)">
            <summary>
            Gets capabilities of a reader defined by a tag.
            </summary>
            <param name="tag">Reader tag.</param>
            <returns>String containing reader capabilities.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.GetReaderCapabilitiesAsStringArray(System.Int32)">
            <summary>
            Gets capabilities of a reader defined by a tag.
            </summary>
            <param name="tag">Reader tag.</param>
            <returns>String array containing reader capabilities.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.GetReaderCapabilitiesAsByte(System.Int32)">
            <summary>
            Gets capabilities of a reader defined by a tag.
            </summary>
            <param name="tag">Reader tag.</param>
            <returns>Byte containing reader capabilities.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.GetReaderCapabilitiesAsDWord(System.Int32)">
            <summary>
            Gets capabilities of a reader defined by a tag.
            </summary>
            <param name="tag">Reader tag.</param>
            <returns>Integer containing reader capabilities.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.SetReaderCapabilities(System.Int32)">
            <summary>
            Sets capabilities of a reader defined by a tag.
            </summary>
            <param name="tag">Reader tag.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.SetReaderCapabilities(System.Int32,Neurotec.IO.NBuffer)">
            <summary>
            Sets capabilities of a reader defined by a tag.
            </summary>
            <param name="tag">Reader tag.</param>
            <param name="attr">Reader attributes.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.SetReaderCapabilities(System.Int32,System.String)">
            <summary>
            Sets capabilities of a reader defined by a tag.
            </summary>
            <param name="tag">Reader tag.</param>
            <param name="value">New capabilities value.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.SetReaderCapabilities(System.Int32,System.String[])">
            <summary>
            Sets capabilities of a reader defined by a tag.
            </summary>
            <param name="tag">Reader tag.</param>
            <param name="value">New capabilities values.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.SetReaderCapabilities(System.Int32,System.Byte)">
            <summary>
            Sets capabilities of a reader defined by a tag.
            </summary>
            <param name="tag">Reader tag.</param>
            <param name="value">New capabilities value.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCard.SetReaderCapabilities(System.Int32,System.Int32)">
            <summary>
            Sets capabilities of a reader defined by a tag.
            </summary>
            <param name="tag">Reader tag.</param>
            <param name="value">New capabilities value.</param>
        </member>
        <member name="P:Neurotec.SmartCards.SCard.IsDisposed">
            <summary>
            Checks whether an object is disposed.
            </summary>
        </member>
        <member name="P:Neurotec.SmartCards.SCard.SafeHandle">
            <summary>
            Gets a handle to the smart card.
            </summary>
        </member>
        <member name="P:Neurotec.SmartCards.SCard.State">
            <summary>
            Gets the state of the smart card.
            </summary>
        </member>
        <member name="P:Neurotec.SmartCards.SCard.Protocol">
            <summary>
            Gets the protocol or the smart card.
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.SCardScope">
            <summary>
            Specifies resource manager scope.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardScope.User">
            <summary>
            The context is a user context, and any database operations are performed within the domain of the user.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardScope.Terminal">
            <summary>
            The context is that of the current terminal, and any database operations are performed within the domain of that terminal. (The calling application must have appropriate access permissions for any database actions.)
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardScope.System">
            <summary>
            The context is the system context, and any database operations are performed within the domain of the system. (The calling application must have appropriate access permissions for any database actions.)
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.SCardProvider">
            <summary>
            Specifies smart card service provider.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardProvider.Primary">
            <summary>
            Primary Provider Id
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardProvider.Csp">
            <summary>
            Crypto Service Provider Id
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardProvider.Ksp">
            <summary>
            Key Storage Provider Id
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.SCardAtrMask">
            <summary>
            Provides functions to locate cards.
            </summary>
        </member>
        <member name="M:Neurotec.SmartCards.SCardAtrMask.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the SCardAtrMask class.</summary>
            <param name="atr">ATR.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardAtrMask.#ctor(System.Byte[],System.Byte[])">
            <summary>Initializes a new instance of the SCardAtrMask class.</summary>
            <param name="atr">ATR.</param>
            <param name="mask">ATR mask.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardAtrMask.GetAtr(System.Byte[],System.Int32)">
            <summary>Gets ATR.</summary>
            <param name="buffer">Byte array with ATR.</param>
            <param name="index">The index of ATR to get.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardAtrMask.GetMask(System.Byte[],System.Int32)">
            <summary>Gets ATR mask.</summary>
            <param name="buffer">Byte array for ATR mask.</param>
            <param name="index">Index of ATR mask.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardAtrMask.GetAtr">
            <summary>Gets ATR.</summary>
            <returns>ATR.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCardAtrMask.GetMask">
            <summary>Gets ATR mask.</summary>
            <returns>ATR mask.</returns>
        </member>
        <member name="P:Neurotec.SmartCards.SCardAtrMask.Length">
            <summary>Gets ATR length.</summary>
            <value>The ATR length.</value>
        </member>
        <member name="T:Neurotec.SmartCards.SCardStates">
            <summary>
            Specifies smart card state.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardStates.Unaware">
            <summary>
            The application is unaware of the current state, and would like to know. The use of this value results in an immediate return from state transition monitoring services. This is represented by all bits set to zero.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardStates.Ignore">
            <summary>
            The application requested that this reader be ignored. No other bits will be set.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardStates.Changed">
            <summary>
            This implies that there is a difference between the state believed by the application, and the state known by the Service Manager. When this bit is set, the application may assume a significant state change has occurred on this reader.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardStates.Unknown">
            <summary>
            This implies that the given reader name is not recognized by the Service Manager. If this bit is set, then SCARD_STATE_CHANGED and SCARD_STATE_IGNORE will also be set.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardStates.Unavailable">
            <summary>
            This implies that the actual state of this reader is not available. If this bit is set, then all the following bits are clear.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardStates.Empty">
            <summary>
            This implies that there is not card in the reader. If this bit is set, all the following bits will be clear.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardStates.Present">
            <summary>
            This implies that there is a card in the reader.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardStates.AtrMatch">
            <summary>
            This implies that there is a card in the reader with an ATR matching one of the target cards. If this bit is set, SCARD_STATE_PRESENT will also be set. This bit is only returned on the SCardLocateCard() service.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardStates.Exclusive">
            <summary>
            This implies that the card in the reader is allocated for exclusive use by another application. If this bit is set, SCARD_STATE_PRESENT will also be set.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardStates.InUse">
            <summary>
            This implies that the card in the reader is in use by one or more other applications, but may be connected to in shared mode. If this bit is set, SCARD_STATE_PRESENT will also be set.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardStates.Mute">
            <summary>
            This implies that the card in the reader is unresponsive or not supported by the reader or software.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardStates.Unpowered">
            <summary>
            This implies that the card in the reader has not been powered up.
            </summary>
        </member>
        <member name="T:Neurotec.SmartCards.SCardReaderState">
            <summary>
            Represents the smart card reader state.
            </summary>
        </member>
        <member name="M:Neurotec.SmartCards.SCardReaderState.#ctor(System.String)">
            <summary>Initializes a new instance of the SCardReaderState class.</summary>
            <param name="reader">Reader name.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardReaderState.GetAtr(System.Byte[],System.Int32)">
            <summary>Gets ATR.</summary>
            <param name="buffer">Byte array with ATR.</param>
            <param name="index">The index of ATR to get.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardReaderState.GetAtr">
            <summary>Gets ATR.</summary>
            <returns>ATR.</returns>
        </member>
        <member name="P:Neurotec.SmartCards.SCardReaderState.Reader">
            <summary>Gets name of the reader.</summary>
            <value>Reader name.</value>
        </member>
        <member name="P:Neurotec.SmartCards.SCardReaderState.CurrentState">
            <summary>Gets the current state of the reader, as seen by the application.</summary>
            <value>One of SCardStates value.</value>
        </member>
        <member name="P:Neurotec.SmartCards.SCardReaderState.EventState">
            <summary>Gets the current state of the reader, as known by the smart card resource manager.</summary>
            <value>One of SCardStates value.</value>
        </member>
        <member name="P:Neurotec.SmartCards.SCardReaderState.AtrLength">
            <summary>Gets ATR length.</summary>
            <value>ATR length.</value>
        </member>
        <member name="T:Neurotec.SmartCards.SCardManager">
            <summary>
            Provides smart card management functionality.
            </summary>
        </member>
        <member name="F:Neurotec.SmartCards.SCardManager.AllReadersGroup">
            Group that contains all readers.
        </member>
        <member name="F:Neurotec.SmartCards.SCardManager.DefaultReadersGroup">
            Group that contains default readers.
        </member>
        <member name="F:Neurotec.SmartCards.SCardManager.LocalReadersGroup">
            Group that contains local readers.
        </member>
        <member name="F:Neurotec.SmartCards.SCardManager.SystemReadersGroup">
            Group that contains system readers.
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.GetCardTypeProviderNameStatic(System.String,Neurotec.SmartCards.SCardProvider)">
            <summary>Returns the name of the module (dynamic link library) containing the provider for a given card name and provider type.</summary>
            <param name="cardName">Name of the card type with which this provider name is associated.</param>
            <param name="provider">Identifier for the provider associated with this card type.</param>
            <returns>Module provider name and type.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.SetCardTypeProviderNameStatic(System.String,Neurotec.SmartCards.SCardProvider,System.String)">
            <summary>Specifies the name of the module (dynamic link library) containing the provider for a given card name and provider type.</summary>
            <param name="cardName">Name of the card type with which this provider name is associated.</param>
            <param name="provider">Identifier for the provider associated with this card type. See Primary, Csp.</param>
            <param name="value">String variable being assigned as the provider name, representing the cryptographic service provider (CSP).</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.#ctor(Neurotec.SmartCards.SCardScope)">
            <summary>Initializes a new instance of the SCardManager class.</summary>
            <param name="scope">One of SCardScope value.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the SCardManager class.
            </summary>
            <param name="handle">Handle to the manager.</param>
            <param name="ownsHandle">Whether the manager owns the handle.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.#ctor(Neurotec.SmartCards.Interop.HSCardContext)">
            <summary>
            Initializes a new instance of the SCardManager class.
            </summary>
            <param name="handle">Card context handle.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.ListReaderGroups">
            <summary>Provides the list of reader groups that have previously been introduced to the system.</summary>
            <returns>The reader groups defined to the system and available to the current user on the current terminal.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.ListReaders(System.String[])">
            <summary>Provides the list of readers within a set of named reader groups, eliminating duplicates.</summary>
            <param name="readerGroups">Names of the reader groups defined to the system.</param>
            <returns>The card readers within the supplied reader groups.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.ListReaders">
            <summary>Provides the list of readers within a set of named reader groups, eliminating duplicates.</summary>
            <returns>The card readers within the supplied reader groups.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.ListCardTypes(System.Byte[],System.Guid[])">
            <summary>Searches the smart card database and provides a list of named cards previously introduced to the system by the user.</summary>
            <param name="atr">Address of an ATR string to compare to known cards, or NULL if no ATR matching is to be performed.</param>
            <param name="interfaces">Array of identifiers (GUIDs), or NULL if no interface matching is to be performed. When an array is supplied, a card name will be returned only if all the specified identifiers are supported by the card.</param>
            <returns>Multi-string that lists the smart cards found.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.ListCardTypes">
            <summary>Searches the smart card database and provides a list of named cards previously introduced to the system by the user.</summary>
            <returns>Multi-string that lists the smart cards found.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.ListInterfaces(System.String)">
            <summary>Provides a list of interfaces supplied by a given card. The caller supplies the name of a smart card previously introduced to the subsystem, and receives the list of interfaces supported by the card.</summary>
            <param name="card">Name of the smart card already introduced to the smart card subsystem.</param>
            <returns>Array of interface identifiers (GUIDs) that indicate the interfaces supported by the smart card.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.GetProviderId(System.String)">
            <summary>Returns the identifier (GUID) of the primary service provider for a given card. The caller supplies the name of a smart card (previously introduced to the system) and receives the registered identifier of the primary service provider GUID, if one exists.</summary>
            <param name="card">Name of the card defined to the system.</param>
            <returns>Identifier (GUID) of the primary service provider. This provider may be activated using COM, and will supply access to other services in the card.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.GetCardTypeProviderName(System.String,Neurotec.SmartCards.SCardProvider)">
            <summary>Returns the name of the module (dynamic link library) containing the provider for a given card name and provider type.</summary>
            <param name="cardName">Name of the card type with which this provider name is associated.</param>
            <param name="provider">Identifier for the provider associated with this card type.</param>
            <returns>Module provider name and type.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.SetCardTypeProviderName(System.String,Neurotec.SmartCards.SCardProvider,System.String)">
            <summary>Specifies the name of the module (dynamic link library) containing the provider for a given card name and provider type.</summary>
            <param name="cardName">Name of the card type with which this provider name is associated.</param>
            <param name="provider">Identifier for the provider associated with this card type. See Primary, Csp.</param>
            <param name="value">String variable being assigned as the provider name, representing the cryptographic service provider (CSP).</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.IntroduceReaderGroup(System.String)">
            <summary>Introduces a reader group to the smart card subsystem. However, the reader group is not created until the group is specified when adding a reader to the smart card database.</summary>
            <param name="groupName">Supplies the friendly name to be assigned to the new reader group.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.ForgetReaderGroup(System.String)">
            <summary>Removes a previously introduced smart card reader group from the smart card subsystem. Although this method automatically clears all readers from the group, it does not affect the existence of the individual readers in the database.</summary>
            <param name="groupName">Friendly name of the reader group to be removed. System-defined reader groups cannot be removed from the database.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.IntroduceReader(System.String,System.String)">
            <summary>Introduces a new name for an existing smart card reader. Note Smart card readers are automatically introduced to the system; a smart card reader vendor's setup program can also introduce a smart card reader to the system.</summary>
            <param name="readerName">Friendly name to be assigned to the reader.</param>
            <param name="deviceName">System name of the smart card reader, for example, "MyReader 01".</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.ForgetReader(System.String)">
            <summary>Removes a previously introduced reader from control by the smart card subsystem. It is removed from the smart card database, including from any reader group that it may have been added to.</summary>
            <param name="readerName">String that contains the friendly name of the reader to be removed from the smart card database.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.AddReaderToGroup(System.String,System.String)">
            <summary>Adds a reader to a reader group.</summary>
            <param name="readerName">Friendly name of the reader that you are adding.</param>
            <param name="groupName">Friendly name of the group to which you are adding the reader.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.RemoveReaderFromGroup(System.String,System.String)">
            <summary>Removes a reader from an existing reader group. This method has no affect on the reader.</summary>
            <param name="readerName">Friendly name of the reader to be removed.</param>
            <param name="groupName">Friendly name of the group from which the reader should be removed.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.IntroduceCardType(System.String,System.Byte[],System.Byte[],System.Guid,System.Guid[])">
            <summary>Introduces a smart card to the smart card subsystem (for the active user) by adding it to the smart card database.</summary>
            <param name="cardName">Name by which the user can recognize the card.</param>
            <param name="atr">ATR string that can be used for matching purposes when querying the smart card database (for more information, see LocateCards). The length of this string is determined by normal ATR parsing.</param>
            <param name="atrMask">Optional bitmask to use when comparing the ATRs of smart cards to the ATR supplied in atr. If this value is non-NULL, it must point to a string of bytes the same length as the ATR string supplied in atr. When a given ATR string 'A' is compared to the ATR supplied in atr, it matches if and only if A &amp; M =atr, where M is the supplied mask, and &amp; represents bitwise logical AND.</param>
            <param name="primaryProvider">Pointer to the identifier (GUID) for the smart card's primary service provider.</param>
            <param name="interfaces">Array of identifiers (GUIDs) that identify the interfaces supported by the smart card.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.IntroduceCardType(System.String,Neurotec.SmartCards.SCardAtrMask,System.Guid,System.Guid[])">
            <summary>Introduces a smart card to the smart card subsystem (for the active user) by adding it to the smart card database.</summary>
            <param name="cardName">Name by which the user can recognize the card.</param>
            <param name="atrMask">Optional bitmask to use when comparing the ATRs of smart cards to the ATR supplied in atr. If this value is non-NULL, it must point to a string of bytes the same length as the ATR string supplied in atr. When a given ATR string 'A' is compared to the ATR supplied in atr, it matches if and only if A &amp; M =atr, where M is the supplied mask, and &amp; represents bitwise logical AND.</param>
            <param name="primaryProvider">Pointer to the identifier (GUID) for the smart card's primary service provider.</param>
            <param name="interfaces">Array of identifiers (GUIDs) that identify the interfaces supported by the smart card.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.IntroduceCardType(System.String,System.Byte[],System.Guid,System.Guid[])">
            <summary>Introduces a smart card to the smart card subsystem (for the active user) by adding it to the smart card database.</summary>
            <param name="cardName">Name by which the user can recognize the card.</param>
            <param name="atr">ATR string that can be used for matching purposes when querying the smart card database (for more information, see LocateCards). The length of this string is determined by normal ATR parsing.</param>
            <param name="primaryProvider">Pointer to the identifier (GUID) for the smart card's primary service provider.</param>
            <param name="interfaces">Array of identifiers (GUIDs) that identify the interfaces supported by the smart card.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.IntroduceCardType(System.String,System.Byte[],System.Byte[])">
            <summary>Introduces a smart card to the smart card subsystem (for the active user) by adding it to the smart card database.</summary>
            <param name="cardName">Name by which the user can recognize the card.</param>
            <param name="atr">ATR string that can be used for matching purposes when querying the smart card database (for more information, see LocateCards). The length of this string is determined by normal ATR parsing.</param>
            <param name="atrMask">Optional bitmask to use when comparing the ATRs of smart cards to the ATR supplied in atr. If this value is non-NULL, it must point to a string of bytes the same length as the ATR string supplied in atr. When a given ATR string 'A' is compared to the ATR supplied in atr, it matches if and only if A &amp; M =atr, where M is the supplied mask, and &amp; represents bitwise logical AND.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.IntroduceCardType(System.String,Neurotec.SmartCards.SCardAtrMask)">
            <summary>Introduces a smart card to the smart card subsystem (for the active user) by adding it to the smart card database.</summary>
            <param name="cardName">Name by which the user can recognize the card.</param>
            <param name="atrMask">Optional bitmask to use when comparing the ATRs of smart cards to the ATR supplied in atr. If this value is non-NULL, it must point to a string of bytes the same length as the ATR string supplied in atr. When a given ATR string 'A' is compared to the ATR supplied in atr, it matches if and only if A &amp; M =atr, where M is the supplied mask, and &amp; represents bitwise logical AND.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.IntroduceCardType(System.String,System.Byte[])">
            <summary>Introduces a smart card to the smart card subsystem (for the active user) by adding it to the smart card database.</summary>
            <param name="cardName">Name by which the user can recognize the card.</param>
            <param name="atr">ATR string that can be used for matching purposes when querying the smart card database (for more information, see LocateCards). The length of this string is determined by normal ATR parsing.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.ForgetCardType(System.String)">
            <summary>Removes an introduced smart card from the smart card subsystem.</summary>
            <param name="cardName">Friendly name of the card to be removed from the smart card database.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.GetStatusChange(Neurotec.SmartCards.SCardReaderState[],System.Int32)">
            <summary>Blocks execution until the current availability of the cards in a specific set of readers changes.</summary>
            <param name="readerStates">Array of SCardReaderState structures that specify the readers to watch, and receives the result.</param>
            <param name="timeout">Maximum amount of time (in milliseconds) to wait for an action. A value of zero causes the function to return immediately. A value of INFINITE causes this function never to time out.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.GetStatusChange(Neurotec.SmartCards.SCardReaderState[],System.TimeSpan)">
            <summary>
            Blocks execution until the current availability of the cards in a specific set of readers changes.
            </summary>
            <param name="readerStates">Array of SCardReaderState structures that specify the readers to watch, and receives the result.</param>
            <param name="timeout">Maximum amount of time (in milliseconds) to wait for an action. A value of zero causes the function to return immediately. A value of INFINITE causes this function never to time out.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.LocateCards(Neurotec.SmartCards.SCardReaderState[],System.String[])">
            <summary>Searches the readers.</summary>
            <param name="readerStates">Supplies an array of SCardReaderState objects that specify the readers to search, and receives the result.</param>
            <param name="cards">A multiple string that contains the names of the cards to search for.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.LocateCards(Neurotec.SmartCards.SCardReaderState[],Neurotec.SmartCards.SCardAtrMask[])">
            <summary>Searches the readers.</summary>
            <param name="readerStates">Supplies an array of SCardReaderState objects that specify the readers to search, and receives the result.</param>
            <param name="atrMasks">Array of SCardAtrMask objects for the cards to search for.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.Cancel">
            <summary>Terminates all outstanding actions within a specific resource manager context.</summary>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.Connect(System.String,Neurotec.SmartCards.SCardShare,Neurotec.SmartCards.SCardProtocols,Neurotec.SmartCards.SCardProtocols@)">
            <summary>Establishes a connection between the calling application and a smart card contained by a specific reader.</summary>
            <param name="reader">The name of the reader that contains the target card.</param>
            <param name="shareMode">A flag that indicates whether other applications may form connections to the card. See Shared, Exclusive, Direct.</param>
            <param name="preferredProtocols">A bit mask of acceptable protocols for the connection. Possible values may be combined with the OR operation. See T0, T1. This parameter may be zero only if SCardShare is set to Direct. In this case, no protocol negotiation will be performed by the drivers until an CtlSetProtocol control directive is sent with Control.</param>
            <param name="activeProtocol">A flag that indicates the established active protocol. See T0, T1, Undefined.</param>
            <returns>SCard object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SCardManager.Connect(System.String,Neurotec.SmartCards.SCardShare,Neurotec.SmartCards.SCardProtocols)">
            <summary>Establishes a connection between the calling application and a smart card contained by a specific reader.</summary>
            <param name="reader">The name of the reader that contains the target card.</param>
            <param name="shareMode">A flag that indicates whether other applications may form connections to the card. See Shared, Exclusive, Direct.</param>
            <param name="preferredProtocols">A bit mask of acceptable protocols for the connection. Possible values may be combined with the OR operation. See T0, T1. This parameter may be zero only if SCardShare is set to Direct. In this case, no protocol negotiation will be performed by the drivers until an CtlSetProtocol control directive is sent with Control.</param>
            <returns>SCard object.</returns>
        </member>
        <member name="P:Neurotec.SmartCards.SCardManager.IsDisposed">
            <summary>
            Checks whether the object is disposed.
            </summary>
        </member>
        <member name="P:Neurotec.SmartCards.SCardManager.SafeHandle">
            <summary>
            Gets the safe handle to the smart card manager.
            </summary>
        </member>
        <member name="P:Neurotec.SmartCards.SCardManager.IsValid">
            <summary>Determines whether a smart card context handle is valid.</summary>
            <returns>true if handle is valid; otherwise, false.</returns>
        </member>
        <member name="T:Neurotec.SmartCards.SimpleTag">
            <summary>
            Represents SIMPLE-TLV tag.
            </summary>                
        </member>
        <member name="P:Neurotec.SmartCards.SimpleTag.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTag.op_Explicit(Neurotec.SmartCards.SimpleTag)~System.Byte">
            <summary>
            Converts SIMPLE-TLV tag to byte.
            </summary>
            <param name="value">SimpleTag object.</param>
            <returns>
            SimpleTag converted to byte.
            </returns>                                   
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTag.op_Explicit(System.Byte)~Neurotec.SmartCards.SimpleTag">
            <summary>
            Converts byte to SIMPLE-TLV tag.
            </summary>
            <param name="value">Byte value of SIMPLE tag. </param>
            <returns>
            SimpleTag object.
            </returns>                                            
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTag.op_Equality(Neurotec.SmartCards.SimpleTag,Neurotec.SmartCards.SimpleTag)">
            <summary>
            Gets a value indicating whether the SimpleTag is identical to
            a second SimpleTag.
            </summary>
            <param name="v1">SimpleTag object.</param>
            <param name="v2">SimpleTag object.</param>
            <returns>
            true if the SimpleTag is identical to a second SimpleTag;
            otherwise, false.
            </returns>                                                   
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTag.op_Inequality(Neurotec.SmartCards.SimpleTag,Neurotec.SmartCards.SimpleTag)">
            <summary>
            Gets a value indicating whether the SimpleTag is not
            identical to a second SimpleTag.
            </summary>
            <param name="v1">SimpleTag object.</param>
            <param name="v2">SimpleTag object.</param>
            <returns>
            true if its two operands refer to different objects;
            otherwise, false.
            </returns>                                          
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTag.#ctor(System.Byte)">
            <summary>Initializes a new instance of the SimpleTag class.</summary>
            <param name="value">SIMPLE-TLV tag.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTag.Equals(System.Object)">
            <summary>Overloaded. Determines whether two Object instances are equal.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTag.GetHashCode">
            <summary>Serves as a hash function for a particular type. GetHashCode is suitable for use in hashing algorithms and data structures like a hash table.</summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTag.ToString">
            <summary>Returns a String that represents the current Object.</summary>
            <returns>Returns a String that represents the current Object.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTag.ToString(System.String)">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <param name="format">Reserved.</param>
            <returns>Returns a String that represents the current Object.</returns>
        </member>
        <member name="P:Neurotec.SmartCards.SimpleTag.IsValid">
            <summary>Represents SIMPLE-TLV tag.</summary>
            <value></value>
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTag.Equals(Neurotec.SmartCards.SimpleTag)">
            <summary>
            Checks whether the current SimpleTag object equals the other ApduClass object.
            </summary>
            <param name="other">The other SimpleTag object.</param>
            <returns><i>true</i> if the objects are equal, else <i>false</i>.</returns>
        </member>
        <member name="T:Neurotec.SmartCards.SimpleTlv">
            <summary>
            Provides functionality for creation, validation, retrieval
            and update of SIMPLE-TLV data objects that are fully
            compliant with SIMPLE-TLV encoding rules specified in ISO/IEC
            7816-4:2005.
            </summary>
        </member>
        <member name="P:Neurotec.SmartCards.SimpleTlv.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTlv.LoadMany(System.Byte[])">
            <summary>Creates an array of SIMPLE-TLV data objects from memory buffer.</summary>
            <param name="buffer">Byte array to read SIMPLE-TLVs data from.</param>
            <returns>An array of created SIMPLE-TLV data objects.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTlv.LoadMany(Neurotec.IO.NBuffer)">
            <summary>
            Creates an array of SIMPLE-TLV data objects from NBuffer.
            </summary>
            <param name="buffer">NBuffer to read SIMPLE-TLVs data from.</param>
            <returns>An array of created SIMPLE-TLV data objects.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTlv.LoadMany(Neurotec.IO.NBuffer,System.UInt32)">
            <summary>
            Creates an array of SIMPLE-TLV data objects from NBuffer.
            </summary>
            <param name="buffer">NBuffer to read SIMPLE-TLVs data from.</param>
            <param name="flags">Associated flags.</param>
            <returns>An array of created SIMPLE-TLV data objects.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTlv.LoadMany(Neurotec.IO.NBuffer,System.UInt32,System.Int32@)">
            <summary>
            Creates an array of SIMPLE-TLV data objects from NBuffer.
            </summary>
            <param name="buffer">NBuffer to read SIMPLE-TLVs data from.</param>
            <param name="flags">Associated flags.</param>
            <param name="size">[out] NBuffer size.</param>
            <returns>An array of created SIMPLE-TLV data objects.</returns>
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTlv.#ctor(Neurotec.SmartCards.SimpleTag)">
            <summary>Initializes a new instance of the SimpleTlv class.</summary>
            <param name="tag">SimpleTag object.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTlv.#ctor(Neurotec.SmartCards.SimpleTag,System.UInt32)">
            <summary>
            Initializes a new instance of the SimpleTlv class.
            </summary>
            <param name="tag">SimpleTag object.</param>
            <param name="flags">Associated tags.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTlv.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the SimpleTlv class.</summary>
            <param name="buffer">Byte array with SIMPLE-TLV data object.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTlv.#ctor(Neurotec.IO.NBuffer)">
            <summary>
            Initializes a new instance of the SimpleTlv class.
            </summary>
            <param name="buffer">NBuffer with SIMPLE-TLV data object.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTlv.#ctor(Neurotec.IO.NBuffer,System.UInt32)">
            <summary>
            Initializes a new instance of the SimpleTlv class.
            </summary>
            <param name="buffer">NBuffer with SIMPLE-TLV data object.</param>
            <param name="flags">Associated flags.</param>
        </member>
        <member name="M:Neurotec.SmartCards.SimpleTlv.#ctor(Neurotec.IO.NBuffer,System.UInt32,System.Int32@)">
            <summary>
            Initializes a new instance of the SimpleTlv class.
            </summary>
            <param name="buffer">NBuffer with SIMPLE-TLV data object.</param>
            <param name="flags">Associated flags.</param>
            <param name="size">[out] NBuffer size.</param>
        </member>
        <member name="P:Neurotec.SmartCards.SimpleTlv.Tag">
            <summary>Gets the SIMPLE-TLV data object tag field.</summary>
            <value>The value of the SIMPLE-TLV tag field.</value>
        </member>
        <member name="P:Neurotec.SmartCards.SimpleTlv.Length">
            <summary>Gets the SIMPLE-TLV data object length field.</summary>
            <value>The value of the SIMPLE-TLV length field.</value>
        </member>
        <member name="P:Neurotec.SmartCards.SimpleTlv.UseThreeByteLengthAlways">
            <summary>Sets the option specifying whether 3 bytes size length field should always be used in the SIMPLE-TLV.</summary>
            <value>true if only 3 bytes size length field should always be used in the SIMPLE-TLV; otherwise, false.</value>
        </member>
        <member name="P:Neurotec.SmartCards.SimpleTlv.Value">
            <summary>
            Gets or sets the value field of a primitive BER-TLV as a NBuffer.
            </summary>
        </member>
        <member name="P:Neurotec.SmartCards.SimpleTlv.Size">
            <summary>Gets the size of a SIMPLE-TLV data object.</summary>
            <value>The SIMPLE-TLV size.</value>
        </member>
        <member name="T:Neurotec.Sound.NSoundBuffer">
            <summary>
            Provides functionality for work with sound buffer.
            </summary>                                        
        </member>
        <member name="F:Neurotec.Sound.NSoundBuffer.FlagAllSrc">
            For internal use.
        </member>
        <member name="F:Neurotec.Sound.NSoundBuffer.FlagAllDstAndSrc">
            For internal use.
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.#cctor">
            For internal use.
        </member>
        <member name="P:Neurotec.Sound.NSoundBuffer.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.Copy(Neurotec.Sound.NSoundFormat,System.Int32,Neurotec.IO.NBuffer,System.Int32,System.Int32,Neurotec.Sound.NSoundFormat,System.Int32,Neurotec.IO.NBuffer,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the source sound buffer to the destination sound buffer.
            </summary>
            <param name="srcSoundFormat">Source sound format.</param>
            <param name="srcSampleRate">Source sample rate.</param>
            <param name="srcSamples">NBuffer containing source samples.</param>
            <param name="srcSampleCount">Source sample count.</param>
            <param name="srcSampleIndex">Source sample index.</param>
            <param name="dstSoundFormat">Destination sound format.</param>
            <param name="dstSampleRate">Destination sample rate.</param>
            <param name="dstSamples">NBuffer containing destination samples.</param>
            <param name="dstSampleCount">Destination sample count.</param>
            <param name="dstSampleIndex">Destination sample index.</param>
            <param name="sampleCount">Number of samples.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.Copy(Neurotec.Sound.NSoundFormat,System.Int32,Neurotec.IO.NBuffer,System.Int32,System.Int32,Neurotec.Sound.NSoundFormat,System.Int32,Neurotec.IO.NBuffer,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Copies the source sound buffer to the destination sound buffer.
            </summary>
            <param name="srcSoundFormat">Source sound format.</param>
            <param name="srcSampleRate">Source sample rate.</param>
            <param name="srcSamples">NBuffer containing source samples.</param>
            <param name="srcSampleCount">Source sample count.</param>
            <param name="srcSampleIndex">Source sample index.</param>
            <param name="dstSoundFormat">Destination sound format.</param>
            <param name="dstSampleRate">Destination sample rate.</param>
            <param name="dstSamples">NBuffer containing destination samples.</param>
            <param name="dstSampleCount">Destination sample count.</param>
            <param name="dstSampleIndex">Destination sample index.</param>
            <param name="sampleCount">Number of samples.</param>
            <param name="flags">Must be zero.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.Copy(Neurotec.Sound.NSoundFormat,System.Int32,System.Array,System.Array,Neurotec.IO.NBuffer,System.Int32,System.Int32,Neurotec.Sound.NSoundFormat,System.Int32,System.Array,System.Array,Neurotec.IO.NBuffer,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Copies the source sound buffer to the destination sound buffer.
            </summary>
            <param name="srcSoundFormat">Source sound format.</param>
            <param name="srcSampleRate">Source sample rate.</param>
            <param name="srcMinValue">The minimum sound sample value of the source sound buffer.</param>
            <param name="srcMaxValue">The maximum sound sample value of the source sound buffer.</param>
            <param name="srcSamples">NBuffer containing source samples.</param>
            <param name="srcSampleCount">Source sample count.</param>
            <param name="srcSampleIndex">Source sample index.</param>
            <param name="dstSoundFormat">Destination sound format.</param>
            <param name="dstSampleRate">Destination sample rate.</param>
            <param name="dstMinValue">The minimum sound sample value of the destination sound buffer.</param>
            <param name="dstMaxValue">The maximum sound sample value of the destination sound buffer.</param>
            <param name="dstSamples">NBuffer containing destination samples.</param>
            <param name="dstSampleCount">Destination sample count.</param>
            <param name="dstSampleIndex">Destination sample index.</param>
            <param name="sampleCount">Number of samples.</param>
            <param name="flags">Must be zero.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.Copy(Neurotec.Sound.NSoundBuffer,System.Int32,Neurotec.Sound.NSoundBuffer,System.Int32,System.Int32)">
            <summary>
            Copies specified sound interval of the NSoundBuffer to other
            NSoundBuffer object.
            </summary>
            <param name="srcSoundBuffer">NSoundBuffer object to copy.</param>
            <param name="sampleIndex">Start of the interval to copy.</param>
            <param name="dstSoundBuffer">A destination NSoundBuffer object.
                                   Specified interval will be
                                   copied to this object. </param>
            <param name="dstSampleIndex">The index in the destination sample array where to copy.</param>
            <param name="sampleCount">Count of samples to copy.</param>
            <exception cref="T:System.ArgumentNullException">srcSoundBuffer or dstSoundBuffer
                                                    has null value.</exception>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.GetWrapper(Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,Neurotec.IO.NBuffer)">
            <summary>
            Creates Neurotec.Sound.NSoundBuffer object wrapper.
            </summary>
            <param name="soundFormat">The buffer sound format.</param>
            <param name="sampleRate">The buffer sample rate.</param>
            <param name="sampleCount">The sample count to wrap.</param>
            <param name="samples">The buffer with sound data.</param>
            <returns>
            Neurotec.Sound.NSoundBuffer object.
            </returns>
            <seealso cref="T:Neurotec.Sound.NSoundFormat"/>
            <seealso cref="P:Neurotec.Sound.NSoundBuffer.SampleRate"/>                             
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.GetWrapper(Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,Neurotec.IO.NBuffer,System.UInt32)">
            <summary>
            Creates Neurotec.Sound.NSoundBuffer object wrapper.
            </summary>
            <param name="soundFormat">The buffer sound format.</param>
            <param name="sampleRate">The buffer sample rate.</param>
            <param name="sampleCount">The sample count to wrap.</param>
            <param name="samples">The buffer with sound data.</param>
            <param name="flags">Bitwise combination of zero or
                                more flags that controls behavior
                                of the function. This parameter is
                                reserved, must be zero.</param>
            <returns>
            Neurotec.Sound.NSoundBuffer object.
            </returns>
            <seealso cref="T:Neurotec.Sound.NSoundFormat"/>
            <seealso cref="P:Neurotec.Sound.NSoundBuffer.SampleRate"/>                               
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.GetWrapper(Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,Neurotec.IO.NBuffer,System.Int32,System.Int32)">
            <summary>
            Creates Neurotec.Sound.NSoundBuffer object wrapper.
            </summary>
            <param name="soundFormat">The buffer sound format.</param>
            <param name="sampleRate">The buffer sample rate.</param>
            <param name="srcSampleCount">The source sample count.</param>
            <param name="samples">The buffer with sound data.</param>
            <param name="sampleIndex">Starting point in buffer from
                                      which to create sound buffer
                                      wrapper.</param>
            <param name="sampleCount">The sample count to wrap.</param>
            <returns>
            Neurotec.Sound.NSoundBuffer object.
            </returns>
            <seealso cref="T:Neurotec.Sound.NSoundFormat"/>
            <seealso cref="P:Neurotec.Sound.NSoundBuffer.SampleRate"/>                                 
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.GetWrapper(Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,Neurotec.IO.NBuffer,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates Neurotec.Sound.NSoundBuffer object wrapper.
            </summary>
            <param name="soundFormat">The buffer sound format.</param>
            <param name="sampleRate">The buffer sample rate.</param>
            <param name="srcSampleCount">The source sample count.</param>
            <param name="samples">The buffer with sound data.</param>
            <param name="sampleIndex">Starting point in buffer from
                                      which to create sound buffer
                                      wrapper.</param>
            <param name="sampleCount">The sample count to wrap.</param>
            <param name="flags">Bitwise combination of zero or
                                more flags that controls
                                behavior of the function. This
                                parameter is reserved, must be
                                zero.</param>
            <returns>
            Neurotec.Sound.NSoundBuffer object.
            </returns>  
            <seealso cref="T:Neurotec.Sound.NSoundFormat"/>
            <seealso cref="P:Neurotec.Sound.NSoundBuffer.SampleRate"/>  		
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.GetWrapper(Neurotec.Sound.NSoundBuffer,System.Int32,System.Int32)">
            <summary>
            Creates Neurotec.Sound.NSoundBuffer object wrapper.
            </summary>
            <param name="srcSoundBuffer">Sound buffer that can be
                                         wrapped.</param>
            <param name="sampleIndex">Starting point in sound buffer
                                      from which to create sound
                                      buffer wrapper.</param>
            <param name="sampleCount">The sample count to wrap.</param>
            <returns>
            Neurotec.Sound.NSoundBuffer object.
            </returns>                                                 
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.GetWrapper(Neurotec.Sound.NSoundBuffer,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates Neurotec.Sound.NSoundBuffer object wrapper.
            </summary>
            <param name="srcSoundBuffer">Sound buffer that can be
                                         wrapped.</param>
            <param name="sampleIndex">Starting point in sound buffer
                                      from which to create sound
                                      buffer wrapper.</param>
            <param name="sampleCount">The sample count to wrap.</param>
            <param name="flags">Bitwise combination of zero or
                                more flags that controls
                                behavior of the function. This
                                parameter is reserved, must be
                                zero.</param>
            <returns>
            Neurotec.Sound.NSoundBuffer object.
            </returns>                                                 
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.Create(Neurotec.Sound.NSoundFormat,System.Int32,System.Int32)">
            <summary>
            Creates sound buffer.
            </summary>
            <param name="soundFormat">One of the values Neurotec.Sound.NSoundFormat.</param>
            <param name="sampleRate">The buffer sample rate.</param>
            <param name="sampleCount">The buffer sample count.</param>
            <returns>
            Created sound buffer.
            </returns>
            <seealso cref="T:Neurotec.Sound.NSoundFormat"/>
            <seealso cref="P:Neurotec.Sound.NSoundBuffer.SampleRate"/>  
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.Create(Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates sound buffer.
            </summary>
            <param name="soundFormat">One of the values
                                      Neurotec.Sound.NSoundFormat.</param>
            <param name="sampleRate">The buffer sample rate.</param>
            <param name="sampleCount">The buffer sample count.</param>
            <param name="flags">Bitwise combination of zero or
                                more flags that controls behavior
                                of the function. This parameter is
                                reserved, must be zero.</param>
            <returns>
            Created sound buffer.
            </returns>
            <seealso cref="T:Neurotec.Sound.NSoundFormat"/>
            <seealso cref="P:Neurotec.Sound.NSoundBuffer.SampleRate"/>                                  
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.FromData(Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,Neurotec.IO.NBuffer)">
            <summary>
            Creates sound buffer from Neurotec.IO.NBuffer.
            </summary>
            <param name="soundFormat">The buffer sound format.</param>
            <param name="sampleRate">The buffer sample rate.</param>
            <param name="sampleCount">The buffer sample count.</param>
            <param name="samples">The buffer with sound data.</param>
            <returns>
            Created sound buffer.
            </returns>
            <seealso cref="T:Neurotec.Sound.NSoundFormat"/>
            <seealso cref="P:Neurotec.Sound.NSoundBuffer.SampleRate"/>                         
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.FromData(Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,Neurotec.IO.NBuffer,System.UInt32)">
            <summary>
            Creates sound buffer from Neurotec.IO.NBuffer.
            </summary>
            <param name="soundFormat">The buffer sound format.</param>
            <param name="sampleRate">The buffer sample rate.</param>
            <param name="sampleCount">The buffer with sound data.</param>
            <param name="samples">The buffer with sound data.</param>
            <param name="flags">Bitwise combination of zero or
                                more flags that controls behavior
                                of the function. This parameter is
                                reserved, must be zero.</param>
            <returns>
            Created sound buffer.
            </returns>
            <seealso cref="T:Neurotec.Sound.NSoundFormat"/>
            <seealso cref="P:Neurotec.Sound.NSoundBuffer.SampleRate"/>                                
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.FromData(Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,Neurotec.IO.NBuffer,System.Int32,System.Int32)">
            <summary>
            Creates sound buffer from Neurotec.IO.NBuffer .
            </summary>
            <param name="soundFormat">The buffer sound format.</param>
            <param name="sampleRate">The buffer sample rate.</param>
            <param name="srcSampleCount">The source buffer sample count.</param>
            <param name="samples">The buffer with sound data.</param>
            <param name="sampleIndex">Starting point in buffer from
                                      which to create buffer.</param>
            <param name="sampleCount">The number of sample count to
                                      create.</param>
            <returns>
            Created sound buffer.
            </returns>
            <seealso cref="T:Neurotec.Sound.NSoundFormat"/>
            <seealso cref="P:Neurotec.Sound.NSoundBuffer.SampleRate"/>                                         
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.FromData(Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,Neurotec.IO.NBuffer,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates sound buffer from Neurotec.IO.NBuffer.
            </summary>
            <param name="soundFormat">The buffer sound format.</param>
            <param name="sampleRate">The buffer sample rate.</param>
            <param name="srcSampleCount">The source buffer sample count.</param>
            <param name="samples">The buffer with sound data.</param>
            <param name="sampleIndex">Starting point in buffer from
                                      which to create buffer.</param>
            <param name="sampleCount">The number of sample count to
                                      create.</param>
            <param name="flags">Bitwise combination of zero or
                                more flags that controls
                                behavior of the function. This
                                parameter is reserved, must be
                                zero.</param>
            <returns>
            Created sound buffer.
            </returns>
            <seealso cref="T:Neurotec.Sound.NSoundFormat"/>
            <seealso cref="P:Neurotec.Sound.NSoundBuffer.SampleRate"/>                                     
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.FromSoundBuffer(Neurotec.Sound.NSoundFormat,Neurotec.Sound.NSoundBuffer)">
            <summary>
            Creates sound buffer from other sound buffer.
            </summary>
            <param name="soundFormat">The buffer sound format.</param>
            <param name="srcSoundBuffer">The sound buffer.</param>
            <returns>
            Created sound buffer.
            </returns>
            <seealso cref="T:Neurotec.Sound.NSoundFormat"/>          
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.FromSoundBuffer(Neurotec.Sound.NSoundFormat,Neurotec.Sound.NSoundBuffer,System.UInt32)">
            <summary>
            Creates sound buffer from other sound buffer.
            </summary>
            <param name="soundFormat">The buffer sound format.</param>
            <param name="srcSoundBuffer">The sound buffer in sound
                                         buffer.</param>
            <param name="flags">Bitwise combination of zero or
                                more flags that controls
                                behavior of the function. This
                                parameter is reserved, must be
                                zero.</param>
            <returns>
            Created sound buffer.
            </returns>
            <seealso cref="T:Neurotec.Sound.NSoundFormat"/>             
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.FromSoundBuffer(Neurotec.Sound.NSoundFormat,Neurotec.Sound.NSoundBuffer,System.Int32,System.Int32)">
            <summary>
            Creates sound buffer from other sound buffer.
            </summary>
            <param name="soundFormat">The buffer sound format.</param>
            <param name="srcSoundBuffer">The sound buffer.</param>
            <param name="sampleIndex">Starting point in buffer from
                                      which to create sound buffer.</param>
            <param name="sampleCount">The sample count to create in
                                      sound buffer.</param>
            <returns>
            Created sound buffer.
            </returns>
            <seealso cref="T:Neurotec.Sound.NSoundFormat"/>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.FromSoundBuffer(Neurotec.Sound.NSoundFormat,Neurotec.Sound.NSoundBuffer,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates sound buffer from other sound buffer.
            </summary>
            <param name="soundFormat">The buffer sound format.</param>
            <param name="srcSoundBuffer">The sound buffer.</param>
            <param name="sampleIndex">Starting point in buffer from
                                      which to create sound buffer.</param>
            <param name="sampleCount">The sample count to create in
                                      sound buffer.</param>
            <param name="flags">Bitwise combination of zero or
                                more flags that controls
                                behavior of the function. This
                                parameter is reserved, must be
                                zero.</param>
            <returns>
            Created sound buffer.
            </returns>
            <seealso cref="T:Neurotec.Sound.NSoundFormat"/>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.FromFile(System.String)">
            <summary>
            Creates a sound buffer from the specified file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Created sound buffer.</returns>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.FromFile(System.String,System.UInt32)">
            <summary>
            Creates a sound buffer from the specified file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="flags">Reserved; must be zero.</param>
            <returns>Created sound buffer.</returns>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.FromMemory(System.Byte[])">
            <summary>
            Creates a sound buffer from the specified byte array.
            </summary>
            <param name="buffer">The byte array.</param>
            <returns>Created sound buffer.</returns>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.FromMemory(Neurotec.IO.NBuffer)">
            <summary>
            Creates a sound buffer from the specified NBuffer.
            </summary>
            <param name="buffer">The NBuffer.</param>
            <returns>Created sound buffer.</returns>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.FromMemory(Neurotec.IO.NBuffer,System.UInt32)">
            <summary>
            Creates a sound buffer from the specified NBuffer.
            </summary>
            <param name="buffer">The NBuffer.</param>
            <param name="flags">Reserved; must be zero.</param>
            <returns>Created sound buffer.</returns>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.FromMemory(Neurotec.IO.NBuffer,System.UInt32,System.Int32@)">
            <summary>
            Creates a sound buffer from the specified NBuffer.
            </summary>
            <param name="buffer">The NBuffer.</param>
            <param name="flags">Reserved; must be zero.</param>
            <param name="size">[out] Size of the NBuffer.</param>
            <returns>Created sound buffer.</returns>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.FromStream(Neurotec.IO.NStream)">
            <summary>
            Creates a sound buffer from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Created sound buffer.</returns>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.FromStream(Neurotec.IO.NStream,System.UInt32)">
            <summary>
            Creates a sound buffer from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="flags">Reserved; must be zero.</param>
            <returns>Created sound buffer.</returns>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.CopyFrom(Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,Neurotec.IO.NBuffer,System.Int32)">
            <summary>
            Copies the data from the specified sound buffer to the current sound buffer.
            </summary>
            <param name="srcSoundFormat">Source sound format.</param>
            <param name="srcSampleRate">Source sample rate.</param>
            <param name="srcSampleCount">Source sample count.</param>
            <param name="srcSamples">NBuffer containing source samples.</param>
            <param name="sampleIndex">Sample index.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.CopyFrom(Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,Neurotec.IO.NBuffer,System.Int32,System.UInt32)">
            <summary>
            Copies the data from the specified sound buffer to the current sound buffer.
            </summary>
            <param name="srcSoundFormat">Source sound format.</param>
            <param name="srcSampleRate">Source sample rate.</param>
            <param name="srcSampleCount">Source sample count.</param>
            <param name="srcSamples">NBuffer containing source samples.</param>
            <param name="sampleIndex">Sample index.</param>
            <param name="flags">Must be zero.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.CopyFrom(Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,Neurotec.IO.NBuffer,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the data from the specified sound buffer to the current sound buffer.
            </summary>
            <param name="srcSoundFormat">Source sound format.</param>
            <param name="srcSampleRate">Source sample rate.</param>
            <param name="srcSampleCount">Source sample count.</param>
            <param name="samples">NBuffer containing the samples.</param>
            <param name="srcSampleIndex">Source sample index.</param>
            <param name="sampleIndex">Sample index.</param>
            <param name="sampleCount">Sample count.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.CopyFrom(Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,Neurotec.IO.NBuffer,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Copies the data from the specified sound buffer to the current sound buffer.
            </summary>
            <param name="srcSoundFormat">Source sound format.</param>
            <param name="srcSampleRate">Source sample rate.</param>
            <param name="srcSampleCount">Source sample count.</param>
            <param name="samples">NBuffer containing the samples.</param>
            <param name="srcSampleIndex">Source sample index.</param>
            <param name="sampleIndex">Sample index.</param>
            <param name="sampleCount">Sample count.</param>
            <param name="flags">Must be zero.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.CopyFrom(Neurotec.Sound.NSoundFormat,System.Int32,System.Array,System.Array,System.Int32,Neurotec.IO.NBuffer,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Copies the data from the specified sound buffer to the current sound buffer.
            </summary>
            <param name="srcSoundFormat">Source sound format.</param>
            <param name="srcSampleRate">Source sample rate.</param>
            <param name="minValue">The minimum sound sample value of the sound buffer.</param>
            <param name="maxValue">The maximum sound sample value of the sound buffer.</param>
            <param name="srcSampleCount">Source sample count.</param>
            <param name="samples">NBuffer containing the samples.</param>
            <param name="srcSampleIndex">Source sample index.</param>
            <param name="sampleIndex">Sample index.</param>
            <param name="sampleCount">Sample count.</param>
            <param name="flags">Must be zero.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.Append(Neurotec.Sound.NSoundBuffer)">
            <summary>
            Appends sound buffer to this instance.
            </summary>
            <param name="soundBuffer">The sound buffer to append.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.Append(Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,Neurotec.IO.NBuffer)">
            <summary>
            Appends sound buffer to this instance.
            </summary>
            <param name="soundFormat">The buffer sound format.</param>
            <param name="sampleRate">The buffer sample rate.</param>
            <param name="sampleCount">The buffer sample count.</param>
            <param name="samples">The buffer with sound data.</param>
            <seealso cref="T:Neurotec.Sound.NSoundFormat"/>
            <seealso cref="P:Neurotec.Sound.NSoundBuffer.SampleRate"/>  
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.Append(Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,Neurotec.IO.NBuffer,System.UInt32)">
            <summary>
            Appends sound buffer to this instance.
            </summary>
            <param name="soundFormat">The buffer sound format.</param>
            <param name="sampleRate">The buffer sample rate.</param>
            <param name="sampleCount">The buffer sample count.</param>
            <param name="samples">The buffer with sound data.</param>
            <param name="flags">Bitwise combination of zero or
                                more flags that controls behavior
                                of the function. This parameter is
                                reserved, must be zero.</param>       
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.Append(Neurotec.Sound.NSoundFormat,System.Int32,System.Array,System.Array,System.Int32,Neurotec.IO.NBuffer,System.UInt32)">
            <summary>
            Appends sound buffer to this instance.
            </summary>
            <param name="soundFormat">The buffer sound format.</param>
            <param name="sampleRate">The buffer sample rate.</param>
            <param name="minValue">The minimum sound sample value of the sound buffer.</param>
            <param name="maxValue">The maximum sound sample value of the sound buffer.</param>
            <param name="sampleCount">The buffer sample count.</param>
            <param name="samples">The buffer with sound data.</param>
            <param name="flags">Bitwise combination of zero or
                                more flags that controls behavior
                                of the function. This parameter is
                                reserved, must be zero.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.Clear">
            <summary>
            Clears sound buffer.
            </summary>          
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.CopyTo(Neurotec.Sound.NSoundBuffer,System.Int32)">
            <summary>
            Copies sound buffer to destination sound buffer.
            </summary>
            <param name="dstSoundBuffer">The destination sound buffer.</param>
            <param name="dstSampleIndex">The index in the destination
                                         buffer where to copy.</param>        
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.CopyTo(Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,Neurotec.IO.NBuffer,System.Int32)">
            <summary>
            Copies sound buffer to Neurotec.IO.NBuffer.
            </summary>
            <param name="dstSoundFormat">The destination buffer sound
                                         format.</param>
            <param name="dstSampleRate">The destination buffer sample rate.</param>
            <param name="dstSampleCount">The destination buffer sample
                                         count.</param>
            <param name="dstSamples">The destination buffer.</param>
            <param name="dstSampleIndex">The index in the destination
                                         buffer where to copy.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.CopyTo(Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,Neurotec.IO.NBuffer,System.Int32,System.UInt32)">
            <summary>
            Copies sound buffer to Neurotec.IO.NBuffer.
            </summary>
            <param name="dstSoundFormat">The destination buffer sound
                                         format.</param>
            <param name="dstSampleRate">The destination buffer sample rate.</param>
            <param name="dstSampleCount">The destination buffer sample
                                         count.</param>
            <param name="dstSamples">The destination buffer.</param>
            <param name="dstSampleIndex">The index in the destination
                                         buffer where to copy.</param>
            <param name="flags">Bitwise combination of zero or
                                more flags that controls
                                behavior of the function. This
                                parameter is reserved, must be
                                zero.</param>                         
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.CopyTo(System.Int32,Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,Neurotec.IO.NBuffer,System.Int32,System.Int32)">
            <summary>
            Copies sound buffer to Neurotec.IO.NBuffer.
            </summary>
            <param name="sampleIndex">The sample index.</param>
            <param name="dstSoundFormat">The destination buffer sound format.</param>
            <param name="dstSampleRate">The destination buffer sample rate.</param>
            <param name="dstSampleCount">The destination buffer sample count.</param>
            <param name="dstSamples">The destination buffer.</param>
            <param name="dstSampleIndex">The index in the destination buffer where to copy.</param>
            <param name="sampleCount">The sample count.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.CopyTo(System.Int32,Neurotec.Sound.NSoundFormat,System.Int32,System.Int32,Neurotec.IO.NBuffer,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Copies sound buffer to Neurotec.IO.NBuffer.
            </summary>
            <param name="sampleIndex">The sample index.</param>
            <param name="dstSoundFormat">The destination buffer sound format.</param>
            <param name="dstSampleRate">The destination buffer sample rate.</param>
            <param name="dstSampleCount">The destination buffer sample count.</param>
            <param name="dstSamples">The destination buffer.</param>
            <param name="dstSampleIndex">The index in the destination buffer where to copy.</param>
            <param name="sampleCount">The sample count.</param>
            <param name="flags">Bitwise combination of zero or
                                more flags that controls
                                behavior of the function. This
                                parameter is reserved, must be
                                zero.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.CopyTo(System.Int32,Neurotec.Sound.NSoundFormat,System.Int32,System.Array,System.Array,System.Int32,Neurotec.IO.NBuffer,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Copies sound buffer to Neurotec.IO.NBuffer.
            </summary>
            <param name="sampleIndex">The sample index.</param>
            <param name="dstSoundFormat">The destination buffer sound format.</param>
            <param name="dstSampleRate">The destination buffer sample rate.</param>
            <param name="dstMinValue">The minimum sound sample value of the destination sound buffer.</param>
            <param name="dstMaxValue">The maximum sound sample value of the destination sound buffer.</param>
            <param name="dstSampleCount">The destination buffer sample count.</param>
            <param name="dstSamples">The destination buffer.</param>
            <param name="dstSampleIndex">The index in the destination buffer where to copy.</param>
            <param name="sampleCount">The sample count.</param>
            <param name="flags">Bitwise combination of zero or
                                more flags that controls
                                behavior of the function. This
                                parameter is reserved, must be
                                zero.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.Crop(System.Int32,System.Int32)">
            <summary>
            Crops sound buffer.
            </summary>
            <param name="sampleIndex">The index in the sample array
                                      where to copy.</param>
            <param name="sampleCount">The buffer sample count.</param>
            <returns>
            Cropped sound buffer. 
            </returns>                                                
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.Save(System.String)">
            <summary>
            Saves the sound buffer to the specified file.
            </summary>
            <param name="fileName">The name of the file.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.Save(System.String,Neurotec.NObject,System.UInt32)">
            <summary>
            Saves the sound buffer to the specified file.
            </summary>
            <param name="fileName">The name of the file.</param>
            <param name="reserved">Reserved for future use.</param>
            <param name="flags">Reserved; must be zero.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.Save(Neurotec.NObject)">
            <summary>
            Saves the sound buffer to NBuffer.
            </summary>
            <param name="reserved">Reserved for future use.</param>
            <returns>NBuffer to which the NSoundBuffer was saved.</returns>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.Save(Neurotec.NObject,System.UInt32)">
            <summary>
            Saves the sound buffer to NBuffer.
            </summary>
            <param name="reserved">Reserved for future use.</param>
            <param name="flags">Reserved; must be zero.</param>
            <returns>NBuffer to which the NSoundBuffer was saved.</returns>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.Save(Neurotec.IO.NStream,Neurotec.NObject)">
            <summary>
            Saves the sound buffer to the specified stream.
            </summary>
            <param name="stream">The stream to which the sound buffer will be saved.</param>
            <param name="reserved">reserved for future use.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.Save(Neurotec.IO.NStream,Neurotec.NObject,System.UInt32)">
            <summary>
            Saves the sound buffer to the specified stream.
            </summary>
            <param name="stream">The stream to which the sound buffer will be saved.</param>
            <param name="reserved">reserved for future use.</param>
            <param name="flags">Reserved; must be zero.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.GetSample(System.Int32)">
            <summary>
            Retrieves the sample specified by index.
            </summary>
            <param name="sampleIndex">Index of the sample.</param>
            <returns>The sound sample.</returns>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.SetSample(System.Int32,System.Array)">
            <summary>
            Sets the value of the sample specified by index.
            </summary>
            <param name="sampleIndex">Index of the sample.</param>
            <param name="value">New value of the sample.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundBuffer.GetSamples">
            <summary>
            Gets sound samples.
            </summary>
            <returns>NBuffer containing sound samples.</returns>
        </member>
        <member name="P:Neurotec.Sound.NSoundBuffer.SoundFormat">
            <summary>
            Gets Neurotec.Sound.NSoundFormat.
            </summary>
            <value>
            Neurotec.Sound.NSoundFormat.
            </value>                         
        </member>
        <member name="P:Neurotec.Sound.NSoundBuffer.SampleRate">
            <summary>
            Gets the number of samples per second.
            </summary>
            <value>
            The number of samples per second.
            </value>                              
        </member>
        <member name="P:Neurotec.Sound.NSoundBuffer.Length">
            <summary>
            Gets or sets the number of samples actually contained in the sound
            buffer.
            </summary>
            <value>
            The number of samples actually contained in the sound buffer.
            </value>                                                     
        </member>
        <member name="P:Neurotec.Sound.NSoundBuffer.Capacity">
            <summary>
            Gets or sets the number of samples that the sound buffer can
            contain.
            </summary>
            <value>
            The number of samples that the sound buffer can contain. 
            </value>                                                    
        </member>
        <member name="P:Neurotec.Sound.NSoundBuffer.SamplesSize">
            <summary>
            Gets the size of sound buffer.
            </summary>
            <value>
            The size of sound buffer.
            </value>                      
        </member>
        <member name="P:Neurotec.Sound.NSoundBuffer.LongSamplesSize">
            <summary>
            Gets the size of sound buffer.
            </summary>
            <value>
            The size of sound buffer.
            </value>                      
        </member>
        <member name="P:Neurotec.Sound.NSoundBuffer.NativeSamplesSize">
            <summary>
            Gets the size of sound buffer.
            </summary>
            <value>
            The size of sound buffer.
            </value>                      
        </member>
        <member name="P:Neurotec.Sound.NSoundBuffer.MinValue">
            <summary>
            Gets or sets the minimum sound sample value of the sound buffer.
            </summary>
        </member>
        <member name="P:Neurotec.Sound.NSoundBuffer.MaxValue">
            <summary>
            Gets or sets the maximum sound sample value of the sound buffer.
            </summary>
        </member>
        <member name="T:Neurotec.Sound.NSoundType">
            <summary>
            Enumerates sound types.
            </summary>
        </member>
        <member name="F:Neurotec.Sound.NSoundType.Undefined">
            <summary>
            Undefined sound.
            </summary>
        </member>
        <member name="F:Neurotec.Sound.NSoundType.Mono">
            <summary>
            Mono sound.
            </summary>
        </member>
        <member name="F:Neurotec.Sound.NSoundType.Stereo">
            <summary>
            Stereo sound.
            </summary>
        </member>
        <member name="T:Neurotec.Sound.NSoundFormat">
            <summary>
            Provides functionality for working with sound format.
            </summary>
            <remarks>
            Image sound format is not limited to these fields. However
            only these fields are provided for usage with this SDK. 
            </remarks>
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Undefined">
            Undefined sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Mono8U">
            Mono 8 bit unsigned per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Mono8S">
            Mono 8 bit signed per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Mono16U">
            Mono 16 bit unsigned per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Mono16S">
            Mono 16 bit signed per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Mono32U">
            Mono 32 bit unsigned per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Mono32S">
            Mono 32 bit signed per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Mono64U">
            Mono 64 bit unsigned per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Mono64S">
            Mono 64 bit signed per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Mono32F">
            Mono 32 bit float per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Mono64F">
            Mono 64 bit float per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Stereo8U">
            Stereo 8 bit unsigned per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Stereo8S">
            Stereo 8 bit signed per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Stereo16U">
            Stereo 16 bit unsigned per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Stereo16S">
            Stereo 16 bit signed per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Stereo32U">
            Stereo 32 bit unsigned per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Stereo32S">
            Stereo 32 bit signed per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Stereo64U">
            Stereo 64 bit unsigned per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Stereo64S">
            Stereo 64 bit signed per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Stereo32F">
            Stereo 32 bit float per sample sound format.
        </member>
        <member name="F:Neurotec.Sound.NSoundFormat.Stereo64F">
            Stereo 64 bit float per sample sound format.
        </member>
        <member name="M:Neurotec.Sound.NSoundFormat.IsSoundTypeValid(Neurotec.Sound.NSoundType)">
            <summary>
            \Returns true if given sound type is valid; otherwise returns
            false.
            </summary>
            <param name="value">Sound type value.</param>
            <returns>
            True - if sound type value is valid; otherwise returns false.
            </returns>                                                   
        </member>
        <member name="M:Neurotec.Sound.NSoundFormat.CalcBlockNativeSize(System.Int32,System.Int32)">
            <summary>
            Calculates memory block size by given bits per sample and
            \sample count.
            </summary>
            <param name="bitsPerSample">Bits per sound sample.</param>
            <param name="length">Sound sample count.</param>
            <returns>
            Memory block size in bytes. 
            </returns>                                                
        </member>
        <member name="M:Neurotec.Sound.NSoundFormat.CalcBlockSize(System.Int32,System.Int32)">
            <summary>
            Calculates memory block size by given bits per sample and
            \sample count.
            </summary>
            <param name="bitsPerSample">Bits per sound sample.</param>
            <param name="length">Sound sample count.</param>
            <returns>
            Memory block size in bytes. 
            </returns>                                                
        </member>
        <member name="M:Neurotec.Sound.NSoundFormat.CalcBlockLongSize(System.Int32,System.Int32)">
            <summary>
            Calculates memory block size by given bits per sample and
            \sample count.
            </summary>
            <param name="bitsPerSample">Bits per sound sample.</param>
            <param name="length">Sound sample count.</param>
            <returns>
            Memory block size in bytes.
            </returns>                                                
        </member>
        <member name="P:Neurotec.Sound.NSoundFormat.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.Sound.NSoundFormat.NSoundTypeNativeType">
            <summary>
            Defines the native type of the sound type.
            </summary>
        </member>
        <member name="M:Neurotec.Sound.NSoundFormat.#ctor(Neurotec.Sound.NSoundType,System.Int32,Neurotec.Media.NChannelFormat,System.Int32)">
            <summary>
            Constructs sound format object.
            </summary>
            <param name="soundType">[in] Sound type.</param>
            <param name="channelCount">[in] Channel count.</param>
            <param name="channelFormat">[in] Sound format.</param>
            <param name="bitsPerChannel">[in] Bits count per sample per
                                         channel.</param>              
        </member>
        <member name="M:Neurotec.Sound.NSoundFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the
            current Object.
            </summary>
            <param name="obj">The Object to compare with the current
                              Object.</param>
            <returns>
            <i>true</i> if the specified Object is equal to the current
            Object; otherwise, <i>false</i>. 
            </returns>                                                 
        </member>
        <member name="M:Neurotec.Sound.NSoundFormat.GetHashCode">
            <summary>
            Gets the hash code. Is intended for a hash function for a
            particular type. GetHashCode is suitable for use in hashing
            algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current Object. 
            </returns>                                                 
        </member>
        <member name="M:Neurotec.Sound.NSoundFormat.ToString">
            <summary>
            Retrieves string representation of NSoundFormat object.
            </summary>
            <returns>
            String representation of NSoundFormat object.
            </returns>                                             
        </member>
        <member name="M:Neurotec.Sound.NSoundFormat.ToString(System.String)">
            <summary>
            Retrieves string representation of NSoundFormat object.
            </summary>
            <param name="format">Reserved.</param>
            <returns>String representation of NSoundFormat object.</returns>
        </member>
        <member name="M:Neurotec.Sound.NSoundFormat.GetBlockNativeSize(System.Int32)">
            <summary>
            \Returns memory block size for current sound format by given
            sound sample count.
            </summary>
            <param name="length">Sound sample count.</param>
            <returns>
            \Returns memory block size for current sound format by given
            sound sample count. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Sound.NSoundFormat.GetBlockSize(System.Int32)">
            <summary>
            \Returns memory block size for current sound format by given
            sound sample count.
            </summary>
            <param name="length">Sound sample count.</param>
            <returns>
            \Returns memory block size for current sound format by given
            sound sample count. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Sound.NSoundFormat.GetBlockLongSize(System.Int32)">
            <summary>
            \Returns memory block size for current sound format by given
            sound sample count.
            </summary>
            <param name="length">Sound sample count.</param>
            <returns>
            \Returns memory block size for current sound format by given
            sound sample count.
            </returns>                                                  
        </member>
        <member name="P:Neurotec.Sound.NSoundFormat.IsValid">
            <summary>
            Checks whether current NSoundFormat value is valid.
            </summary>
            <returns>
            <i>true</i> if the object is valid NSoundFormat, <i>false</i>
            if not. 
            </returns>                                                   
        </member>
        <member name="P:Neurotec.Sound.NSoundFormat.SoundType">
            <summary>
            Gets sound type of current sound format.
            </summary>
            <value>
            Value represents sound type of current sound format.
            </value>                                            
        </member>
        <member name="M:Neurotec.Sound.NSoundFormat.op_Explicit(Neurotec.Sound.NSoundFormat)~System.UInt32">
            <summary>
            Gets value field of NSoundFormat object.
            </summary>
            <param name="soundFormat">NSoundFormat object.</param>
        </member>
        <member name="M:Neurotec.Sound.NSoundFormat.op_Explicit(System.UInt32)~Neurotec.Sound.NSoundFormat">
            <summary>
            This conversion operator converts from a uint type to a
            NSoundFormat type
            </summary>
            <param name="value">value to be converted</param>      
        </member>
        <member name="M:Neurotec.Sound.NSoundFormat.op_Equality(Neurotec.Sound.NSoundFormat,Neurotec.Sound.NSoundFormat)">
            <summary>
            Checks if two soundFormats are equal.
            </summary>
            <param name="soundFormat1">First soundFormat to be compared.</param>
            <param name="soundFormat2">second soundFormat to be
                                       compared.</param>
            <returns>
            True if soundFormats are equal, false otherwise. 
            </returns>                                                          
        </member>
        <member name="M:Neurotec.Sound.NSoundFormat.op_Inequality(Neurotec.Sound.NSoundFormat,Neurotec.Sound.NSoundFormat)">
            <summary>
            Checks if two sound formats are not equal.
            </summary>
            <param name="soundFormat1">First sound format to be
                                       compared.</param>
            <param name="soundFormat2">Second sound format to be
                                       compared.</param>
            <returns>
            True if soundFormats are not equal, false if equal. 
            </returns>                                          
        </member>
        <member name="M:Neurotec.Sound.NSoundFormat.GetChannelType">
            <summary>
            Retrieves the current channel type.
            </summary>
            <returns>The current channel type.</returns>
        </member>
        <member name="P:Neurotec.Sound.NSoundFormat.ChannelCount">
            <summary>
            Gets channel count of current sound format.
            </summary>
            <value>
            Value represents channel count of current sound format.
            </value>                                               
        </member>
        <member name="P:Neurotec.Sound.NSoundFormat.ChannelFormat">
            <summary>
            Gets channel format of current sound format.
            </summary>
            <value>
            Value represents channel format of current sound format.
            </value>                                                
        </member>
        <member name="P:Neurotec.Sound.NSoundFormat.BitsPerChannel">
            <summary>
            Gets bit count per sound sample per channel.
            </summary>
            <value>
            Value represents bit count per channel. 
            </value>                                    
        </member>
        <member name="P:Neurotec.Sound.NSoundFormat.BitsPerValue">
            <summary>
            Gets bit count per sound sample value. For sound format it is
            the same value as BitsPerSample.
            </summary>
            <value>
            Value represents bit count per sound sample value. 
            </value>                                                     
        </member>
        <member name="P:Neurotec.Sound.NSoundFormat.BitsPerSample">
            <summary>
            Gets bit count per sample.
            </summary>
            <value>
            Value represents bit count per sound sample. 
            </value>                                     
        </member>
        <member name="P:Neurotec.Sound.NSoundFormat.BytesPerChannel">
            <summary>
            Gets byte count per sound sample per channel.
            </summary>
            <value>
            Value represents byte count per sound sample per channel. 
            </value>                                                  
        </member>
        <member name="P:Neurotec.Sound.NSoundFormat.BytesPerValue">
            <summary>
            Gets byte count per sound sample value.
            </summary>
            <value>
            Value represents byte count per sound sample value.
            </value>                                           
        </member>
        <member name="P:Neurotec.Sound.NSoundFormat.BytesPerSample">
            <summary>
            Gets byte count per sound sample.
            </summary>
            <value>
            Value represents byte count per sound sample.
            </value>                                     
        </member>
        <member name="M:Neurotec.Sound.NSoundFormat.Equals(Neurotec.Sound.NSoundFormat)">
            <summary>
            Checks whether the current sound format equals the other ApduClass object.
            </summary>
            <param name="other">The other sound format object.</param>
            <returns><i>true</i> if the formats are equal, else <i>false</i>.</returns>
        </member>
    </members>
</doc>
