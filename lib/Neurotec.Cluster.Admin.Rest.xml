<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neurotec.Cluster.Admin.Rest</name>
    </assembly>
    <members>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.IAcceleratorAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAcceleratorAdminApi.GetAcceleratorAutoStart">
            <summary>
            Get current MMA auto-start setting
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>AutoStart</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAcceleratorAdminApi.GetAcceleratorAutoStartWithHttpInfo">
            <summary>
            Get current MMA auto-start setting
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of AutoStart</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAcceleratorAdminApi.GetAcceleratorType">
            <summary>
            Get accelerator type
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>AcceleratorType</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAcceleratorAdminApi.GetAcceleratorTypeWithHttpInfo">
            <summary>
            Get accelerator type
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of AcceleratorType</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAcceleratorAdminApi.SetAcceleratorAutoStart(Neurotec.Cluster.Admin.Rest.Model.AutoStart)">
            <summary>
            Change MMA auto-start setting
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAcceleratorAdminApi.SetAcceleratorAutoStartWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.AutoStart)">
            <summary>
            Change MMA auto-start setting
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAcceleratorAdminApi.SetAcceleratorType(Neurotec.Cluster.Admin.Rest.Model.AcceleratorType)">
            <summary>
            Change accelerator type
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAcceleratorAdminApi.SetAcceleratorTypeWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.AcceleratorType)">
            <summary>
            Change accelerator type
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAcceleratorAdminApi.GetAcceleratorAutoStartAsync">
            <summary>
            Get current MMA auto-start setting
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of AutoStart</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAcceleratorAdminApi.GetAcceleratorAutoStartAsyncWithHttpInfo">
            <summary>
            Get current MMA auto-start setting
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (AutoStart)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAcceleratorAdminApi.GetAcceleratorTypeAsync">
            <summary>
            Get accelerator type
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of AcceleratorType</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAcceleratorAdminApi.GetAcceleratorTypeAsyncWithHttpInfo">
            <summary>
            Get accelerator type
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (AcceleratorType)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAcceleratorAdminApi.SetAcceleratorAutoStartAsync(Neurotec.Cluster.Admin.Rest.Model.AutoStart)">
            <summary>
            Change MMA auto-start setting
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAcceleratorAdminApi.SetAcceleratorAutoStartAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.AutoStart)">
            <summary>
            Change MMA auto-start setting
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAcceleratorAdminApi.SetAcceleratorTypeAsync(Neurotec.Cluster.Admin.Rest.Model.AcceleratorType)">
            <summary>
            Change accelerator type
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAcceleratorAdminApi.SetAcceleratorTypeAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.AcceleratorType)">
            <summary>
            Change accelerator type
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.#ctor(Neurotec.Cluster.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.GetAcceleratorAutoStart">
            <summary>
            Get current MMA auto-start setting 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>AutoStart</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.GetAcceleratorAutoStartWithHttpInfo">
            <summary>
            Get current MMA auto-start setting 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of AutoStart</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.GetAcceleratorAutoStartAsync">
            <summary>
            Get current MMA auto-start setting 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of AutoStart</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.GetAcceleratorAutoStartAsyncWithHttpInfo">
            <summary>
            Get current MMA auto-start setting 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (AutoStart)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.GetAcceleratorType">
            <summary>
            Get accelerator type 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>AcceleratorType</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.GetAcceleratorTypeWithHttpInfo">
            <summary>
            Get accelerator type 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of AcceleratorType</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.GetAcceleratorTypeAsync">
            <summary>
            Get accelerator type 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of AcceleratorType</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.GetAcceleratorTypeAsyncWithHttpInfo">
            <summary>
            Get accelerator type 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (AcceleratorType)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.SetAcceleratorAutoStart(Neurotec.Cluster.Admin.Rest.Model.AutoStart)">
            <summary>
            Change MMA auto-start setting 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.SetAcceleratorAutoStartWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.AutoStart)">
            <summary>
            Change MMA auto-start setting 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.SetAcceleratorAutoStartAsync(Neurotec.Cluster.Admin.Rest.Model.AutoStart)">
            <summary>
            Change MMA auto-start setting 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.SetAcceleratorAutoStartAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.AutoStart)">
            <summary>
            Change MMA auto-start setting 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.SetAcceleratorType(Neurotec.Cluster.Admin.Rest.Model.AcceleratorType)">
            <summary>
            Change accelerator type 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.SetAcceleratorTypeWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.AcceleratorType)">
            <summary>
            Change accelerator type 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.SetAcceleratorTypeAsync(Neurotec.Cluster.Admin.Rest.Model.AcceleratorType)">
            <summary>
            Change accelerator type 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AcceleratorAdminApi.SetAcceleratorTypeAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.AcceleratorType)">
            <summary>
            Change accelerator type 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.IAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminApi.ChangePassword(Neurotec.Cluster.Admin.Rest.Model.Password)">
            <summary>
            Change password
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminApi.ChangePasswordWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.Password)">
            <summary>
            Change password
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminApi.GetSnmpConfiguration">
            <summary>
            Get current SNMP configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>SnmpConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminApi.GetSnmpConfigurationWithHttpInfo">
            <summary>
            Get current SNMP configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of SnmpConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminApi.SetSnmpConfiguration(Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration)">
            <summary>
            Change SNMP configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminApi.SetSnmpConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration)">
            <summary>
            Change SNMP configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminApi.ChangePasswordAsync(Neurotec.Cluster.Admin.Rest.Model.Password)">
            <summary>
            Change password
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminApi.ChangePasswordAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.Password)">
            <summary>
            Change password
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminApi.GetSnmpConfigurationAsync">
            <summary>
            Get current SNMP configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of SnmpConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminApi.GetSnmpConfigurationAsyncWithHttpInfo">
            <summary>
            Get current SNMP configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (SnmpConfiguration)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminApi.SetSnmpConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration)">
            <summary>
            Change SNMP configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminApi.SetSnmpConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration)">
            <summary>
            Change SNMP configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.AdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.AdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminApi.#ctor(Neurotec.Cluster.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.AdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.AdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.AdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminApi.ChangePassword(Neurotec.Cluster.Admin.Rest.Model.Password)">
            <summary>
            Change password 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminApi.ChangePasswordWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.Password)">
            <summary>
            Change password 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminApi.ChangePasswordAsync(Neurotec.Cluster.Admin.Rest.Model.Password)">
            <summary>
            Change password 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminApi.ChangePasswordAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.Password)">
            <summary>
            Change password 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminApi.GetSnmpConfiguration">
            <summary>
            Get current SNMP configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>SnmpConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminApi.GetSnmpConfigurationWithHttpInfo">
            <summary>
            Get current SNMP configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of SnmpConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminApi.GetSnmpConfigurationAsync">
            <summary>
            Get current SNMP configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of SnmpConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminApi.GetSnmpConfigurationAsyncWithHttpInfo">
            <summary>
            Get current SNMP configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (SnmpConfiguration)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminApi.SetSnmpConfiguration(Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration)">
            <summary>
            Change SNMP configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminApi.SetSnmpConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration)">
            <summary>
            Change SNMP configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminApi.SetSnmpConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration)">
            <summary>
            Change SNMP configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminApi.SetSnmpConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration)">
            <summary>
            Change SNMP configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.IAdminTasksApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminTasksApi.GetTask(System.Nullable{System.Int32})">
            <summary>
            Get task status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminTasksApi.GetTaskWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get task status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminTasksApi.GetTasks(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get statuses of multiple tasks
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="page">Page number (optional, default to 0)</param>
            <param name="size">Page size (optional, default to 10)</param>
            <param name="sort">Field name to sort by (optional)</param>
            <param name="reverse">If true - sort descending, false - ascending (optional, default to false)</param>
            <param name="status">Filter by status (optional)</param>
            <param name="createdAtUpper">Upper createdAt bound (optional)</param>
            <param name="createdAtLower">Lower createdAt bound (optional)</param>
            <param name="endedAtUpper">Upper endedAt bound (optional)</param>
            <param name="endedAtLower">Lower endedAt bound (optional)</param>
            <param name="phrase">Filter by phrase in title or error message (optional)</param>
            <returns>List&lt;Task&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminTasksApi.GetTasksWithHttpInfo(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get statuses of multiple tasks
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="page">Page number (optional, default to 0)</param>
            <param name="size">Page size (optional, default to 10)</param>
            <param name="sort">Field name to sort by (optional)</param>
            <param name="reverse">If true - sort descending, false - ascending (optional, default to false)</param>
            <param name="status">Filter by status (optional)</param>
            <param name="createdAtUpper">Upper createdAt bound (optional)</param>
            <param name="createdAtLower">Lower createdAt bound (optional)</param>
            <param name="endedAtUpper">Upper endedAt bound (optional)</param>
            <param name="endedAtLower">Lower endedAt bound (optional)</param>
            <param name="phrase">Filter by phrase in title or error message (optional)</param>
            <returns>ApiResponse of List&lt;Task&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminTasksApi.GetTaskAsync(System.Nullable{System.Int32})">
            <summary>
            Get task status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminTasksApi.GetTaskAsyncWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get task status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminTasksApi.GetTasksAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get statuses of multiple tasks
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="page">Page number (optional, default to 0)</param>
            <param name="size">Page size (optional, default to 10)</param>
            <param name="sort">Field name to sort by (optional)</param>
            <param name="reverse">If true - sort descending, false - ascending (optional, default to false)</param>
            <param name="status">Filter by status (optional)</param>
            <param name="createdAtUpper">Upper createdAt bound (optional)</param>
            <param name="createdAtLower">Lower createdAt bound (optional)</param>
            <param name="endedAtUpper">Upper endedAt bound (optional)</param>
            <param name="endedAtLower">Lower endedAt bound (optional)</param>
            <param name="phrase">Filter by phrase in title or error message (optional)</param>
            <returns>Task of List&lt;Task&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IAdminTasksApi.GetTasksAsyncWithHttpInfo(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get statuses of multiple tasks
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="page">Page number (optional, default to 0)</param>
            <param name="size">Page size (optional, default to 10)</param>
            <param name="sort">Field name to sort by (optional)</param>
            <param name="reverse">If true - sort descending, false - ascending (optional, default to false)</param>
            <param name="status">Filter by status (optional)</param>
            <param name="createdAtUpper">Upper createdAt bound (optional)</param>
            <param name="createdAtLower">Lower createdAt bound (optional)</param>
            <param name="endedAtUpper">Upper endedAt bound (optional)</param>
            <param name="endedAtLower">Lower endedAt bound (optional)</param>
            <param name="phrase">Filter by phrase in title or error message (optional)</param>
            <returns>Task of ApiResponse (List&lt;Task&gt;)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi.#ctor(Neurotec.Cluster.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi.GetTask(System.Nullable{System.Int32})">
            <summary>
            Get task status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi.GetTaskWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get task status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi.GetTaskAsync(System.Nullable{System.Int32})">
            <summary>
            Get task status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi.GetTaskAsyncWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get task status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi.GetTasks(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get statuses of multiple tasks 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="page">Page number (optional, default to 0)</param>
            <param name="size">Page size (optional, default to 10)</param>
            <param name="sort">Field name to sort by (optional)</param>
            <param name="reverse">If true - sort descending, false - ascending (optional, default to false)</param>
            <param name="status">Filter by status (optional)</param>
            <param name="createdAtUpper">Upper createdAt bound (optional)</param>
            <param name="createdAtLower">Lower createdAt bound (optional)</param>
            <param name="endedAtUpper">Upper endedAt bound (optional)</param>
            <param name="endedAtLower">Lower endedAt bound (optional)</param>
            <param name="phrase">Filter by phrase in title or error message (optional)</param>
            <returns>List&lt;Task&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi.GetTasksWithHttpInfo(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get statuses of multiple tasks 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="page">Page number (optional, default to 0)</param>
            <param name="size">Page size (optional, default to 10)</param>
            <param name="sort">Field name to sort by (optional)</param>
            <param name="reverse">If true - sort descending, false - ascending (optional, default to false)</param>
            <param name="status">Filter by status (optional)</param>
            <param name="createdAtUpper">Upper createdAt bound (optional)</param>
            <param name="createdAtLower">Lower createdAt bound (optional)</param>
            <param name="endedAtUpper">Upper endedAt bound (optional)</param>
            <param name="endedAtLower">Lower endedAt bound (optional)</param>
            <param name="phrase">Filter by phrase in title or error message (optional)</param>
            <returns>ApiResponse of List&lt;Task&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi.GetTasksAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get statuses of multiple tasks 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="page">Page number (optional, default to 0)</param>
            <param name="size">Page size (optional, default to 10)</param>
            <param name="sort">Field name to sort by (optional)</param>
            <param name="reverse">If true - sort descending, false - ascending (optional, default to false)</param>
            <param name="status">Filter by status (optional)</param>
            <param name="createdAtUpper">Upper createdAt bound (optional)</param>
            <param name="createdAtLower">Lower createdAt bound (optional)</param>
            <param name="endedAtUpper">Upper endedAt bound (optional)</param>
            <param name="endedAtLower">Lower endedAt bound (optional)</param>
            <param name="phrase">Filter by phrase in title or error message (optional)</param>
            <returns>Task of List&lt;Task&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.AdminTasksApi.GetTasksAsyncWithHttpInfo(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get statuses of multiple tasks 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="page">Page number (optional, default to 0)</param>
            <param name="size">Page size (optional, default to 10)</param>
            <param name="sort">Field name to sort by (optional)</param>
            <param name="reverse">If true - sort descending, false - ascending (optional, default to false)</param>
            <param name="status">Filter by status (optional)</param>
            <param name="createdAtUpper">Upper createdAt bound (optional)</param>
            <param name="createdAtLower">Lower createdAt bound (optional)</param>
            <param name="endedAtUpper">Upper endedAt bound (optional)</param>
            <param name="endedAtLower">Lower endedAt bound (optional)</param>
            <param name="phrase">Filter by phrase in title or error message (optional)</param>
            <returns>Task of ApiResponse (List&lt;Task&gt;)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.IBiographicAttributesAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IBiographicAttributesAdminApi.GetBiographicAttributes">
            <summary>
            Get current biographic attributes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;BiographicAttribute&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IBiographicAttributesAdminApi.GetBiographicAttributesWithHttpInfo">
            <summary>
            Get current biographic attributes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;BiographicAttribute&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IBiographicAttributesAdminApi.SetBiographicAttributes(System.Collections.Generic.List{Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute})">
            <summary>
            Set new biographic attribute schema
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IBiographicAttributesAdminApi.SetBiographicAttributesWithHttpInfo(System.Collections.Generic.List{Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute})">
            <summary>
            Set new biographic attribute schema
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IBiographicAttributesAdminApi.GetBiographicAttributesAsync">
            <summary>
            Get current biographic attributes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of List&lt;BiographicAttribute&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IBiographicAttributesAdminApi.GetBiographicAttributesAsyncWithHttpInfo">
            <summary>
            Get current biographic attributes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (List&lt;BiographicAttribute&gt;)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IBiographicAttributesAdminApi.SetBiographicAttributesAsync(System.Collections.Generic.List{Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute})">
            <summary>
            Set new biographic attribute schema
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IBiographicAttributesAdminApi.SetBiographicAttributesAsyncWithHttpInfo(System.Collections.Generic.List{Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute})">
            <summary>
            Set new biographic attribute schema
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi.#ctor(Neurotec.Cluster.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi.GetBiographicAttributes">
            <summary>
            Get current biographic attributes 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;BiographicAttribute&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi.GetBiographicAttributesWithHttpInfo">
            <summary>
            Get current biographic attributes 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;BiographicAttribute&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi.GetBiographicAttributesAsync">
            <summary>
            Get current biographic attributes 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of List&lt;BiographicAttribute&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi.GetBiographicAttributesAsyncWithHttpInfo">
            <summary>
            Get current biographic attributes 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (List&lt;BiographicAttribute&gt;)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi.SetBiographicAttributes(System.Collections.Generic.List{Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute})">
            <summary>
            Set new biographic attribute schema 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi.SetBiographicAttributesWithHttpInfo(System.Collections.Generic.List{Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute})">
            <summary>
            Set new biographic attribute schema 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi.SetBiographicAttributesAsync(System.Collections.Generic.List{Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute})">
            <summary>
            Set new biographic attribute schema 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.BiographicAttributesAdminApi.SetBiographicAttributesAsyncWithHttpInfo(System.Collections.Generic.List{Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute})">
            <summary>
            Set new biographic attribute schema 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.IClusterAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IClusterAdminApi.GetTemplateCounts">
            <summary>
            Get template counts and capacity
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>TemplateCounts</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IClusterAdminApi.GetTemplateCountsWithHttpInfo">
            <summary>
            Get template counts and capacity
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of TemplateCounts</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IClusterAdminApi.ResplitDatabase">
            <summary>
            Send resplit database (dbsplit) command to cluster
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IClusterAdminApi.ResplitDatabaseWithHttpInfo">
            <summary>
            Send resplit database (dbsplit) command to cluster
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IClusterAdminApi.StartCluster">
            <summary>
            Send start command to cluster
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IClusterAdminApi.StartClusterWithHttpInfo">
            <summary>
            Send start command to cluster
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IClusterAdminApi.GetTemplateCountsAsync">
            <summary>
            Get template counts and capacity
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of TemplateCounts</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IClusterAdminApi.GetTemplateCountsAsyncWithHttpInfo">
            <summary>
            Get template counts and capacity
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (TemplateCounts)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IClusterAdminApi.ResplitDatabaseAsync">
            <summary>
            Send resplit database (dbsplit) command to cluster
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IClusterAdminApi.ResplitDatabaseAsyncWithHttpInfo">
            <summary>
            Send resplit database (dbsplit) command to cluster
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IClusterAdminApi.StartClusterAsync">
            <summary>
            Send start command to cluster
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IClusterAdminApi.StartClusterAsyncWithHttpInfo">
            <summary>
            Send start command to cluster
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.#ctor(Neurotec.Cluster.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.GetTemplateCounts">
            <summary>
            Get template counts and capacity 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>TemplateCounts</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.GetTemplateCountsWithHttpInfo">
            <summary>
            Get template counts and capacity 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of TemplateCounts</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.GetTemplateCountsAsync">
            <summary>
            Get template counts and capacity 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of TemplateCounts</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.GetTemplateCountsAsyncWithHttpInfo">
            <summary>
            Get template counts and capacity 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (TemplateCounts)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.ResplitDatabase">
            <summary>
            Send resplit database (dbsplit) command to cluster 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.ResplitDatabaseWithHttpInfo">
            <summary>
            Send resplit database (dbsplit) command to cluster 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.ResplitDatabaseAsync">
            <summary>
            Send resplit database (dbsplit) command to cluster 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.ResplitDatabaseAsyncWithHttpInfo">
            <summary>
            Send resplit database (dbsplit) command to cluster 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.StartCluster">
            <summary>
            Send start command to cluster 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.StartClusterWithHttpInfo">
            <summary>
            Send start command to cluster 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.StartClusterAsync">
            <summary>
            Send start command to cluster 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ClusterAdminApi.StartClusterAsyncWithHttpInfo">
            <summary>
            Send start command to cluster 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.BackupConfiguration">
            <summary>
            Create backup of current configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.BackupConfigurationWithHttpInfo">
            <summary>
            Create backup of current configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.GetPreparedConfigurationStatus">
            <summary>
            Get prepared configuration status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>PreparedConfigurationStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.GetPreparedConfigurationStatusWithHttpInfo">
            <summary>
            Get prepared configuration status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of PreparedConfigurationStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.ResetConfiguration">
            <summary>
            Perform factory reset
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.ResetConfigurationWithHttpInfo">
            <summary>
            Perform factory reset
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.RestoreConfiguration(Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup)">
            <summary>
            Restore configuration from backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.RestoreConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup)">
            <summary>
            Restore configuration from backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.SetPreparedConfiguration(Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration)">
            <summary>
            Disable or upload prepared configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.SetPreparedConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration)">
            <summary>
            Disable or upload prepared configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.BackupConfigurationAsync">
            <summary>
            Create backup of current configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.BackupConfigurationAsyncWithHttpInfo">
            <summary>
            Create backup of current configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (FileWrapper)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.GetPreparedConfigurationStatusAsync">
            <summary>
            Get prepared configuration status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of PreparedConfigurationStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.GetPreparedConfigurationStatusAsyncWithHttpInfo">
            <summary>
            Get prepared configuration status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (PreparedConfigurationStatus)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.ResetConfigurationAsync">
            <summary>
            Perform factory reset
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.ResetConfigurationAsyncWithHttpInfo">
            <summary>
            Perform factory reset
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.RestoreConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup)">
            <summary>
            Restore configuration from backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.RestoreConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup)">
            <summary>
            Restore configuration from backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.SetPreparedConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration)">
            <summary>
            Disable or upload prepared configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IConfigurationAdminApi.SetPreparedConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration)">
            <summary>
            Disable or upload prepared configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.#ctor(Neurotec.Cluster.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.BackupConfiguration">
            <summary>
            Create backup of current configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.BackupConfigurationWithHttpInfo">
            <summary>
            Create backup of current configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.BackupConfigurationAsync">
            <summary>
            Create backup of current configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.BackupConfigurationAsyncWithHttpInfo">
            <summary>
            Create backup of current configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (FileWrapper)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.GetPreparedConfigurationStatus">
            <summary>
            Get prepared configuration status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>PreparedConfigurationStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.GetPreparedConfigurationStatusWithHttpInfo">
            <summary>
            Get prepared configuration status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of PreparedConfigurationStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.GetPreparedConfigurationStatusAsync">
            <summary>
            Get prepared configuration status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of PreparedConfigurationStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.GetPreparedConfigurationStatusAsyncWithHttpInfo">
            <summary>
            Get prepared configuration status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (PreparedConfigurationStatus)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.ResetConfiguration">
            <summary>
            Perform factory reset 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.ResetConfigurationWithHttpInfo">
            <summary>
            Perform factory reset 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.ResetConfigurationAsync">
            <summary>
            Perform factory reset 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.ResetConfigurationAsyncWithHttpInfo">
            <summary>
            Perform factory reset 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.RestoreConfiguration(Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup)">
            <summary>
            Restore configuration from backup 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.RestoreConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup)">
            <summary>
            Restore configuration from backup 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.RestoreConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup)">
            <summary>
            Restore configuration from backup 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.RestoreConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup)">
            <summary>
            Restore configuration from backup 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.SetPreparedConfiguration(Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration)">
            <summary>
            Disable or upload prepared configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.SetPreparedConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration)">
            <summary>
            Disable or upload prepared configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.SetPreparedConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration)">
            <summary>
            Disable or upload prepared configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ConfigurationAdminApi.SetPreparedConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration)">
            <summary>
            Disable or upload prepared configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.ClearDatabase">
            <summary>
            Clear database (delete all templates)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.ClearDatabaseWithHttpInfo">
            <summary>
            Clear database (delete all templates)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetDatabaseBackup(System.IO.Stream)">
            <summary>
            Create database backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetDatabaseBackupWithHttpInfo(System.IO.Stream)">
            <summary>
            Create database backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetDatabaseStatus">
            <summary>
            Get database status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>DatabaseStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetDatabaseStatusWithHttpInfo">
            <summary>
            Get database status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of DatabaseStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetDbidsCsv">
            <summary>
            Get enrolled templates dbids
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetDbidsCsvWithHttpInfo">
            <summary>
            Get enrolled templates dbids
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetTemplate(System.String)">
            <summary>
            Get enrolled template
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="dbid"></param>
            <returns>FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetTemplateWithHttpInfo(System.String)">
            <summary>
            Get enrolled template
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="dbid"></param>
            <returns>ApiResponse of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetTemplateCount">
            <summary>
            Get template count
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>TemplateCount</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetTemplateCountWithHttpInfo">
            <summary>
            Get template count
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of TemplateCount</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.RestoreDatabase(System.Byte[])">
            <summary>
            Restore database from backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.RestoreDatabaseWithHttpInfo(System.Byte[])">
            <summary>
            Restore database from backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"></param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.ClearDatabaseAsync">
            <summary>
            Clear database (delete all templates)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.ClearDatabaseAsyncWithHttpInfo">
            <summary>
            Clear database (delete all templates)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetDatabaseBackupAsync(System.IO.Stream)">
            <summary>
            Create database backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetDatabaseBackupAsyncWithHttpInfo(System.IO.Stream)">
            <summary>
            Create database backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetDatabaseStatusAsync">
            <summary>
            Get database status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of DatabaseStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetDatabaseStatusAsyncWithHttpInfo">
            <summary>
            Get database status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (DatabaseStatus)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetDbidsCsvAsync">
            <summary>
            Get enrolled templates dbids
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetDbidsCsvAsyncWithHttpInfo">
            <summary>
            Get enrolled templates dbids
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetTemplateAsync(System.String)">
            <summary>
            Get enrolled template
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="dbid"></param>
            <returns>Task of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetTemplateAsyncWithHttpInfo(System.String)">
            <summary>
            Get enrolled template
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="dbid"></param>
            <returns>Task of ApiResponse (FileWrapper)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetTemplateCountAsync">
            <summary>
            Get template count
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of TemplateCount</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.GetTemplateCountAsyncWithHttpInfo">
            <summary>
            Get template count
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (TemplateCount)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.RestoreDatabaseAsync(System.IO.Stream)">
            <summary>
            Restore database from backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"></param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IDatabaseAdminApi.RestoreDatabaseAsyncWithHttpInfo(System.IO.Stream)">
            <summary>
            Restore database from backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"></param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.#ctor(Neurotec.Cluster.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.ClearDatabase">
            <summary>
            Clear database (delete all templates) 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.ClearDatabaseWithHttpInfo">
            <summary>
            Clear database (delete all templates) 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.ClearDatabaseAsync">
            <summary>
            Clear database (delete all templates) 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.ClearDatabaseAsyncWithHttpInfo">
            <summary>
            Clear database (delete all templates) 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetDatabaseBackup(System.IO.Stream)">
            <summary>
            Create database backup 
            </summary>
            <param name="destinationStream">Destination stream where to write backup data.</param>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>string</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetDatabaseBackupWithHttpInfo(System.IO.Stream)">
            <summary>
            Create database backup 
            </summary>
            <param name="destinationStream">Destination stream where to write backup data.</param>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of string</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetDatabaseBackupAsync(System.IO.Stream)">
            <summary>
            Create database backup 
            </summary>
            <param name="destinationStream">Destination stream where to write backup data.</param>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of string</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetDatabaseBackupAsyncWithHttpInfo(System.IO.Stream)">
            <summary>
            Create database backup 
            </summary>
            <param name="destinationStream">Destination stream where to write backup data.</param>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (string)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetDatabaseStatus">
            <summary>
            Get database status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>DatabaseStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetDatabaseStatusWithHttpInfo">
            <summary>
            Get database status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of DatabaseStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetDatabaseStatusAsync">
            <summary>
            Get database status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of DatabaseStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetDatabaseStatusAsyncWithHttpInfo">
            <summary>
            Get database status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (DatabaseStatus)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetDbidsCsv">
            <summary>
            Get enrolled templates dbids 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetDbidsCsvWithHttpInfo">
            <summary>
            Get enrolled templates dbids 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetDbidsCsvAsync">
            <summary>
            Get enrolled templates dbids 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetDbidsCsvAsyncWithHttpInfo">
            <summary>
            Get enrolled templates dbids 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetTemplate(System.String)">
            <summary>
            Get enrolled template 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="dbid"></param>
            <returns>FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetTemplateWithHttpInfo(System.String)">
            <summary>
            Get enrolled template 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="dbid"></param>
            <returns>ApiResponse of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetTemplateAsync(System.String)">
            <summary>
            Get enrolled template 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="dbid"></param>
            <returns>Task of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetTemplateAsyncWithHttpInfo(System.String)">
            <summary>
            Get enrolled template 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="dbid"></param>
            <returns>Task of ApiResponse (FileWrapper)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetTemplateCount">
            <summary>
            Get template count 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>TemplateCount</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetTemplateCountWithHttpInfo">
            <summary>
            Get template count 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of TemplateCount</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetTemplateCountAsync">
            <summary>
            Get template count 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of TemplateCount</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.GetTemplateCountAsyncWithHttpInfo">
            <summary>
            Get template count 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (TemplateCount)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.RestoreDatabase(System.Byte[])">
            <summary>
            Restore database from backup 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.RestoreDatabaseWithHttpInfo(System.Byte[])">
            <summary>
            Restore database from backup 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"></param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.RestoreDatabaseAsync(System.IO.Stream)">
            <summary>
            Restore database from backup 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"></param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.DatabaseAdminApi.RestoreDatabaseAsyncWithHttpInfo(System.IO.Stream)">
            <summary>
            Restore database from backup 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"></param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.ILicensingAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ILicensingAdminApi.GetLicensingConfiguration">
            <summary>
            Get current licensing configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>LicensingConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ILicensingAdminApi.GetLicensingConfigurationWithHttpInfo">
            <summary>
            Get current licensing configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of LicensingConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ILicensingAdminApi.GetLicensingStatus">
            <summary>
            Get licensing status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>LicensingStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ILicensingAdminApi.GetLicensingStatusWithHttpInfo">
            <summary>
            Get licensing status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of LicensingStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ILicensingAdminApi.SetLicensingConfiguration(Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration)">
            <summary>
            Change licensing configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ILicensingAdminApi.SetLicensingConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration)">
            <summary>
            Change licensing configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ILicensingAdminApi.GetLicensingConfigurationAsync">
            <summary>
            Get current licensing configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of LicensingConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ILicensingAdminApi.GetLicensingConfigurationAsyncWithHttpInfo">
            <summary>
            Get current licensing configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (LicensingConfiguration)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ILicensingAdminApi.GetLicensingStatusAsync">
            <summary>
            Get licensing status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of LicensingStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ILicensingAdminApi.GetLicensingStatusAsyncWithHttpInfo">
            <summary>
            Get licensing status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (LicensingStatus)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ILicensingAdminApi.SetLicensingConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration)">
            <summary>
            Change licensing configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ILicensingAdminApi.SetLicensingConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration)">
            <summary>
            Change licensing configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.#ctor(Neurotec.Cluster.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.GetLicensingConfiguration">
            <summary>
            Get current licensing configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>LicensingConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.GetLicensingConfigurationWithHttpInfo">
            <summary>
            Get current licensing configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of LicensingConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.GetLicensingConfigurationAsync">
            <summary>
            Get current licensing configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of LicensingConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.GetLicensingConfigurationAsyncWithHttpInfo">
            <summary>
            Get current licensing configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (LicensingConfiguration)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.GetLicensingStatus">
            <summary>
            Get licensing status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>LicensingStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.GetLicensingStatusWithHttpInfo">
            <summary>
            Get licensing status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of LicensingStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.GetLicensingStatusAsync">
            <summary>
            Get licensing status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of LicensingStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.GetLicensingStatusAsyncWithHttpInfo">
            <summary>
            Get licensing status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (LicensingStatus)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.SetLicensingConfiguration(Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration)">
            <summary>
            Change licensing configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.SetLicensingConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration)">
            <summary>
            Change licensing configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.SetLicensingConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration)">
            <summary>
            Change licensing configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.LicensingAdminApi.SetLicensingConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration)">
            <summary>
            Change licensing configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.INetworkAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INetworkAdminApi.GetNetworkConfiguration">
            <summary>
            Get current network configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>NetworkConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INetworkAdminApi.GetNetworkConfigurationWithHttpInfo">
            <summary>
            Get current network configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of NetworkConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INetworkAdminApi.SetNetworkConfiguration(Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration)">
            <summary>
            Change network configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INetworkAdminApi.SetNetworkConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration)">
            <summary>
            Change network configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INetworkAdminApi.GetNetworkConfigurationAsync">
            <summary>
            Get current network configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of NetworkConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INetworkAdminApi.GetNetworkConfigurationAsyncWithHttpInfo">
            <summary>
            Get current network configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (NetworkConfiguration)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INetworkAdminApi.SetNetworkConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration)">
            <summary>
            Change network configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INetworkAdminApi.SetNetworkConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration)">
            <summary>
            Change network configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi.#ctor(Neurotec.Cluster.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi.GetNetworkConfiguration">
            <summary>
            Get current network configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>NetworkConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi.GetNetworkConfigurationWithHttpInfo">
            <summary>
            Get current network configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of NetworkConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi.GetNetworkConfigurationAsync">
            <summary>
            Get current network configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of NetworkConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi.GetNetworkConfigurationAsyncWithHttpInfo">
            <summary>
            Get current network configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (NetworkConfiguration)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi.SetNetworkConfiguration(Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration)">
            <summary>
            Change network configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi.SetNetworkConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration)">
            <summary>
            Change network configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi.SetNetworkConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration)">
            <summary>
            Change network configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NetworkAdminApi.SetNetworkConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration)">
            <summary>
            Change network configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetFullNodeLog">
            <summary>
            Download full node log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetFullNodeLogWithHttpInfo">
            <summary>
            Download full node log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetLocalNodeInfo">
            <summary>
            Get local node info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>NodeInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetLocalNodeInfoWithHttpInfo">
            <summary>
            Get local node info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of NodeInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetNodeConfiguration">
            <summary>
            Get current node configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>NodeConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetNodeConfigurationWithHttpInfo">
            <summary>
            Get current node configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of NodeConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetNodeLog(System.Nullable{System.Int32})">
            <summary>
            Get last node log entries
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>List&lt;JournalEntry&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetNodeLogWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get last node log entries
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>ApiResponse of List&lt;JournalEntry&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetShortNodeLog">
            <summary>
            Get short node log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetShortNodeLogWithHttpInfo">
            <summary>
            Get short node log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.KillLocalNode">
            <summary>
            Kill local node process
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.KillLocalNodeWithHttpInfo">
            <summary>
            Kill local node process
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.SetNodeConfiguration(Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration)">
            <summary>
            Change node configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.SetNodeConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration)">
            <summary>
            Change node configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.StartLocalNode">
            <summary>
            Start local node process
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.StartLocalNodeWithHttpInfo">
            <summary>
            Start local node process
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.StopLocalNode">
            <summary>
            Stop local node process
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.StopLocalNodeWithHttpInfo">
            <summary>
            Stop local node process
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetFullNodeLogAsync">
            <summary>
            Download full node log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetFullNodeLogAsyncWithHttpInfo">
            <summary>
            Download full node log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetLocalNodeInfoAsync">
            <summary>
            Get local node info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of NodeInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetLocalNodeInfoAsyncWithHttpInfo">
            <summary>
            Get local node info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (NodeInfo)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetNodeConfigurationAsync">
            <summary>
            Get current node configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of NodeConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetNodeConfigurationAsyncWithHttpInfo">
            <summary>
            Get current node configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (NodeConfiguration)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetNodeLogAsync(System.Nullable{System.Int32})">
            <summary>
            Get last node log entries
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>Task of List&lt;JournalEntry&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetNodeLogAsyncWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get last node log entries
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>Task of ApiResponse (List&lt;JournalEntry&gt;)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetShortNodeLogAsync">
            <summary>
            Get short node log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.GetShortNodeLogAsyncWithHttpInfo">
            <summary>
            Get short node log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (FileWrapper)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.KillLocalNodeAsync">
            <summary>
            Kill local node process
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.KillLocalNodeAsyncWithHttpInfo">
            <summary>
            Kill local node process
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.SetNodeConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration)">
            <summary>
            Change node configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.SetNodeConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration)">
            <summary>
            Change node configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.StartLocalNodeAsync">
            <summary>
            Start local node process
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.StartLocalNodeAsyncWithHttpInfo">
            <summary>
            Start local node process
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.StopLocalNodeAsync">
            <summary>
            Stop local node process
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodeAdminApi.StopLocalNodeAsyncWithHttpInfo">
            <summary>
            Stop local node process
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.#ctor(Neurotec.Cluster.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetFullNodeLog">
            <summary>
            Download full node log 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetFullNodeLogWithHttpInfo">
            <summary>
            Download full node log 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetFullNodeLogAsync">
            <summary>
            Download full node log 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetFullNodeLogAsyncWithHttpInfo">
            <summary>
            Download full node log 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetLocalNodeInfo">
            <summary>
            Get local node info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>NodeInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetLocalNodeInfoWithHttpInfo">
            <summary>
            Get local node info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of NodeInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetLocalNodeInfoAsync">
            <summary>
            Get local node info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of NodeInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetLocalNodeInfoAsyncWithHttpInfo">
            <summary>
            Get local node info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (NodeInfo)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetNodeConfiguration">
            <summary>
            Get current node configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>NodeConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetNodeConfigurationWithHttpInfo">
            <summary>
            Get current node configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of NodeConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetNodeConfigurationAsync">
            <summary>
            Get current node configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of NodeConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetNodeConfigurationAsyncWithHttpInfo">
            <summary>
            Get current node configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (NodeConfiguration)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetNodeLog(System.Nullable{System.Int32})">
            <summary>
            Get last node log entries 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>List&lt;JournalEntry&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetNodeLogWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get last node log entries 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>ApiResponse of List&lt;JournalEntry&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetNodeLogAsync(System.Nullable{System.Int32})">
            <summary>
            Get last node log entries 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>Task of List&lt;JournalEntry&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetNodeLogAsyncWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get last node log entries 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>Task of ApiResponse (List&lt;JournalEntry&gt;)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetShortNodeLog">
            <summary>
            Get short node log 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetShortNodeLogWithHttpInfo">
            <summary>
            Get short node log 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetShortNodeLogAsync">
            <summary>
            Get short node log 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.GetShortNodeLogAsyncWithHttpInfo">
            <summary>
            Get short node log 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (FileWrapper)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.KillLocalNode">
            <summary>
            Kill local node process 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.KillLocalNodeWithHttpInfo">
            <summary>
            Kill local node process 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.KillLocalNodeAsync">
            <summary>
            Kill local node process 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.KillLocalNodeAsyncWithHttpInfo">
            <summary>
            Kill local node process 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.SetNodeConfiguration(Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration)">
            <summary>
            Change node configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.SetNodeConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration)">
            <summary>
            Change node configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.SetNodeConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration)">
            <summary>
            Change node configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.SetNodeConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration)">
            <summary>
            Change node configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.StartLocalNode">
            <summary>
            Start local node process 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.StartLocalNodeWithHttpInfo">
            <summary>
            Start local node process 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.StartLocalNodeAsync">
            <summary>
            Start local node process 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.StartLocalNodeAsyncWithHttpInfo">
            <summary>
            Start local node process 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.StopLocalNode">
            <summary>
            Stop local node process 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.StopLocalNodeWithHttpInfo">
            <summary>
            Stop local node process 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.StopLocalNodeAsync">
            <summary>
            Stop local node process 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodeAdminApi.StopLocalNodeAsyncWithHttpInfo">
            <summary>
            Stop local node process 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.INodesAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodesAdminApi.GetNodeInfo(System.Nullable{System.Int32})">
            <summary>
            Get node info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>NodeInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodesAdminApi.GetNodeInfoWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get node info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>ApiResponse of NodeInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodesAdminApi.GetNodesInfo">
            <summary>
            Get nodes info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;NodeInfo&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodesAdminApi.GetNodesInfoWithHttpInfo">
            <summary>
            Get nodes info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;NodeInfo&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodesAdminApi.KillNode(System.Nullable{System.Int32})">
            <summary>
            Kill node
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodesAdminApi.KillNodeWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Kill node
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodesAdminApi.StopNode(System.Nullable{System.Int32})">
            <summary>
            Stop node
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodesAdminApi.StopNodeWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Stop node
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodesAdminApi.GetNodeInfoAsync(System.Nullable{System.Int32})">
            <summary>
            Get node info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of NodeInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodesAdminApi.GetNodeInfoAsyncWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get node info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of ApiResponse (NodeInfo)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodesAdminApi.GetNodesInfoAsync">
            <summary>
            Get nodes info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of List&lt;NodeInfo&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodesAdminApi.GetNodesInfoAsyncWithHttpInfo">
            <summary>
            Get nodes info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (List&lt;NodeInfo&gt;)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodesAdminApi.KillNodeAsync(System.Nullable{System.Int32})">
            <summary>
            Kill node
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodesAdminApi.KillNodeAsyncWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Kill node
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodesAdminApi.StopNodeAsync(System.Nullable{System.Int32})">
            <summary>
            Stop node
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.INodesAdminApi.StopNodeAsyncWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Stop node
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.#ctor(Neurotec.Cluster.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.GetNodeInfo(System.Nullable{System.Int32})">
            <summary>
            Get node info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>NodeInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.GetNodeInfoWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get node info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>ApiResponse of NodeInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.GetNodeInfoAsync(System.Nullable{System.Int32})">
            <summary>
            Get node info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of NodeInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.GetNodeInfoAsyncWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get node info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of ApiResponse (NodeInfo)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.GetNodesInfo">
            <summary>
            Get nodes info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;NodeInfo&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.GetNodesInfoWithHttpInfo">
            <summary>
            Get nodes info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;NodeInfo&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.GetNodesInfoAsync">
            <summary>
            Get nodes info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of List&lt;NodeInfo&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.GetNodesInfoAsyncWithHttpInfo">
            <summary>
            Get nodes info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (List&lt;NodeInfo&gt;)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.KillNode(System.Nullable{System.Int32})">
            <summary>
            Kill node 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.KillNodeWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Kill node 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.KillNodeAsync(System.Nullable{System.Int32})">
            <summary>
            Kill node 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.KillNodeAsyncWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Kill node 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.StopNode(System.Nullable{System.Int32})">
            <summary>
            Stop node 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.StopNodeWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Stop node 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.StopNodeAsync(System.Nullable{System.Int32})">
            <summary>
            Stop node 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.NodesAdminApi.StopNodeAsyncWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Stop node 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.IOsAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IOsAdminApi.GetSystemLog">
            <summary>
            Download system logs
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IOsAdminApi.GetSystemLogWithHttpInfo">
            <summary>
            Download system logs
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IOsAdminApi.Reboot">
            <summary>
            Perform OS reboot
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IOsAdminApi.RebootWithHttpInfo">
            <summary>
            Perform OS reboot
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IOsAdminApi.Shutdown">
            <summary>
            Perform OS shutdown
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IOsAdminApi.ShutdownWithHttpInfo">
            <summary>
            Perform OS shutdown
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IOsAdminApi.GetSystemLogAsync">
            <summary>
            Download system logs
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IOsAdminApi.GetSystemLogAsyncWithHttpInfo">
            <summary>
            Download system logs
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IOsAdminApi.RebootAsync">
            <summary>
            Perform OS reboot
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IOsAdminApi.RebootAsyncWithHttpInfo">
            <summary>
            Perform OS reboot
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IOsAdminApi.ShutdownAsync">
            <summary>
            Perform OS shutdown
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IOsAdminApi.ShutdownAsyncWithHttpInfo">
            <summary>
            Perform OS shutdown
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.#ctor(Neurotec.Cluster.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.GetSystemLog">
            <summary>
            Download system logs 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.GetSystemLogWithHttpInfo">
            <summary>
            Download system logs 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.GetSystemLogAsync">
            <summary>
            Download system logs 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.GetSystemLogAsyncWithHttpInfo">
            <summary>
            Download system logs 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.Reboot">
            <summary>
            Perform OS reboot 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.RebootWithHttpInfo">
            <summary>
            Perform OS reboot 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.RebootAsync">
            <summary>
            Perform OS reboot 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.RebootAsyncWithHttpInfo">
            <summary>
            Perform OS reboot 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.Shutdown">
            <summary>
            Perform OS shutdown 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.ShutdownWithHttpInfo">
            <summary>
            Perform OS shutdown 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.ShutdownAsync">
            <summary>
            Perform OS shutdown 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.OsAdminApi.ShutdownAsyncWithHttpInfo">
            <summary>
            Perform OS shutdown 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.IReplicationAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IReplicationAdminApi.GetReplicationStatus">
            <summary>
            Get replication status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ReplicationStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IReplicationAdminApi.GetReplicationStatusWithHttpInfo">
            <summary>
            Get replication status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of ReplicationStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IReplicationAdminApi.SetReplicationConfiguration(Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration)">
            <summary>
            Change replication configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IReplicationAdminApi.SetReplicationConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration)">
            <summary>
            Change replication configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IReplicationAdminApi.SetReplicationSourceConfiguration(Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration)">
            <summary>
            Change replication source configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IReplicationAdminApi.SetReplicationSourceConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration)">
            <summary>
            Change replication source configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IReplicationAdminApi.GetReplicationStatusAsync">
            <summary>
            Get replication status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ReplicationStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IReplicationAdminApi.GetReplicationStatusAsyncWithHttpInfo">
            <summary>
            Get replication status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (ReplicationStatus)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IReplicationAdminApi.SetReplicationConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration)">
            <summary>
            Change replication configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IReplicationAdminApi.SetReplicationConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration)">
            <summary>
            Change replication configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IReplicationAdminApi.SetReplicationSourceConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration)">
            <summary>
            Change replication source configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IReplicationAdminApi.SetReplicationSourceConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration)">
            <summary>
            Change replication source configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.#ctor(Neurotec.Cluster.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.GetReplicationStatus">
            <summary>
            Get replication status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ReplicationStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.GetReplicationStatusWithHttpInfo">
            <summary>
            Get replication status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of ReplicationStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.GetReplicationStatusAsync">
            <summary>
            Get replication status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ReplicationStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.GetReplicationStatusAsyncWithHttpInfo">
            <summary>
            Get replication status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (ReplicationStatus)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.SetReplicationConfiguration(Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration)">
            <summary>
            Change replication configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.SetReplicationConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration)">
            <summary>
            Change replication configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.SetReplicationConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration)">
            <summary>
            Change replication configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.SetReplicationConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration)">
            <summary>
            Change replication configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.SetReplicationSourceConfiguration(Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration)">
            <summary>
            Change replication source configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.SetReplicationSourceConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration)">
            <summary>
            Change replication source configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.SetReplicationSourceConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration)">
            <summary>
            Change replication source configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ReplicationAdminApi.SetReplicationSourceConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration)">
            <summary>
            Change replication source configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetFullServerLog">
            <summary>
            Download full server log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetFullServerLogWithHttpInfo">
            <summary>
            Download full server log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetSecondaryServerConfiguration">
            <summary>
            Get current secondary server configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>SecondaryServerConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetSecondaryServerConfigurationWithHttpInfo">
            <summary>
            Get current secondary server configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of SecondaryServerConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetServerConfiguration">
            <summary>
            Get current server configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ServerConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetServerConfigurationWithHttpInfo">
            <summary>
            Get current server configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of ServerConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetServerInfo">
            <summary>
            Get server info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ServerInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetServerInfoWithHttpInfo">
            <summary>
            Get server info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of ServerInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetServerLog(System.Nullable{System.Int32})">
            <summary>
            Get last server log entries
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>List&lt;JournalEntry&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetServerLogWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get last server log entries
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>ApiResponse of List&lt;JournalEntry&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetShortServerLog">
            <summary>
            Get short server log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetShortServerLogWithHttpInfo">
            <summary>
            Get short server log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.KillServer">
            <summary>
            Kill server
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.KillServerWithHttpInfo">
            <summary>
            Kill server
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.SetSecondaryServerConfiguration(Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration)">
            <summary>
            Change secondary server configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.SetSecondaryServerConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration)">
            <summary>
            Change secondary server configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.SetServerConfiguration(Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration)">
            <summary>
            Change server configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.SetServerConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration)">
            <summary>
            Change server configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.StartServer">
            <summary>
            Start server
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.StartServerWithHttpInfo">
            <summary>
            Start server
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.StopServer">
            <summary>
            Stop server
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.StopServerWithHttpInfo">
            <summary>
            Stop server
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetFullServerLogAsync">
            <summary>
            Download full server log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetFullServerLogAsyncWithHttpInfo">
            <summary>
            Download full server log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetSecondaryServerConfigurationAsync">
            <summary>
            Get current secondary server configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of SecondaryServerConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetSecondaryServerConfigurationAsyncWithHttpInfo">
            <summary>
            Get current secondary server configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (SecondaryServerConfiguration)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetServerConfigurationAsync">
            <summary>
            Get current server configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ServerConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetServerConfigurationAsyncWithHttpInfo">
            <summary>
            Get current server configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (ServerConfiguration)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetServerInfoAsync">
            <summary>
            Get server info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ServerInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetServerInfoAsyncWithHttpInfo">
            <summary>
            Get server info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (ServerInfo)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetServerLogAsync(System.Nullable{System.Int32})">
            <summary>
            Get last server log entries
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>Task of List&lt;JournalEntry&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetServerLogAsyncWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get last server log entries
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>Task of ApiResponse (List&lt;JournalEntry&gt;)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetShortServerLogAsync">
            <summary>
            Get short server log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.GetShortServerLogAsyncWithHttpInfo">
            <summary>
            Get short server log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (FileWrapper)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.KillServerAsync">
            <summary>
            Kill server
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.KillServerAsyncWithHttpInfo">
            <summary>
            Kill server
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.SetSecondaryServerConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration)">
            <summary>
            Change secondary server configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.SetSecondaryServerConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration)">
            <summary>
            Change secondary server configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.SetServerConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration)">
            <summary>
            Change server configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.SetServerConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration)">
            <summary>
            Change server configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.StartServerAsync">
            <summary>
            Start server
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.StartServerAsyncWithHttpInfo">
            <summary>
            Start server
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.StopServerAsync">
            <summary>
            Stop server
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IServerAdminApi.StopServerAsyncWithHttpInfo">
            <summary>
            Stop server
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.#ctor(Neurotec.Cluster.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetFullServerLog">
            <summary>
            Download full server log 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetFullServerLogWithHttpInfo">
            <summary>
            Download full server log 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetFullServerLogAsync">
            <summary>
            Download full server log 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetFullServerLogAsyncWithHttpInfo">
            <summary>
            Download full server log 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetSecondaryServerConfiguration">
            <summary>
            Get current secondary server configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>SecondaryServerConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetSecondaryServerConfigurationWithHttpInfo">
            <summary>
            Get current secondary server configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of SecondaryServerConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetSecondaryServerConfigurationAsync">
            <summary>
            Get current secondary server configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of SecondaryServerConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetSecondaryServerConfigurationAsyncWithHttpInfo">
            <summary>
            Get current secondary server configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (SecondaryServerConfiguration)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetServerConfiguration">
            <summary>
            Get current server configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ServerConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetServerConfigurationWithHttpInfo">
            <summary>
            Get current server configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of ServerConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetServerConfigurationAsync">
            <summary>
            Get current server configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ServerConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetServerConfigurationAsyncWithHttpInfo">
            <summary>
            Get current server configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (ServerConfiguration)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetServerInfo">
            <summary>
            Get server info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ServerInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetServerInfoWithHttpInfo">
            <summary>
            Get server info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of ServerInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetServerInfoAsync">
            <summary>
            Get server info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ServerInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetServerInfoAsyncWithHttpInfo">
            <summary>
            Get server info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (ServerInfo)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetServerLog(System.Nullable{System.Int32})">
            <summary>
            Get last server log entries 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>List&lt;JournalEntry&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetServerLogWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get last server log entries 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>ApiResponse of List&lt;JournalEntry&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetServerLogAsync(System.Nullable{System.Int32})">
            <summary>
            Get last server log entries 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>Task of List&lt;JournalEntry&gt;</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetServerLogAsyncWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get last server log entries 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>Task of ApiResponse (List&lt;JournalEntry&gt;)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetShortServerLog">
            <summary>
            Get short server log 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetShortServerLogWithHttpInfo">
            <summary>
            Get short server log 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetShortServerLogAsync">
            <summary>
            Get short server log 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.GetShortServerLogAsyncWithHttpInfo">
            <summary>
            Get short server log 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (FileWrapper)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.KillServer">
            <summary>
            Kill server 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.KillServerWithHttpInfo">
            <summary>
            Kill server 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.KillServerAsync">
            <summary>
            Kill server 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.KillServerAsyncWithHttpInfo">
            <summary>
            Kill server 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.SetSecondaryServerConfiguration(Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration)">
            <summary>
            Change secondary server configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.SetSecondaryServerConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration)">
            <summary>
            Change secondary server configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.SetSecondaryServerConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration)">
            <summary>
            Change secondary server configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.SetSecondaryServerConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration)">
            <summary>
            Change secondary server configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.SetServerConfiguration(Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration)">
            <summary>
            Change server configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.SetServerConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration)">
            <summary>
            Change server configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.SetServerConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration)">
            <summary>
            Change server configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.SetServerConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration)">
            <summary>
            Change server configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.StartServer">
            <summary>
            Start server 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.StartServerWithHttpInfo">
            <summary>
            Start server 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.StartServerAsync">
            <summary>
            Start server 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.StartServerAsyncWithHttpInfo">
            <summary>
            Start server 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.StopServer">
            <summary>
            Stop server 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.StopServerWithHttpInfo">
            <summary>
            Stop server 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.StopServerAsync">
            <summary>
            Stop server 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.ServerAdminApi.StopServerAsyncWithHttpInfo">
            <summary>
            Stop server 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GenerateCertificateAuthority">
            <summary>
            Generate VPN certificate authority (CA)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GenerateCertificateAuthorityWithHttpInfo">
            <summary>
            Generate VPN certificate authority (CA)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GenerateClientBundle(Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest)">
            <summary>
            Generate VPN client bundle (must be downloaded separately)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GenerateClientBundleWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest)">
            <summary>
            Generate VPN client bundle (must be downloaded separately)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GenerateServerCertificate">
            <summary>
            Generate VPN server certificate
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GenerateServerCertificateWithHttpInfo">
            <summary>
            Generate VPN server certificate
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetCertificateAuthorityStatus">
            <summary>
            Get VPN certificate authority (CA) status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>CertificateStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetCertificateAuthorityStatusWithHttpInfo">
            <summary>
            Get VPN certificate authority (CA) status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of CertificateStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetClientBundle(System.String)">
            <summary>
            Get previously generated VPN client bundle
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"></param>
            <returns>FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetClientBundleWithHttpInfo(System.String)">
            <summary>
            Get previously generated VPN client bundle
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"></param>
            <returns>ApiResponse of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetVpnConfiguration">
            <summary>
            Get current VPN configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>VpnConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetVpnConfigurationWithHttpInfo">
            <summary>
            Get current VPN configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of VpnConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetVpnInfo">
            <summary>
            Get VPN service info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>VpnInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetVpnInfoWithHttpInfo">
            <summary>
            Get VPN service info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of VpnInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetVpnMode">
            <summary>
            Get current VPN mode
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>VpnMode</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetVpnModeWithHttpInfo">
            <summary>
            Get current VPN mode
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of VpnMode</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetVpnServiceAutoStart">
            <summary>
            Get current VPN service auto-start setting
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>AutoStart</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetVpnServiceAutoStartWithHttpInfo">
            <summary>
            Get current VPN service auto-start setting
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of AutoStart</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.InstallBundle(Neurotec.Cluster.Admin.Rest.Model.VpnBundle)">
            <summary>
            Install VPN bundle
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.InstallBundleWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.VpnBundle)">
            <summary>
            Install VPN bundle
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.SetVpnConfiguration(Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration)">
            <summary>
            Change VPN configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.SetVpnConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration)">
            <summary>
            Change VPN configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.SetVpnMode(Neurotec.Cluster.Admin.Rest.Model.VpnMode)">
            <summary>
            Change VPN mode
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.SetVpnModeWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.VpnMode)">
            <summary>
            Change VPN mode
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.SetVpnServiceAutoStart(Neurotec.Cluster.Admin.Rest.Model.AutoStart)">
            <summary>
            Change VPN service auto-start setting
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.SetVpnServiceAutoStartWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.AutoStart)">
            <summary>
            Change VPN service auto-start setting
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.StartVpnService">
            <summary>
            Start VPN service
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.StartVpnServiceWithHttpInfo">
            <summary>
            Start VPN service
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.StopVpnService">
            <summary>
            Stop VPN service
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.StopVpnServiceWithHttpInfo">
            <summary>
            Stop VPN service
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GenerateCertificateAuthorityAsync">
            <summary>
            Generate VPN certificate authority (CA)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GenerateCertificateAuthorityAsyncWithHttpInfo">
            <summary>
            Generate VPN certificate authority (CA)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GenerateClientBundleAsync(Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest)">
            <summary>
            Generate VPN client bundle (must be downloaded separately)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GenerateClientBundleAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest)">
            <summary>
            Generate VPN client bundle (must be downloaded separately)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GenerateServerCertificateAsync">
            <summary>
            Generate VPN server certificate
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GenerateServerCertificateAsyncWithHttpInfo">
            <summary>
            Generate VPN server certificate
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetCertificateAuthorityStatusAsync">
            <summary>
            Get VPN certificate authority (CA) status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of CertificateStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetCertificateAuthorityStatusAsyncWithHttpInfo">
            <summary>
            Get VPN certificate authority (CA) status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (CertificateStatus)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetClientBundleAsync(System.String)">
            <summary>
            Get previously generated VPN client bundle
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"></param>
            <returns>Task of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetClientBundleAsyncWithHttpInfo(System.String)">
            <summary>
            Get previously generated VPN client bundle
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"></param>
            <returns>Task of ApiResponse (FileWrapper)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetVpnConfigurationAsync">
            <summary>
            Get current VPN configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of VpnConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetVpnConfigurationAsyncWithHttpInfo">
            <summary>
            Get current VPN configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (VpnConfiguration)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetVpnInfoAsync">
            <summary>
            Get VPN service info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of VpnInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetVpnInfoAsyncWithHttpInfo">
            <summary>
            Get VPN service info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (VpnInfo)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetVpnModeAsync">
            <summary>
            Get current VPN mode
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of VpnMode</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetVpnModeAsyncWithHttpInfo">
            <summary>
            Get current VPN mode
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (VpnMode)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetVpnServiceAutoStartAsync">
            <summary>
            Get current VPN service auto-start setting
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of AutoStart</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.GetVpnServiceAutoStartAsyncWithHttpInfo">
            <summary>
            Get current VPN service auto-start setting
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (AutoStart)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.InstallBundleAsync(Neurotec.Cluster.Admin.Rest.Model.VpnBundle)">
            <summary>
            Install VPN bundle
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.InstallBundleAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.VpnBundle)">
            <summary>
            Install VPN bundle
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.SetVpnConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration)">
            <summary>
            Change VPN configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.SetVpnConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration)">
            <summary>
            Change VPN configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.SetVpnModeAsync(Neurotec.Cluster.Admin.Rest.Model.VpnMode)">
            <summary>
            Change VPN mode
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.SetVpnModeAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.VpnMode)">
            <summary>
            Change VPN mode
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.SetVpnServiceAutoStartAsync(Neurotec.Cluster.Admin.Rest.Model.AutoStart)">
            <summary>
            Change VPN service auto-start setting
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.SetVpnServiceAutoStartAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.AutoStart)">
            <summary>
            Change VPN service auto-start setting
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.StartVpnServiceAsync">
            <summary>
            Start VPN service
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.StartVpnServiceAsyncWithHttpInfo">
            <summary>
            Start VPN service
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.StopVpnServiceAsync">
            <summary>
            Stop VPN service
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.IVpnAdminApi.StopVpnServiceAsyncWithHttpInfo">
            <summary>
            Stop VPN service
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.#ctor(Neurotec.Cluster.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GenerateCertificateAuthority">
            <summary>
            Generate VPN certificate authority (CA) 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GenerateCertificateAuthorityWithHttpInfo">
            <summary>
            Generate VPN certificate authority (CA) 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GenerateCertificateAuthorityAsync">
            <summary>
            Generate VPN certificate authority (CA) 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GenerateCertificateAuthorityAsyncWithHttpInfo">
            <summary>
            Generate VPN certificate authority (CA) 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GenerateClientBundle(Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest)">
            <summary>
            Generate VPN client bundle (must be downloaded separately) 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GenerateClientBundleWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest)">
            <summary>
            Generate VPN client bundle (must be downloaded separately) 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GenerateClientBundleAsync(Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest)">
            <summary>
            Generate VPN client bundle (must be downloaded separately) 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GenerateClientBundleAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest)">
            <summary>
            Generate VPN client bundle (must be downloaded separately) 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GenerateServerCertificate">
            <summary>
            Generate VPN server certificate 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GenerateServerCertificateWithHttpInfo">
            <summary>
            Generate VPN server certificate 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GenerateServerCertificateAsync">
            <summary>
            Generate VPN server certificate 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GenerateServerCertificateAsyncWithHttpInfo">
            <summary>
            Generate VPN server certificate 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetCertificateAuthorityStatus">
            <summary>
            Get VPN certificate authority (CA) status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>CertificateStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetCertificateAuthorityStatusWithHttpInfo">
            <summary>
            Get VPN certificate authority (CA) status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of CertificateStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetCertificateAuthorityStatusAsync">
            <summary>
            Get VPN certificate authority (CA) status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of CertificateStatus</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetCertificateAuthorityStatusAsyncWithHttpInfo">
            <summary>
            Get VPN certificate authority (CA) status 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (CertificateStatus)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetClientBundle(System.String)">
            <summary>
            Get previously generated VPN client bundle 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"></param>
            <returns>FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetClientBundleWithHttpInfo(System.String)">
            <summary>
            Get previously generated VPN client bundle 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"></param>
            <returns>ApiResponse of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetClientBundleAsync(System.String)">
            <summary>
            Get previously generated VPN client bundle 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"></param>
            <returns>Task of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetClientBundleAsyncWithHttpInfo(System.String)">
            <summary>
            Get previously generated VPN client bundle 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"></param>
            <returns>Task of ApiResponse (FileWrapper)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetVpnConfiguration">
            <summary>
            Get current VPN configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>VpnConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetVpnConfigurationWithHttpInfo">
            <summary>
            Get current VPN configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of VpnConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetVpnConfigurationAsync">
            <summary>
            Get current VPN configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of VpnConfiguration</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetVpnConfigurationAsyncWithHttpInfo">
            <summary>
            Get current VPN configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (VpnConfiguration)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetVpnInfo">
            <summary>
            Get VPN service info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>VpnInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetVpnInfoWithHttpInfo">
            <summary>
            Get VPN service info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of VpnInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetVpnInfoAsync">
            <summary>
            Get VPN service info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of VpnInfo</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetVpnInfoAsyncWithHttpInfo">
            <summary>
            Get VPN service info 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (VpnInfo)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetVpnMode">
            <summary>
            Get current VPN mode 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>VpnMode</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetVpnModeWithHttpInfo">
            <summary>
            Get current VPN mode 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of VpnMode</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetVpnModeAsync">
            <summary>
            Get current VPN mode 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of VpnMode</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetVpnModeAsyncWithHttpInfo">
            <summary>
            Get current VPN mode 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (VpnMode)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetVpnServiceAutoStart">
            <summary>
            Get current VPN service auto-start setting 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>AutoStart</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetVpnServiceAutoStartWithHttpInfo">
            <summary>
            Get current VPN service auto-start setting 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of AutoStart</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetVpnServiceAutoStartAsync">
            <summary>
            Get current VPN service auto-start setting 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of AutoStart</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.GetVpnServiceAutoStartAsyncWithHttpInfo">
            <summary>
            Get current VPN service auto-start setting 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (AutoStart)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.InstallBundle(Neurotec.Cluster.Admin.Rest.Model.VpnBundle)">
            <summary>
            Install VPN bundle 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.InstallBundleWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.VpnBundle)">
            <summary>
            Install VPN bundle 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.InstallBundleAsync(Neurotec.Cluster.Admin.Rest.Model.VpnBundle)">
            <summary>
            Install VPN bundle 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.InstallBundleAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.VpnBundle)">
            <summary>
            Install VPN bundle 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.SetVpnConfiguration(Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration)">
            <summary>
            Change VPN configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.SetVpnConfigurationWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration)">
            <summary>
            Change VPN configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.SetVpnConfigurationAsync(Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration)">
            <summary>
            Change VPN configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.SetVpnConfigurationAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration)">
            <summary>
            Change VPN configuration 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.SetVpnMode(Neurotec.Cluster.Admin.Rest.Model.VpnMode)">
            <summary>
            Change VPN mode 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.SetVpnModeWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.VpnMode)">
            <summary>
            Change VPN mode 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.SetVpnModeAsync(Neurotec.Cluster.Admin.Rest.Model.VpnMode)">
            <summary>
            Change VPN mode 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.SetVpnModeAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.VpnMode)">
            <summary>
            Change VPN mode 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.SetVpnServiceAutoStart(Neurotec.Cluster.Admin.Rest.Model.AutoStart)">
            <summary>
            Change VPN service auto-start setting 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.SetVpnServiceAutoStartWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.AutoStart)">
            <summary>
            Change VPN service auto-start setting 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.SetVpnServiceAutoStartAsync(Neurotec.Cluster.Admin.Rest.Model.AutoStart)">
            <summary>
            Change VPN service auto-start setting 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.SetVpnServiceAutoStartAsyncWithHttpInfo(Neurotec.Cluster.Admin.Rest.Model.AutoStart)">
            <summary>
            Change VPN service auto-start setting 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.StartVpnService">
            <summary>
            Start VPN service 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.StartVpnServiceWithHttpInfo">
            <summary>
            Start VPN service 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.StartVpnServiceAsync">
            <summary>
            Start VPN service 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.StartVpnServiceAsyncWithHttpInfo">
            <summary>
            Start VPN service 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.StopVpnService">
            <summary>
            Stop VPN service 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.StopVpnServiceWithHttpInfo">
            <summary>
            Stop VPN service 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.StopVpnServiceAsync">
            <summary>
            Stop VPN service 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Api.VpnAdminApi.StopVpnServiceAsyncWithHttpInfo">
            <summary>
            Stop VPN service 
            </summary>
            <exception cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Client.ApiClient">
            <summary>
            API client is mainly responsible for making the HTTP call to the API backend.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiClient" /> class
            with default configuration.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.#ctor(Neurotec.Cluster.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiClient" /> class
            with default base path (https://localhost/rs).
            </summary>
            <param name="config">An instance of Configuration.</param>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiClient" /> class
            with default configuration.
            </summary>
            <param name="basePath">The base path.</param>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Client.ApiClient.Default">
            <summary>
            Gets or sets the default API client for making HTTP calls.
            </summary>
            <value>The default API client.</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.ApiClient.Configuration">
            <summary>
            Gets or sets an instance of the IReadableConfiguration.
            </summary>
            <value>An instance of the IReadableConfiguration.</value>
            <remarks>
            <see cref="T:Neurotec.Cluster.Admin.Rest.Client.IReadableConfiguration"/> helps us to avoid modifying possibly global
            configuration values from within a given client. It does not guarantee thread-safety
            of the <see cref="P:Neurotec.Cluster.Admin.Rest.Client.ApiClient.Configuration"/> instance in any way.
            </remarks>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.ApiClient.RestClient">
            <summary>
            Gets or sets the RestClient.
            </summary>
            <value>An instance of the RestClient</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.CallApi(System.String,RestSharp.Method,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,RestSharp.FileParameter},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Makes the HTTP request (Sync).
            </summary>
            <param name="path">URL path.</param>
            <param name="method">HTTP method.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="postBody">HTTP body (POST request).</param>
            <param name="headerParams">Header parameters.</param>
            <param name="formParams">Form parameters.</param>
            <param name="fileParams">File parameters.</param>
            <param name="pathParams">Path parameters.</param>
            <param name="contentType">Content Type of the request</param>
            <returns>Object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.CallApiAsync(System.String,RestSharp.Method,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,RestSharp.FileParameter},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Makes the asynchronous HTTP request.
            </summary>
            <param name="path">URL path.</param>
            <param name="method">HTTP method.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="postBody">HTTP body (POST request).</param>
            <param name="headerParams">Header parameters.</param>
            <param name="formParams">Form parameters.</param>
            <param name="fileParams">File parameters.</param>
            <param name="pathParams">Path parameters.</param>
            <param name="contentType">Content type.</param>
            <returns>The Task instance.</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.EscapeString(System.String)">
            <summary>
            Escape string (url-encoded).
            </summary>
            <param name="str">String to be escaped.</param>
            <returns>Escaped string.</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.ParameterToFile(System.String,System.IO.Stream)">
            <summary>
            Create FileParameter based on Stream.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="stream">Input stream.</param>
            <returns>FileParameter.</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.ParameterToString(System.Object)">
            <summary>
            If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
            If parameter is a list, join the list with ",".
            Otherwise just return the string.
            </summary>
            <param name="obj">The parameter (header, path, query, form).</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.Deserialize(RestSharp.IRestResponse,System.Type)">
            <summary>
            Deserialize the JSON string into a proper object.
            </summary>
            <param name="response">The HTTP response.</param>
            <param name="type">Object type.</param>
            <returns>Object representation of the JSON string.</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.Serialize(System.Object)">
            <summary>
            Serialize an input (model) into JSON string
            </summary>
            <param name="obj">Object.</param>
            <returns>JSON string.</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.IsJsonMime(System.String)">
             <summary>
            Check if the given MIME is a JSON MIME.
            JSON MIME examples:
                application/json
                application/json; charset=UTF8
                APPLICATION/JSON
                application/vnd.company+json
             </summary>
             <param name="mime">MIME</param>
             <returns>Returns True if MIME type is json.</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.SelectHeaderContentType(System.String[])">
            <summary>
            Select the Content-Type header's value from the given content-type array:
            if JSON type exists in the given array, use it;
            otherwise use the first one defined in 'consumes'
            </summary>
            <param name="contentTypes">The Content-Type array to select from.</param>
            <returns>The Content-Type header to use.</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.SelectHeaderAccept(System.String[])">
            <summary>
            Select the Accept header's value from the given accepts array:
            if JSON exists in the given array, use it;
            otherwise use all of them (joining into a string)
            </summary>
            <param name="accepts">The accepts array to select from.</param>
            <returns>The Accept header to use.</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.Base64Encode(System.String)">
            <summary>
            Encode string in base64 format.
            </summary>
            <param name="text">String to be encoded.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.ConvertType(System.Object,System.Type)">
            <summary>
            Dynamically cast the object into target type.
            </summary>
            <param name="fromObject">Object to be casted</param>
            <param name="toObject">Target type</param>
            <returns>Casted object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.ReadAsBytes(System.IO.Stream)">
            <summary>
            Convert stream to byte array
            </summary>
            <param name="inputStream">Input stream to be converted</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.UrlEncode(System.String)">
            <summary>
            URL encode a string
            Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
            </summary>
            <param name="input">String to be URL encoded</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.SanitizeFilename(System.String)">
            <summary>
            Sanitize filename by removing the path
            </summary>
            <param name="filename">Filename</param>
            <returns>Filename</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.ParameterToKeyValuePairs(System.String,System.String,System.Object)">
            <summary>
            Convert params to key/value pairs. 
            Use collectionFormat to properly format lists and collections.
            </summary>
            <param name="name">Key name.</param>
            <param name="value">Value object.</param>
            <returns>A list of KeyValuePairs</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiClient.IsCollection(System.Object)">
            <summary>
            Check if generic object is a collection.
            </summary>
            <param name="value"></param>
            <returns>True if object is a collection type</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Client.ApiException">
            <summary>
            API Exception
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.ApiException.ErrorCode">
            <summary>
            Gets or sets the error code (HTTP status code)
            </summary>
            <value>The error code (HTTP status code).</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.ApiException.ErrorContent">
            <summary>
            Gets or sets the error content (body json object)
            </summary>
            <value>The error content (Http response body).</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException"/> class.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException"/> class.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiException.#ctor(System.Int32,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiException"/> class.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
            <param name="errorContent">Error content.</param>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Client.ApiResponse`1">
            <summary>
            API Response
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.ApiResponse`1.StatusCode">
            <summary>
            Gets or sets the status code (HTTP status code)
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.ApiResponse`1.Headers">
            <summary>
            Gets or sets the HTTP headers
            </summary>
            <value>HTTP headers</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.ApiResponse`1.Data">
            <summary>
            Gets or sets the data (parsed HTTP body)
            </summary>
            <value>The data.</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.ApiResponse`1.#ctor(System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Client.ApiResponse`1" /> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="headers">HTTP headers.</param>
            <param name="data">Data (parsed HTTP body)</param>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Client.Configuration">
            <summary>
            Represents a set of configuration settings
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Client.Configuration.Version">
            <summary>
            Version of the package.
            </summary>
            <value>Version of the package.</value>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Client.Configuration.ISO8601_DATETIME_FORMAT">
            <summary>
            Identifier for ISO 8601 DateTime Format
            </summary>
            <remarks>See https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8 for more information.</remarks>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Client.Configuration.DefaultExceptionFactory">
            <summary>
            Default creation of exceptions for a given method name and response object
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.Configuration.Default">
            <summary>
            Gets or sets the default Configuration.
            </summary>
            <value>Configuration.</value>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Client.Configuration._apiKey">
            <summary>
            Gets or sets the API key based on the authentication name.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Client.Configuration._apiKeyPrefix">
            <summary>
            Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
            </summary>
            <value>The prefix of the API key.</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.Configuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Client.Configuration" /> class
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.Configuration.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Client.Configuration" /> class
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.Configuration.#ctor(Neurotec.Cluster.Admin.Rest.Client.ApiClient,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Client.Configuration" /> class with different settings
            </summary>
            <param name="apiClient">Api client</param>
            <param name="defaultHeader">Dictionary of default HTTP header</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="accessToken">accessToken</param>
            <param name="apiKey">Dictionary of API key</param>
            <param name="apiKeyPrefix">Dictionary of API key prefix</param>
            <param name="tempFolderPath">Temp folder path</param>
            <param name="dateTimeFormat">DateTime format string</param>
            <param name="timeout">HTTP connection timeout (in milliseconds)</param>
            <param name="userAgent">HTTP user agent</param>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.Configuration.#ctor(Neurotec.Cluster.Admin.Rest.Client.ApiClient)">
            <summary>
            Initializes a new instance of the Configuration class.
            </summary>
            <param name="apiClient">Api client.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.Configuration.ApiClient">
            <summary>
            Gets an instance of an ApiClient for this configuration
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.Configuration.BasePath">
            <summary>
            Gets or sets the base path for API access.
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.Configuration.DefaultHeader">
            <summary>
            Gets or sets the default header.
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.Configuration.Timeout">
            <summary>
            Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.Configuration.UserAgent">
            <summary>
            Gets or sets the HTTP user agent.
            </summary>
            <value>Http user agent.</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.Configuration.Username">
            <summary>
            Gets or sets the username (HTTP basic authentication).
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.Configuration.Password">
            <summary>
            Gets or sets the password (HTTP basic authentication).
            </summary>
            <value>The password.</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.Configuration.GetApiKeyWithPrefix(System.String)">
            <summary>
            Gets the API key with prefix.
            </summary>
            <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
            <returns>API key with prefix.</returns>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.Configuration.AccessToken">
            <summary>
            Gets or sets the access token for OAuth2 authentication.
            </summary>
            <value>The access token.</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.Configuration.TempFolderPath">
            <summary>
            Gets or sets the temporary folder path to store the files downloaded from the server.
            </summary>
            <value>Folder path.</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.Configuration.DateTimeFormat">
            <summary>
            Gets or sets the the date time format used when serializing in the ApiClient
            By default, it's set to ISO 8601 - "o", for others see:
            https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
            and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
            No validation is done to ensure that the string you're providing is valid
            </summary>
            <value>The DateTimeFormat string</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.Configuration.ApiKeyPrefix">
            <summary>
            Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
            </summary>
            <value>The prefix of the API key.</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.Configuration.ApiKey">
            <summary>
            Gets or sets the API key based on the authentication name.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.Configuration.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.Configuration.CreateApiClient">
            <summary>
            Creates a new <see cref="P:Neurotec.Cluster.Admin.Rest.Client.Configuration.ApiClient" /> based on this <see cref="T:Neurotec.Cluster.Admin.Rest.Client.Configuration" /> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.Configuration.ToDebugReport">
            <summary>
            Returns a string with essential information for debugging.
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.Configuration.AddApiKey(System.String,System.String)">
            <summary>
            Add Api Key Header.
            </summary>
            <param name="key">Api Key name.</param>
            <param name="value">Api Key value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.Configuration.AddApiKeyPrefix(System.String,System.String)">
            <summary>
            Sets the API key prefix.
            </summary>
            <param name="key">Api Key name.</param>
            <param name="value">Api Key value.</param>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Client.ExceptionFactory">
            <summary>
            A delegate to ExceptionFactory method
            </summary>
            <param name="methodName">Method name</param>
            <param name="response">Response</param>
            <returns>Exceptions</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Client.IApiAccessor">
            <summary>
            Represents configuration aspects required to interact with the API endpoints.
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.IApiAccessor.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.IApiAccessor.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.IApiAccessor.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Client.GlobalConfiguration">
            <summary>
            <see cref="T:Neurotec.Cluster.Admin.Rest.Client.GlobalConfiguration"/> provides a compile-time extension point for globally configuring
            API Clients.
            </summary>
            <remarks>
            A customized implementation via partial class may reside in another file and may
            be excluded from automatic generation via a .swagger-codegen-ignore file.
            </remarks>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Client.IReadableConfiguration">
            <summary>
            Represents a readable-only configuration contract.
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.IReadableConfiguration.AccessToken">
            <summary>
            Gets the access token.
            </summary>
            <value>Access token.</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.IReadableConfiguration.ApiKey">
            <summary>
            Gets the API key.
            </summary>
            <value>API key.</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.IReadableConfiguration.ApiKeyPrefix">
            <summary>
            Gets the API key prefix.
            </summary>
            <value>API key prefix.</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.IReadableConfiguration.BasePath">
            <summary>
            Gets the base path.
            </summary>
            <value>Base path.</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.IReadableConfiguration.DateTimeFormat">
            <summary>
            Gets the date time format.
            </summary>
            <value>Date time foramt.</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.IReadableConfiguration.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <value>Default header.</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.IReadableConfiguration.TempFolderPath">
            <summary>
            Gets the temp folder path.
            </summary>
            <value>Temp folder path.</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.IReadableConfiguration.Timeout">
            <summary>
            Gets the HTTP connection timeout (in milliseconds)
            </summary>
            <value>HTTP connection timeout.</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.IReadableConfiguration.UserAgent">
            <summary>
            Gets the user agent.
            </summary>
            <value>User agent.</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.IReadableConfiguration.Username">
            <summary>
            Gets the username.
            </summary>
            <value>Username.</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Client.IReadableConfiguration.Password">
            <summary>
            Gets the password.
            </summary>
            <value>Password.</value>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.IReadableConfiguration.GetApiKeyWithPrefix(System.String)">
            <summary>
            Gets the API key with prefix.
            </summary>
            <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
            <returns>API key with prefix.</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Client.SwaggerDateConverter">
            <summary>
            Formatter for 'date' swagger formats ss defined by full-date - RFC3339
            see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Client.SwaggerDateConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Client.SwaggerDateConverter" /> class.
            </summary>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.AcceleratorType">
            <summary>
            AcceleratorType
            </summary>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.AcceleratorType.TypeEnum">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.AcceleratorType.TypeEnum.PRIMARY">
            <summary>
            Enum PRIMARY for "PRIMARY"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.AcceleratorType.TypeEnum.ADDITIONAL">
            <summary>
            Enum ADDITIONAL for "ADDITIONAL"
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.AcceleratorType.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.AcceleratorType.#ctor(System.Nullable{Neurotec.Cluster.Admin.Rest.Model.AcceleratorType.TypeEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.AcceleratorType" /> class.
            </summary>
            <param name="Type">Type.</param>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.AcceleratorType.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.AcceleratorType.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.AcceleratorType.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.AcceleratorType.Equals(Neurotec.Cluster.Admin.Rest.Model.AcceleratorType)">
            <summary>
            Returns true if AcceleratorType instances are equal
            </summary>
            <param name="input">Instance of AcceleratorType to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.AcceleratorType.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.AcceleratorType.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.AutoStart">
            <summary>
            AutoStart
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.AutoStart.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.AutoStart" /> class.
            </summary>
            <param name="_AutoStart">_AutoStart (default to false).</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.AutoStart._AutoStart">
            <summary>
            Gets or Sets _AutoStart
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.AutoStart.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.AutoStart.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.AutoStart.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.AutoStart.Equals(Neurotec.Cluster.Admin.Rest.Model.AutoStart)">
            <summary>
            Returns true if AutoStart instances are equal
            </summary>
            <param name="input">Instance of AutoStart to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.AutoStart.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.AutoStart.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute">
            <summary>
            BiographicAttribute
            </summary>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute.TypeEnum">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute.TypeEnum.INT">
            <summary>
            Enum INT for "INT"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute.TypeEnum.STRING">
            <summary>
            Enum STRING for "STRING"
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute.#ctor(System.String,System.Nullable{Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute.TypeEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute" /> class.
            </summary>
            <param name="Name">Name.</param>
            <param name="Type">Type.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute.Equals(Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute)">
            <summary>
            Returns true if BiographicAttribute instances are equal
            </summary>
            <param name="input">Instance of BiographicAttribute to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.BiographicAttribute.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.CertificateStatus">
            <summary>
            CertificateStatus
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.CertificateStatus.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.CertificateStatus" /> class.
            </summary>
            <param name="Exist">Exist (default to false).</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.CertificateStatus.Exist">
            <summary>
            Gets or Sets Exist
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.CertificateStatus.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.CertificateStatus.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.CertificateStatus.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.CertificateStatus.Equals(Neurotec.Cluster.Admin.Rest.Model.CertificateStatus)">
            <summary>
            Returns true if CertificateStatus instances are equal
            </summary>
            <param name="input">Instance of CertificateStatus to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.CertificateStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.CertificateStatus.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup">
            <summary>
            ConfigurationBackup
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup.#ctor(Neurotec.Cluster.Admin.Rest.Model.FileWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup" /> class.
            </summary>
            <param name="File">File.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup.File">
            <summary>
            Gets or Sets File
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup.Equals(Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup)">
            <summary>
            Returns true if ConfigurationBackup instances are equal
            </summary>
            <param name="input">Instance of ConfigurationBackup to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ConfigurationBackup.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.DatabaseStatus">
            <summary>
            DatabaseStatus
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.DatabaseStatus.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.DatabaseStatus" /> class.
            </summary>
            <param name="Running">Running (default to false).</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.DatabaseStatus.Running">
            <summary>
            Gets or Sets Running
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.DatabaseStatus.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.DatabaseStatus.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.DatabaseStatus.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.DatabaseStatus.Equals(Neurotec.Cluster.Admin.Rest.Model.DatabaseStatus)">
            <summary>
            Returns true if DatabaseStatus instances are equal
            </summary>
            <param name="input">Instance of DatabaseStatus to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.DatabaseStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.DatabaseStatus.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration">
            <summary>
            EngineConfiguration
            </summary>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum">
            <summary>
            Gets or Sets AcceleratedModalities
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.MULTIPLEBIOMETRICS">
            <summary>
            Enum MULTIPLEBIOMETRICS for "MULTIPLE_BIOMETRICS"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.FACE">
            <summary>
            Enum FACE for "FACE"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.VOICE">
            <summary>
            Enum VOICE for "VOICE"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.FINGER">
            <summary>
            Enum FINGER for "FINGER"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.IRIS">
            <summary>
            Enum IRIS for "IRIS"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.RETINA">
            <summary>
            Enum RETINA for "RETINA"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.HANDGEOMETRY">
            <summary>
            Enum HANDGEOMETRY for "HAND_GEOMETRY"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.SIGNATUREORSIGN">
            <summary>
            Enum SIGNATUREORSIGN for "SIGNATURE_OR_SIGN"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.KEYSTROKE">
            <summary>
            Enum KEYSTROKE for "KEYSTROKE"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.LIPMOVEMENT">
            <summary>
            Enum LIPMOVEMENT for "LIP_MOVEMENT"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.THERMALFACE">
            <summary>
            Enum THERMALFACE for "THERMAL_FACE"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.THERMALHAND">
            <summary>
            Enum THERMALHAND for "THERMAL_HAND"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.GAIT">
            <summary>
            Enum GAIT for "GAIT"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.SCENT">
            <summary>
            Enum SCENT for "SCENT"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.DNA">
            <summary>
            Enum DNA for "DNA"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.EAR">
            <summary>
            Enum EAR for "EAR"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.FINGERGEOMETRY">
            <summary>
            Enum FINGERGEOMETRY for "FINGER_GEOMETRY"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.PALM">
            <summary>
            Enum PALM for "PALM"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.VEIN">
            <summary>
            Enum VEIN for "VEIN"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.FOOT">
            <summary>
            Enum FOOT for "FOOT"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.PALMGEOMETRY">
            <summary>
            Enum PALMGEOMETRY for "PALM_GEOMETRY"
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalities">
            <summary>
            Gets or Sets AcceleratedModalities
            </summary>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.FacesAcceleratedTemplateSizeEnum">
            <summary>
            Gets or Sets FacesAcceleratedTemplateSize
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.FacesAcceleratedTemplateSizeEnum.COMPACT">
            <summary>
            Enum COMPACT for "COMPACT"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.FacesAcceleratedTemplateSizeEnum.SMALL">
            <summary>
            Enum SMALL for "SMALL"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.FacesAcceleratedTemplateSizeEnum.MEDIUM">
            <summary>
            Enum MEDIUM for "MEDIUM"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.FacesAcceleratedTemplateSizeEnum.LARGE">
            <summary>
            Enum LARGE for "LARGE"
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.FacesAcceleratedTemplateSize">
            <summary>
            Gets or Sets FacesAcceleratedTemplateSize
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.#ctor(System.Nullable{System.Int32},System.Collections.Generic.List{Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum},System.Nullable{System.Single},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Single},System.Nullable{Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.FacesAcceleratedTemplateSizeEnum},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration" /> class.
            </summary>
            <param name="MaximalThreadCount">MaximalThreadCount.</param>
            <param name="AcceleratedModalities">AcceleratedModalities.</param>
            <param name="FingersMaximalRotation">FingersMaximalRotation.</param>
            <param name="FingersTurboUseAdaptiveSpeed">FingersTurboUseAdaptiveSpeed (default to false).</param>
            <param name="FingersTurboSpeedLevel">FingersTurboSpeedLevel.</param>
            <param name="IrisesMaximalRotation">IrisesMaximalRotation.</param>
            <param name="FacesAcceleratedTemplateSize">FacesAcceleratedTemplateSize.</param>
            <param name="P1">P1.</param>
            <param name="P2">P2.</param>
            <param name="P3">P3.</param>
            <param name="P4">P4.</param>
            <param name="P5">P5.</param>
            <param name="P6">P6.</param>
            <param name="P7">P7.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.MaximalThreadCount">
            <summary>
            Gets or Sets MaximalThreadCount
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.FingersMaximalRotation">
            <summary>
            Gets or Sets FingersMaximalRotation
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.FingersTurboUseAdaptiveSpeed">
            <summary>
            Gets or Sets FingersTurboUseAdaptiveSpeed
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.FingersTurboSpeedLevel">
            <summary>
            Gets or Sets FingersTurboSpeedLevel
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.IrisesMaximalRotation">
            <summary>
            Gets or Sets IrisesMaximalRotation
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.P1">
            <summary>
            Gets or Sets P1
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.P2">
            <summary>
            Gets or Sets P2
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.P3">
            <summary>
            Gets or Sets P3
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.P4">
            <summary>
            Gets or Sets P4
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.P5">
            <summary>
            Gets or Sets P5
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.P6">
            <summary>
            Gets or Sets P6
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.P7">
            <summary>
            Gets or Sets P7
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.Equals(Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration)">
            <summary>
            Returns true if EngineConfiguration instances are equal
            </summary>
            <param name="input">Instance of EngineConfiguration to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.FileWrapper">
            <summary>
            FileWrapper
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.FileWrapper.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.FileWrapper" /> class.
            </summary>
            <param name="Name">Name.</param>
            <param name="Content">base64 encoded bytes.</param>
            <param name="ContentType">ContentType.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.FileWrapper.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.FileWrapper.Content">
            <summary>
            base64 encoded bytes
            </summary>
            <value>base64 encoded bytes</value>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.FileWrapper.ContentType">
            <summary>
            Gets or Sets ContentType
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.FileWrapper.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.FileWrapper.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.FileWrapper.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.FileWrapper.Equals(Neurotec.Cluster.Admin.Rest.Model.FileWrapper)">
            <summary>
            Returns true if FileWrapper instances are equal
            </summary>
            <param name="input">Instance of FileWrapper to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.FileWrapper.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.FileWrapper.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.JournalEntry">
            <summary>
            JournalEntry
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.JournalEntry.#ctor(System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.JournalEntry" /> class.
            </summary>
            <param name="Timestamp">Timestamp.</param>
            <param name="Executable">Executable.</param>
            <param name="Message">Message.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.JournalEntry.Timestamp">
            <summary>
            Gets or Sets Timestamp
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.JournalEntry.Executable">
            <summary>
            Gets or Sets Executable
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.JournalEntry.Message">
            <summary>
            Gets or Sets Message
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.JournalEntry.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.JournalEntry.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.JournalEntry.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.JournalEntry.Equals(Neurotec.Cluster.Admin.Rest.Model.JournalEntry)">
            <summary>
            Returns true if JournalEntry instances are equal
            </summary>
            <param name="input">Instance of JournalEntry to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.JournalEntry.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.JournalEntry.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration">
            <summary>
            LicensingConfiguration
            </summary>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration.TypeEnum">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration.TypeEnum.DONGLE">
            <summary>
            Enum DONGLE for "DONGLE"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration.TypeEnum.FILE">
            <summary>
            Enum FILE for "FILE"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration.TypeEnum.GATEWAY">
            <summary>
            Enum GATEWAY for "GATEWAY"
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration.#ctor(System.Nullable{Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration.TypeEnum},Neurotec.Cluster.Admin.Rest.Model.FileWrapper,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration" /> class.
            </summary>
            <param name="Type">Type.</param>
            <param name="File">File.</param>
            <param name="Address">Address.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration.File">
            <summary>
            Gets or Sets File
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration.Equals(Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration)">
            <summary>
            Returns true if LicensingConfiguration instances are equal
            </summary>
            <param name="input">Instance of LicensingConfiguration to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.LicensingConfiguration.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.LicensingStatus">
            <summary>
            LicensingStatus
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.LicensingStatus.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.LicensingStatus" /> class.
            </summary>
            <param name="Running">Running (default to false).</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.LicensingStatus.Running">
            <summary>
            Gets or Sets Running
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.LicensingStatus.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.LicensingStatus.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.LicensingStatus.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.LicensingStatus.Equals(Neurotec.Cluster.Admin.Rest.Model.LicensingStatus)">
            <summary>
            Returns true if LicensingStatus instances are equal
            </summary>
            <param name="input">Instance of LicensingStatus to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.LicensingStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.LicensingStatus.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration">
            <summary>
            NetworkConfiguration
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration.#ctor(System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration" /> class.
            </summary>
            <param name="DhcpEnabled">DhcpEnabled (default to false).</param>
            <param name="IpAddress">IpAddress.</param>
            <param name="GatewayAddress">GatewayAddress.</param>
            <param name="SubnetMask">SubnetMask.</param>
            <param name="DnsServerAddress">DnsServerAddress.</param>
            <param name="Hostname">Hostname.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration.DhcpEnabled">
            <summary>
            Gets or Sets DhcpEnabled
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration.IpAddress">
            <summary>
            Gets or Sets IpAddress
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration.GatewayAddress">
            <summary>
            Gets or Sets GatewayAddress
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration.SubnetMask">
            <summary>
            Gets or Sets SubnetMask
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration.DnsServerAddress">
            <summary>
            Gets or Sets DnsServerAddress
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration.Hostname">
            <summary>
            Gets or Sets Hostname
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration.Equals(Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration)">
            <summary>
            Returns true if NetworkConfiguration instances are equal
            </summary>
            <param name="input">Instance of NetworkConfiguration to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NetworkConfiguration.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration">
            <summary>
            NodeConfiguration
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Neurotec.Cluster.Admin.Rest.Model.EngineConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration" /> class.
            </summary>
            <param name="PrimaryServerAddr">PrimaryServerAddr.</param>
            <param name="ServerPort">ServerPort.</param>
            <param name="MonitorPort">MonitorPort.</param>
            <param name="EngineConfiguration">EngineConfiguration.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration.PrimaryServerAddr">
            <summary>
            Gets or Sets PrimaryServerAddr
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration.ServerPort">
            <summary>
            Gets or Sets ServerPort
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration.MonitorPort">
            <summary>
            Gets or Sets MonitorPort
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration.EngineConfiguration">
            <summary>
            Gets or Sets EngineConfiguration
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration.Equals(Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration)">
            <summary>
            Returns true if NodeConfiguration instances are equal
            </summary>
            <param name="input">Instance of NodeConfiguration to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NodeConfiguration.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.NodeInfo">
            <summary>
            NodeInfo
            </summary>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.NodeInfo.StateEnum">
            <summary>
            Gets or Sets State
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.NodeInfo.StateEnum.Starting">
            <summary>
            Enum Starting for "starting"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.NodeInfo.StateEnum.Ready">
            <summary>
            Enum Ready for "ready"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.NodeInfo.StateEnum.Removing">
            <summary>
            Enum Removing for "removing"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.NodeInfo.StateEnum.Spare">
            <summary>
            Enum Spare for "spare"
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.NodeInfo.State">
            <summary>
            Gets or Sets State
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NodeInfo.#ctor(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{Neurotec.Cluster.Admin.Rest.Model.NodeInfo.StateEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.NodeInfo" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="Running">Running (default to false).</param>
            <param name="State">State.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.NodeInfo.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.NodeInfo.Running">
            <summary>
            Gets or Sets Running
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NodeInfo.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NodeInfo.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NodeInfo.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NodeInfo.Equals(Neurotec.Cluster.Admin.Rest.Model.NodeInfo)">
            <summary>
            Returns true if NodeInfo instances are equal
            </summary>
            <param name="input">Instance of NodeInfo to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NodeInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.NodeInfo.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.Password.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.Password" /> class.
            </summary>
            <param name="_Password">_Password.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.Password._Password">
            <summary>
            Gets or Sets _Password
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.Password.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.Password.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.Password.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.Password.Equals(Neurotec.Cluster.Admin.Rest.Model.Password)">
            <summary>
            Returns true if Password instances are equal
            </summary>
            <param name="input">Instance of Password to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.Password.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.Password.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration">
            <summary>
            PreparedConfiguration
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration.#ctor(System.Nullable{System.Boolean},Neurotec.Cluster.Admin.Rest.Model.FileWrapper,Neurotec.Cluster.Admin.Rest.Model.FileWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration" /> class.
            </summary>
            <param name="Enabled">Enabled (default to false).</param>
            <param name="ServerConfiguration">ServerConfiguration.</param>
            <param name="NodeConfiguration">NodeConfiguration.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration.Enabled">
            <summary>
            Gets or Sets Enabled
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration.ServerConfiguration">
            <summary>
            Gets or Sets ServerConfiguration
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration.NodeConfiguration">
            <summary>
            Gets or Sets NodeConfiguration
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration.Equals(Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration)">
            <summary>
            Returns true if PreparedConfiguration instances are equal
            </summary>
            <param name="input">Instance of PreparedConfiguration to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.PreparedConfiguration.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.PreparedConfigurationStatus">
            <summary>
            PreparedConfigurationStatus
            </summary>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.PreparedConfigurationStatus.TypeEnum">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.PreparedConfigurationStatus.TypeEnum.PRIMARY">
            <summary>
            Enum PRIMARY for "PRIMARY"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.PreparedConfigurationStatus.TypeEnum.ADDITIONAL">
            <summary>
            Enum ADDITIONAL for "ADDITIONAL"
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.PreparedConfigurationStatus.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.PreparedConfigurationStatus.#ctor(System.Nullable{System.Boolean},System.Nullable{Neurotec.Cluster.Admin.Rest.Model.PreparedConfigurationStatus.TypeEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.PreparedConfigurationStatus" /> class.
            </summary>
            <param name="Enabled">Enabled (default to false).</param>
            <param name="Type">Type.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.PreparedConfigurationStatus.Enabled">
            <summary>
            Gets or Sets Enabled
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.PreparedConfigurationStatus.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.PreparedConfigurationStatus.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.PreparedConfigurationStatus.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.PreparedConfigurationStatus.Equals(Neurotec.Cluster.Admin.Rest.Model.PreparedConfigurationStatus)">
            <summary>
            Returns true if PreparedConfigurationStatus instances are equal
            </summary>
            <param name="input">Instance of PreparedConfigurationStatus to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.PreparedConfigurationStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.PreparedConfigurationStatus.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.ReplicationClient">
            <summary>
            ReplicationClient
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.ReplicationClient" /> class.
            </summary>
            <param name="ServerId">ServerId.</param>
            <param name="Address">Address.</param>
            <param name="Uuid">Uuid.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationClient.ServerId">
            <summary>
            Gets or Sets ServerId
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationClient.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationClient.Uuid">
            <summary>
            Gets or Sets Uuid
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationClient.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationClient.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationClient.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationClient.Equals(Neurotec.Cluster.Admin.Rest.Model.ReplicationClient)">
            <summary>
            Returns true if ReplicationClient instances are equal
            </summary>
            <param name="input">Instance of ReplicationClient to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationClient.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationClient.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration">
            <summary>
            ReplicationConfiguration
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration" /> class.
            </summary>
            <param name="Enabled">Enabled (default to false).</param>
            <param name="ServerId">ServerId.</param>
            <param name="ExpireLogsDays">ExpireLogsDays.</param>
            <param name="AllowConnections">AllowConnections (default to false).</param>
            <param name="Password">Password.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration.Enabled">
            <summary>
            Gets or Sets Enabled
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration.ServerId">
            <summary>
            Gets or Sets ServerId
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration.ExpireLogsDays">
            <summary>
            Gets or Sets ExpireLogsDays
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration.AllowConnections">
            <summary>
            Gets or Sets AllowConnections
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration.Password">
            <summary>
            Gets or Sets Password
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration.Equals(Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration)">
            <summary>
            Returns true if ReplicationConfiguration instances are equal
            </summary>
            <param name="input">Instance of ReplicationConfiguration to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationConfiguration.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.ReplicationSource">
            <summary>
            ReplicationSource
            </summary>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.ReplicationSource.StateEnum">
            <summary>
            Gets or Sets State
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ReplicationSource.StateEnum.OK">
            <summary>
            Enum OK for "OK"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ReplicationSource.StateEnum.IOERROR">
            <summary>
            Enum IOERROR for "IO_ERROR"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ReplicationSource.StateEnum.SQLERROR">
            <summary>
            Enum SQLERROR for "SQL_ERROR"
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationSource.State">
            <summary>
            Gets or Sets State
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationSource.#ctor(System.String,System.String,System.String,System.Nullable{Neurotec.Cluster.Admin.Rest.Model.ReplicationSource.StateEnum},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.ReplicationSource" /> class.
            </summary>
            <param name="Channel">Channel.</param>
            <param name="ServerId">ServerId.</param>
            <param name="Address">Address.</param>
            <param name="State">State.</param>
            <param name="ErrorMessage">ErrorMessage.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationSource.Channel">
            <summary>
            Gets or Sets Channel
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationSource.ServerId">
            <summary>
            Gets or Sets ServerId
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationSource.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationSource.ErrorMessage">
            <summary>
            Gets or Sets ErrorMessage
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationSource.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationSource.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationSource.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationSource.Equals(Neurotec.Cluster.Admin.Rest.Model.ReplicationSource)">
            <summary>
            Returns true if ReplicationSource instances are equal
            </summary>
            <param name="input">Instance of ReplicationSource to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationSource.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationSource.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration">
            <summary>
            ReplicationSourceConfiguration
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration.#ctor(System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration" /> class.
            </summary>
            <param name="Enabled">Enabled (default to false).</param>
            <param name="Address">Address.</param>
            <param name="Password">Password.</param>
            <param name="CopyDatabase">CopyDatabase (default to false).</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration.Enabled">
            <summary>
            Gets or Sets Enabled
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration.Address">
            <summary>
            Gets or Sets Address
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration.Password">
            <summary>
            Gets or Sets Password
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration.CopyDatabase">
            <summary>
            Gets or Sets CopyDatabase
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration.Equals(Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration)">
            <summary>
            Returns true if ReplicationSourceConfiguration instances are equal
            </summary>
            <param name="input">Instance of ReplicationSourceConfiguration to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationSourceConfiguration.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.ReplicationStatus">
            <summary>
            ReplicationStatus
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationStatus.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Collections.Generic.List{Neurotec.Cluster.Admin.Rest.Model.ReplicationClient},System.Collections.Generic.List{Neurotec.Cluster.Admin.Rest.Model.ReplicationSource})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.ReplicationStatus" /> class.
            </summary>
            <param name="CustomSetup">CustomSetup (default to false).</param>
            <param name="Enabled">Enabled (default to false).</param>
            <param name="ServerId">ServerId.</param>
            <param name="ExpireLogsDays">ExpireLogsDays.</param>
            <param name="AllowConnections">AllowConnections (default to false).</param>
            <param name="Clients">Clients.</param>
            <param name="Sources">Sources.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationStatus.CustomSetup">
            <summary>
            Gets or Sets CustomSetup
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationStatus.Enabled">
            <summary>
            Gets or Sets Enabled
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationStatus.ServerId">
            <summary>
            Gets or Sets ServerId
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationStatus.ExpireLogsDays">
            <summary>
            Gets or Sets ExpireLogsDays
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationStatus.AllowConnections">
            <summary>
            Gets or Sets AllowConnections
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationStatus.Clients">
            <summary>
            Gets or Sets Clients
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ReplicationStatus.Sources">
            <summary>
            Gets or Sets Sources
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationStatus.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationStatus.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationStatus.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationStatus.Equals(Neurotec.Cluster.Admin.Rest.Model.ReplicationStatus)">
            <summary>
            Returns true if ReplicationStatus instances are equal
            </summary>
            <param name="input">Instance of ReplicationStatus to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ReplicationStatus.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration">
            <summary>
            SecondaryServerConfiguration
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration.#ctor(System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration" /> class.
            </summary>
            <param name="Enabled">Enabled (default to false).</param>
            <param name="ConnectToAddress">ConnectToAddress.</param>
            <param name="ConnectToPort">ConnectToPort.</param>
            <param name="NodeServerPort">NodeServerPort.</param>
            <param name="NodeMonitorPort">NodeMonitorPort.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration.Enabled">
            <summary>
            Gets or Sets Enabled
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration.ConnectToAddress">
            <summary>
            Gets or Sets ConnectToAddress
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration.ConnectToPort">
            <summary>
            Gets or Sets ConnectToPort
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration.NodeServerPort">
            <summary>
            Gets or Sets NodeServerPort
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration.NodeMonitorPort">
            <summary>
            Gets or Sets NodeMonitorPort
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration.Equals(Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration)">
            <summary>
            Returns true if SecondaryServerConfiguration instances are equal
            </summary>
            <param name="input">Instance of SecondaryServerConfiguration to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.SecondaryServerConfiguration.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration">
            <summary>
            ServerConfiguration
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration" /> class.
            </summary>
            <param name="ExternalNodeCount">ExternalNodeCount.</param>
            <param name="SpareCount">SpareCount.</param>
            <param name="NodeCheckInterval">NodeCheckInterval.</param>
            <param name="MaxTaskCount">MaxTaskCount.</param>
            <param name="AllowClearDatabase">AllowClearDatabase (default to false).</param>
            <param name="PrimaryServerListenAddr">PrimaryServerListenAddr.</param>
            <param name="ClientListenPort">ClientListenPort.</param>
            <param name="AdminListenPort">AdminListenPort.</param>
            <param name="JoinListenPort">JoinListenPort.</param>
            <param name="MonitorListenPort">MonitorListenPort.</param>
            <param name="EnableNotAcceleratedSubjects">EnableNotAcceleratedSubjects (default to false).</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration.ExternalNodeCount">
            <summary>
            Gets or Sets ExternalNodeCount
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration.SpareCount">
            <summary>
            Gets or Sets SpareCount
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration.NodeCheckInterval">
            <summary>
            Gets or Sets NodeCheckInterval
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration.MaxTaskCount">
            <summary>
            Gets or Sets MaxTaskCount
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration.AllowClearDatabase">
            <summary>
            Gets or Sets AllowClearDatabase
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration.PrimaryServerListenAddr">
            <summary>
            Gets or Sets PrimaryServerListenAddr
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration.ClientListenPort">
            <summary>
            Gets or Sets ClientListenPort
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration.AdminListenPort">
            <summary>
            Gets or Sets AdminListenPort
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration.JoinListenPort">
            <summary>
            Gets or Sets JoinListenPort
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration.MonitorListenPort">
            <summary>
            Gets or Sets MonitorListenPort
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration.EnableNotAcceleratedSubjects">
            <summary>
            Gets or Sets EnableNotAcceleratedSubjects
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration.Equals(Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration)">
            <summary>
            Returns true if ServerConfiguration instances are equal
            </summary>
            <param name="input">Instance of ServerConfiguration to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ServerConfiguration.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.ServerInfo">
            <summary>
            ServerInfo
            </summary>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.StatusEnum">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.StatusEnum.Preparing">
            <summary>
            Enum Preparing for "Preparing"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.StatusEnum.Ready">
            <summary>
            Enum Ready for "Ready"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.StatusEnum.Error">
            <summary>
            Enum Error for "Error"
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.FingersLicenseEnum">
            <summary>
            Gets or Sets FingersLicense
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.FingersLicenseEnum.DEVELOPMENT">
            <summary>
            Enum DEVELOPMENT for "DEVELOPMENT"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.FingersLicenseEnum.STANDARD">
            <summary>
            Enum STANDARD for "STANDARD"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.FingersLicenseEnum.EXTENDED">
            <summary>
            Enum EXTENDED for "EXTENDED"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.FingersLicenseEnum.TRIAL">
            <summary>
            Enum TRIAL for "TRIAL"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.FingersLicenseEnum.EXTREME">
            <summary>
            Enum EXTREME for "EXTREME"
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.FingersLicense">
            <summary>
            Gets or Sets FingersLicense
            </summary>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.FacesLicenseEnum">
            <summary>
            Gets or Sets FacesLicense
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.FacesLicenseEnum.DEVELOPMENT">
            <summary>
            Enum DEVELOPMENT for "DEVELOPMENT"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.FacesLicenseEnum.STANDARD">
            <summary>
            Enum STANDARD for "STANDARD"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.FacesLicenseEnum.EXTENDED">
            <summary>
            Enum EXTENDED for "EXTENDED"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.FacesLicenseEnum.TRIAL">
            <summary>
            Enum TRIAL for "TRIAL"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.FacesLicenseEnum.EXTREME">
            <summary>
            Enum EXTREME for "EXTREME"
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.FacesLicense">
            <summary>
            Gets or Sets FacesLicense
            </summary>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.IrisesLicenseEnum">
            <summary>
            Gets or Sets IrisesLicense
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.IrisesLicenseEnum.DEVELOPMENT">
            <summary>
            Enum DEVELOPMENT for "DEVELOPMENT"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.IrisesLicenseEnum.STANDARD">
            <summary>
            Enum STANDARD for "STANDARD"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.IrisesLicenseEnum.EXTENDED">
            <summary>
            Enum EXTENDED for "EXTENDED"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.IrisesLicenseEnum.TRIAL">
            <summary>
            Enum TRIAL for "TRIAL"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.IrisesLicenseEnum.EXTREME">
            <summary>
            Enum EXTREME for "EXTREME"
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.IrisesLicense">
            <summary>
            Gets or Sets IrisesLicense
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.#ctor(System.Nullable{System.Boolean},System.Nullable{Neurotec.Cluster.Admin.Rest.Model.ServerInfo.StatusEnum},System.Nullable{System.Int32},System.Nullable{Neurotec.Cluster.Admin.Rest.Model.ServerInfo.FingersLicenseEnum},System.Nullable{Neurotec.Cluster.Admin.Rest.Model.ServerInfo.FacesLicenseEnum},System.Nullable{Neurotec.Cluster.Admin.Rest.Model.ServerInfo.IrisesLicenseEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.ServerInfo" /> class.
            </summary>
            <param name="Running">Running (default to false).</param>
            <param name="Status">Status.</param>
            <param name="Progress">Progress.</param>
            <param name="FingersLicense">FingersLicense.</param>
            <param name="FacesLicense">FacesLicense.</param>
            <param name="IrisesLicense">IrisesLicense.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.Running">
            <summary>
            Gets or Sets Running
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.Progress">
            <summary>
            Gets or Sets Progress
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.Equals(Neurotec.Cluster.Admin.Rest.Model.ServerInfo)">
            <summary>
            Returns true if ServerInfo instances are equal
            </summary>
            <param name="input">Instance of ServerInfo to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.ServerInfo.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration">
            <summary>
            SnmpConfiguration
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration" /> class.
            </summary>
            <param name="CommunityString">CommunityString.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration.CommunityString">
            <summary>
            Gets or Sets CommunityString
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration.Equals(Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration)">
            <summary>
            Returns true if SnmpConfiguration instances are equal
            </summary>
            <param name="input">Instance of SnmpConfiguration to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.SnmpConfiguration.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.Task">
            <summary>
            Task
            </summary>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.Task.StatusEnum">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.Task.StatusEnum.SUBMITTED">
            <summary>
            Enum SUBMITTED for "SUBMITTED"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.Task.StatusEnum.RUNNING">
            <summary>
            Enum RUNNING for "RUNNING"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.Task.StatusEnum.FINISHED">
            <summary>
            Enum FINISHED for "FINISHED"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.Task.StatusEnum.CANCELED">
            <summary>
            Enum CANCELED for "CANCELED"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.Task.StatusEnum.ERROR">
            <summary>
            Enum ERROR for "ERROR"
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.Task.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.Task.#ctor(System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Nullable{Neurotec.Cluster.Admin.Rest.Model.Task.StatusEnum},System.Nullable{System.Int64},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.Task" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="Title">Title.</param>
            <param name="CreatedAt">CreatedAt.</param>
            <param name="Status">Status.</param>
            <param name="EndedAt">EndedAt.</param>
            <param name="ErrorMessage">ErrorMessage.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.Task.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.Task.Title">
            <summary>
            Gets or Sets Title
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.Task.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.Task.EndedAt">
            <summary>
            Gets or Sets EndedAt
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.Task.ErrorMessage">
            <summary>
            Gets or Sets ErrorMessage
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.Task.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.Task.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.Task.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.Task.Equals(Neurotec.Cluster.Admin.Rest.Model.Task)">
            <summary>
            Returns true if Task instances are equal
            </summary>
            <param name="input">Instance of Task to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.Task.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.Task.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.TemplateCount">
            <summary>
            TemplateCount
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.TemplateCount.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.TemplateCount" /> class.
            </summary>
            <param name="Count">Count.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.TemplateCount.Count">
            <summary>
            Gets or Sets Count
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.TemplateCount.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.TemplateCount.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.TemplateCount.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.TemplateCount.Equals(Neurotec.Cluster.Admin.Rest.Model.TemplateCount)">
            <summary>
            Returns true if TemplateCount instances are equal
            </summary>
            <param name="input">Instance of TemplateCount to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.TemplateCount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.TemplateCount.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.TemplateCounts">
            <summary>
            TemplateCounts
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.TemplateCounts.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.TemplateCounts" /> class.
            </summary>
            <param name="AcceleratedFingersCount">AcceleratedFingersCount.</param>
            <param name="AcceleratedFingersLimit">AcceleratedFingersLimit.</param>
            <param name="AcceleratedIrisesCount">AcceleratedIrisesCount.</param>
            <param name="AcceleratedIrisesLimit">AcceleratedIrisesLimit.</param>
            <param name="AcceleratedFacesCount">AcceleratedFacesCount.</param>
            <param name="AcceleratedFacesLimit">AcceleratedFacesLimit.</param>
            <param name="AcceleratedRecords">AcceleratedRecords.</param>
            <param name="SubjectCount">SubjectCount.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.TemplateCounts.AcceleratedFingersCount">
            <summary>
            Gets or Sets AcceleratedFingersCount
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.TemplateCounts.AcceleratedFingersLimit">
            <summary>
            Gets or Sets AcceleratedFingersLimit
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.TemplateCounts.AcceleratedIrisesCount">
            <summary>
            Gets or Sets AcceleratedIrisesCount
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.TemplateCounts.AcceleratedIrisesLimit">
            <summary>
            Gets or Sets AcceleratedIrisesLimit
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.TemplateCounts.AcceleratedFacesCount">
            <summary>
            Gets or Sets AcceleratedFacesCount
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.TemplateCounts.AcceleratedFacesLimit">
            <summary>
            Gets or Sets AcceleratedFacesLimit
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.TemplateCounts.AcceleratedRecords">
            <summary>
            Gets or Sets AcceleratedRecords
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.TemplateCounts.SubjectCount">
            <summary>
            Gets or Sets SubjectCount
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.TemplateCounts.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.TemplateCounts.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.TemplateCounts.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.TemplateCounts.Equals(Neurotec.Cluster.Admin.Rest.Model.TemplateCounts)">
            <summary>
            Returns true if TemplateCounts instances are equal
            </summary>
            <param name="input">Instance of TemplateCounts to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.TemplateCounts.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.TemplateCounts.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.VpnBundle">
            <summary>
            VpnBundle
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnBundle.#ctor(Neurotec.Cluster.Admin.Rest.Model.FileWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.VpnBundle" /> class.
            </summary>
            <param name="File">File.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.VpnBundle.File">
            <summary>
            Gets or Sets File
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnBundle.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnBundle.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnBundle.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnBundle.Equals(Neurotec.Cluster.Admin.Rest.Model.VpnBundle)">
            <summary>
            Returns true if VpnBundle instances are equal
            </summary>
            <param name="input">Instance of VpnBundle to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnBundle.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnBundle.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest">
            <summary>
            VpnBundleRequest
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest" /> class.
            </summary>
            <param name="Name">Name.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest.Equals(Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest)">
            <summary>
            Returns true if VpnBundleRequest instances are equal
            </summary>
            <param name="input">Instance of VpnBundleRequest to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnBundleRequest.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration">
            <summary>
            VpnConfiguration
            </summary>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.CipherEnum">
            <summary>
            Gets or Sets Cipher
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.CipherEnum.AES128CBC">
            <summary>
            Enum AES128CBC for "AES_128_CBC"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.CipherEnum.BFCBC">
            <summary>
            Enum BFCBC for "BF_CBC"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.CipherEnum.DESEDE3CBC">
            <summary>
            Enum DESEDE3CBC for "DES_EDE3_CBC"
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.Cipher">
            <summary>
            Gets or Sets Cipher
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.#ctor(System.String,System.String,System.Nullable{System.Int32},System.Nullable{Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.CipherEnum},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration" /> class.
            </summary>
            <param name="NetworkAddress">NetworkAddress.</param>
            <param name="NetworkMask">NetworkMask.</param>
            <param name="UdpPort">UdpPort.</param>
            <param name="Cipher">Cipher.</param>
            <param name="CaExpireDays">CaExpireDays.</param>
            <param name="KeyExpireDays">KeyExpireDays.</param>
            <param name="KeySize">KeySize.</param>
            <param name="KeyCountry">KeyCountry.</param>
            <param name="KeyProvince">KeyProvince.</param>
            <param name="KeyCity">KeyCity.</param>
            <param name="KeyEmail">KeyEmail.</param>
            <param name="KeyOrg">KeyOrg.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.NetworkAddress">
            <summary>
            Gets or Sets NetworkAddress
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.NetworkMask">
            <summary>
            Gets or Sets NetworkMask
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.UdpPort">
            <summary>
            Gets or Sets UdpPort
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.CaExpireDays">
            <summary>
            Gets or Sets CaExpireDays
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.KeyExpireDays">
            <summary>
            Gets or Sets KeyExpireDays
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.KeySize">
            <summary>
            Gets or Sets KeySize
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.KeyCountry">
            <summary>
            Gets or Sets KeyCountry
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.KeyProvince">
            <summary>
            Gets or Sets KeyProvince
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.KeyCity">
            <summary>
            Gets or Sets KeyCity
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.KeyEmail">
            <summary>
            Gets or Sets KeyEmail
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.KeyOrg">
            <summary>
            Gets or Sets KeyOrg
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.Equals(Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration)">
            <summary>
            Returns true if VpnConfiguration instances are equal
            </summary>
            <param name="input">Instance of VpnConfiguration to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnConfiguration.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.VpnInfo">
            <summary>
            VpnInfo
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnInfo.#ctor(System.Nullable{System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.VpnInfo" /> class.
            </summary>
            <param name="Running">Running (default to false).</param>
            <param name="IpAddress">IpAddress.</param>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.VpnInfo.Running">
            <summary>
            Gets or Sets Running
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.VpnInfo.IpAddress">
            <summary>
            Gets or Sets IpAddress
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnInfo.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnInfo.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnInfo.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnInfo.Equals(Neurotec.Cluster.Admin.Rest.Model.VpnInfo)">
            <summary>
            Returns true if VpnInfo instances are equal
            </summary>
            <param name="input">Instance of VpnInfo to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnInfo.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.VpnMode">
            <summary>
            VpnMode
            </summary>
        </member>
        <member name="T:Neurotec.Cluster.Admin.Rest.Model.VpnMode.ModeEnum">
            <summary>
            Gets or Sets Mode
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.VpnMode.ModeEnum.NONE">
            <summary>
            Enum NONE for "NONE"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.VpnMode.ModeEnum.MANUAL">
            <summary>
            Enum MANUAL for "MANUAL"
            </summary>
        </member>
        <member name="F:Neurotec.Cluster.Admin.Rest.Model.VpnMode.ModeEnum.AUTOMATIC">
            <summary>
            Enum AUTOMATIC for "AUTOMATIC"
            </summary>
        </member>
        <member name="P:Neurotec.Cluster.Admin.Rest.Model.VpnMode.Mode">
            <summary>
            Gets or Sets Mode
            </summary>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnMode.#ctor(System.Nullable{Neurotec.Cluster.Admin.Rest.Model.VpnMode.ModeEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Cluster.Admin.Rest.Model.VpnMode" /> class.
            </summary>
            <param name="Mode">Mode.</param>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnMode.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnMode.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnMode.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnMode.Equals(Neurotec.Cluster.Admin.Rest.Model.VpnMode)">
            <summary>
            Returns true if VpnMode instances are equal
            </summary>
            <param name="input">Instance of VpnMode to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnMode.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Cluster.Admin.Rest.Model.VpnMode.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
    </members>
</doc>
