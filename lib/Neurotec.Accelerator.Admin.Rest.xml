<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neurotec.Accelerator.Admin.Rest</name>
    </assembly>
    <members>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.IAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminApi.ChangePassword(Neurotec.Accelerator.Admin.Rest.Model.Password)">
            <summary>
            Change password
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminApi.ChangePasswordWithHttpInfo(Neurotec.Accelerator.Admin.Rest.Model.Password)">
            <summary>
            Change password
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminApi.ChangePasswordAsync(Neurotec.Accelerator.Admin.Rest.Model.Password)">
            <summary>
            Change password
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminApi.ChangePasswordAsyncWithHttpInfo(Neurotec.Accelerator.Admin.Rest.Model.Password)">
            <summary>
            Change password
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.AdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.AdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminApi.#ctor(Neurotec.Accelerator.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.AdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.AdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.AdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminApi.ChangePassword(Neurotec.Accelerator.Admin.Rest.Model.Password)">
            <summary>
            Change password 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminApi.ChangePasswordWithHttpInfo(Neurotec.Accelerator.Admin.Rest.Model.Password)">
            <summary>
            Change password 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminApi.ChangePasswordAsync(Neurotec.Accelerator.Admin.Rest.Model.Password)">
            <summary>
            Change password 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminApi.ChangePasswordAsyncWithHttpInfo(Neurotec.Accelerator.Admin.Rest.Model.Password)">
            <summary>
            Change password 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.IAdminLogsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminLogsApi.GetFullNodeLog">
            <summary>
            Download full node log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminLogsApi.GetFullNodeLogWithHttpInfo">
            <summary>
            Download full node log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminLogsApi.GetNodeLog(System.Nullable{System.Int32})">
            <summary>
            Get last node log lines
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>List&lt;LogEntry&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminLogsApi.GetNodeLogWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get last node log lines
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>ApiResponse of List&lt;LogEntry&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminLogsApi.GetShortNodeLog">
            <summary>
            Get short node log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminLogsApi.GetShortNodeLogWithHttpInfo">
            <summary>
            Get short node log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminLogsApi.GetFullNodeLogAsync">
            <summary>
            Download full node log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of void</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminLogsApi.GetFullNodeLogAsyncWithHttpInfo">
            <summary>
            Download full node log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminLogsApi.GetNodeLogAsync(System.Nullable{System.Int32})">
            <summary>
            Get last node log lines
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>Task of List&lt;LogEntry&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminLogsApi.GetNodeLogAsyncWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get last node log lines
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>Task of ApiResponse (List&lt;LogEntry&gt;)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminLogsApi.GetShortNodeLogAsync">
            <summary>
            Get short node log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminLogsApi.GetShortNodeLogAsyncWithHttpInfo">
            <summary>
            Get short node log
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (FileWrapper)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.#ctor(Neurotec.Accelerator.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.GetFullNodeLog">
            <summary>
            Download full node log 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.GetFullNodeLogWithHttpInfo">
            <summary>
            Download full node log 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.GetFullNodeLogAsync">
            <summary>
            Download full node log 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of void</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.GetFullNodeLogAsyncWithHttpInfo">
            <summary>
            Download full node log 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.GetNodeLog(System.Nullable{System.Int32})">
            <summary>
            Get last node log lines 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>List&lt;LogEntry&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.GetNodeLogWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get last node log lines 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>ApiResponse of List&lt;LogEntry&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.GetNodeLogAsync(System.Nullable{System.Int32})">
            <summary>
            Get last node log lines 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>Task of List&lt;LogEntry&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.GetNodeLogAsyncWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get last node log lines 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="lines">Log length (optional, default to 50)</param>
            <returns>Task of ApiResponse (List&lt;LogEntry&gt;)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.GetShortNodeLog">
            <summary>
            Get short node log 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.GetShortNodeLogWithHttpInfo">
            <summary>
            Get short node log 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.GetShortNodeLogAsync">
            <summary>
            Get short node log 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of FileWrapper</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminLogsApi.GetShortNodeLogAsyncWithHttpInfo">
            <summary>
            Get short node log 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (FileWrapper)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.IAdminTasksApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminTasksApi.GetTask(System.Nullable{System.Int32})">
            <summary>
            Get task status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminTasksApi.GetTaskWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get task status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminTasksApi.GetTasks(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get statuses of multiple tasks
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="page">Page number (optional, default to 0)</param>
            <param name="size">Page size (optional, default to 10)</param>
            <param name="sort">Field name to sort by (optional)</param>
            <param name="reverse">If true - sort descending, false - ascending (optional, default to false)</param>
            <param name="status">Filter by status (optional)</param>
            <param name="createdAtUpper">Upper createdAt bound (optional)</param>
            <param name="createdAtLower">Lower createdAt bound (optional)</param>
            <param name="endedAtUpper">Upper endedAt bound (optional)</param>
            <param name="endedAtLower">Lower endedAt bound (optional)</param>
            <param name="phrase">Filter by phrase in title or error message (optional)</param>
            <returns>List&lt;Task&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminTasksApi.GetTasksWithHttpInfo(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get statuses of multiple tasks
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="page">Page number (optional, default to 0)</param>
            <param name="size">Page size (optional, default to 10)</param>
            <param name="sort">Field name to sort by (optional)</param>
            <param name="reverse">If true - sort descending, false - ascending (optional, default to false)</param>
            <param name="status">Filter by status (optional)</param>
            <param name="createdAtUpper">Upper createdAt bound (optional)</param>
            <param name="createdAtLower">Lower createdAt bound (optional)</param>
            <param name="endedAtUpper">Upper endedAt bound (optional)</param>
            <param name="endedAtLower">Lower endedAt bound (optional)</param>
            <param name="phrase">Filter by phrase in title or error message (optional)</param>
            <returns>ApiResponse of List&lt;Task&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminTasksApi.GetTaskAsync(System.Nullable{System.Int32})">
            <summary>
            Get task status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminTasksApi.GetTaskAsyncWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get task status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminTasksApi.GetTasksAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get statuses of multiple tasks
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="page">Page number (optional, default to 0)</param>
            <param name="size">Page size (optional, default to 10)</param>
            <param name="sort">Field name to sort by (optional)</param>
            <param name="reverse">If true - sort descending, false - ascending (optional, default to false)</param>
            <param name="status">Filter by status (optional)</param>
            <param name="createdAtUpper">Upper createdAt bound (optional)</param>
            <param name="createdAtLower">Lower createdAt bound (optional)</param>
            <param name="endedAtUpper">Upper endedAt bound (optional)</param>
            <param name="endedAtLower">Lower endedAt bound (optional)</param>
            <param name="phrase">Filter by phrase in title or error message (optional)</param>
            <returns>Task of List&lt;Task&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IAdminTasksApi.GetTasksAsyncWithHttpInfo(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get statuses of multiple tasks
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="page">Page number (optional, default to 0)</param>
            <param name="size">Page size (optional, default to 10)</param>
            <param name="sort">Field name to sort by (optional)</param>
            <param name="reverse">If true - sort descending, false - ascending (optional, default to false)</param>
            <param name="status">Filter by status (optional)</param>
            <param name="createdAtUpper">Upper createdAt bound (optional)</param>
            <param name="createdAtLower">Lower createdAt bound (optional)</param>
            <param name="endedAtUpper">Upper endedAt bound (optional)</param>
            <param name="endedAtLower">Lower endedAt bound (optional)</param>
            <param name="phrase">Filter by phrase in title or error message (optional)</param>
            <returns>Task of ApiResponse (List&lt;Task&gt;)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi.#ctor(Neurotec.Accelerator.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi.GetTask(System.Nullable{System.Int32})">
            <summary>
            Get task status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi.GetTaskWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get task status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi.GetTaskAsync(System.Nullable{System.Int32})">
            <summary>
            Get task status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi.GetTaskAsyncWithHttpInfo(System.Nullable{System.Int32})">
            <summary>
            Get task status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi.GetTasks(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get statuses of multiple tasks 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="page">Page number (optional, default to 0)</param>
            <param name="size">Page size (optional, default to 10)</param>
            <param name="sort">Field name to sort by (optional)</param>
            <param name="reverse">If true - sort descending, false - ascending (optional, default to false)</param>
            <param name="status">Filter by status (optional)</param>
            <param name="createdAtUpper">Upper createdAt bound (optional)</param>
            <param name="createdAtLower">Lower createdAt bound (optional)</param>
            <param name="endedAtUpper">Upper endedAt bound (optional)</param>
            <param name="endedAtLower">Lower endedAt bound (optional)</param>
            <param name="phrase">Filter by phrase in title or error message (optional)</param>
            <returns>List&lt;Task&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi.GetTasksWithHttpInfo(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get statuses of multiple tasks 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="page">Page number (optional, default to 0)</param>
            <param name="size">Page size (optional, default to 10)</param>
            <param name="sort">Field name to sort by (optional)</param>
            <param name="reverse">If true - sort descending, false - ascending (optional, default to false)</param>
            <param name="status">Filter by status (optional)</param>
            <param name="createdAtUpper">Upper createdAt bound (optional)</param>
            <param name="createdAtLower">Lower createdAt bound (optional)</param>
            <param name="endedAtUpper">Upper endedAt bound (optional)</param>
            <param name="endedAtLower">Lower endedAt bound (optional)</param>
            <param name="phrase">Filter by phrase in title or error message (optional)</param>
            <returns>ApiResponse of List&lt;Task&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi.GetTasksAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get statuses of multiple tasks 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="page">Page number (optional, default to 0)</param>
            <param name="size">Page size (optional, default to 10)</param>
            <param name="sort">Field name to sort by (optional)</param>
            <param name="reverse">If true - sort descending, false - ascending (optional, default to false)</param>
            <param name="status">Filter by status (optional)</param>
            <param name="createdAtUpper">Upper createdAt bound (optional)</param>
            <param name="createdAtLower">Lower createdAt bound (optional)</param>
            <param name="endedAtUpper">Upper endedAt bound (optional)</param>
            <param name="endedAtLower">Lower endedAt bound (optional)</param>
            <param name="phrase">Filter by phrase in title or error message (optional)</param>
            <returns>Task of List&lt;Task&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.AdminTasksApi.GetTasksAsyncWithHttpInfo(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get statuses of multiple tasks 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="page">Page number (optional, default to 0)</param>
            <param name="size">Page size (optional, default to 10)</param>
            <param name="sort">Field name to sort by (optional)</param>
            <param name="reverse">If true - sort descending, false - ascending (optional, default to false)</param>
            <param name="status">Filter by status (optional)</param>
            <param name="createdAtUpper">Upper createdAt bound (optional)</param>
            <param name="createdAtLower">Lower createdAt bound (optional)</param>
            <param name="endedAtUpper">Upper endedAt bound (optional)</param>
            <param name="endedAtLower">Lower endedAt bound (optional)</param>
            <param name="phrase">Filter by phrase in title or error message (optional)</param>
            <returns>Task of ApiResponse (List&lt;Task&gt;)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.IBiographicAttributesAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IBiographicAttributesAdminApi.GetBiographicAttributes">
            <summary>
            Get current biographic attributes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;BiographicAttribute&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IBiographicAttributesAdminApi.GetBiographicAttributesWithHttpInfo">
            <summary>
            Get current biographic attributes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;BiographicAttribute&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IBiographicAttributesAdminApi.SetBiographicAttributes(System.Collections.Generic.List{Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute})">
            <summary>
            Set new biographic attribute schema
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IBiographicAttributesAdminApi.SetBiographicAttributesWithHttpInfo(System.Collections.Generic.List{Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute})">
            <summary>
            Set new biographic attribute schema
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IBiographicAttributesAdminApi.GetBiographicAttributesAsync">
            <summary>
            Get current biographic attributes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of List&lt;BiographicAttribute&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IBiographicAttributesAdminApi.GetBiographicAttributesAsyncWithHttpInfo">
            <summary>
            Get current biographic attributes
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (List&lt;BiographicAttribute&gt;)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IBiographicAttributesAdminApi.SetBiographicAttributesAsync(System.Collections.Generic.List{Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute})">
            <summary>
            Set new biographic attribute schema
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IBiographicAttributesAdminApi.SetBiographicAttributesAsyncWithHttpInfo(System.Collections.Generic.List{Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute})">
            <summary>
            Set new biographic attribute schema
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi.#ctor(Neurotec.Accelerator.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi.GetBiographicAttributes">
            <summary>
            Get current biographic attributes 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;BiographicAttribute&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi.GetBiographicAttributesWithHttpInfo">
            <summary>
            Get current biographic attributes 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;BiographicAttribute&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi.GetBiographicAttributesAsync">
            <summary>
            Get current biographic attributes 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of List&lt;BiographicAttribute&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi.GetBiographicAttributesAsyncWithHttpInfo">
            <summary>
            Get current biographic attributes 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (List&lt;BiographicAttribute&gt;)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi.SetBiographicAttributes(System.Collections.Generic.List{Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute})">
            <summary>
            Set new biographic attribute schema 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi.SetBiographicAttributesWithHttpInfo(System.Collections.Generic.List{Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute})">
            <summary>
            Set new biographic attribute schema 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi.SetBiographicAttributesAsync(System.Collections.Generic.List{Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute})">
            <summary>
            Set new biographic attribute schema 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.BiographicAttributesAdminApi.SetBiographicAttributesAsyncWithHttpInfo(System.Collections.Generic.List{Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute})">
            <summary>
            Set new biographic attribute schema 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.IClusterAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IClusterAdminApi.GetCapacityInfo">
            <summary>
            Get capacity info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>CapacityInfo</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IClusterAdminApi.GetCapacityInfoWithHttpInfo">
            <summary>
            Get capacity info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of CapacityInfo</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IClusterAdminApi.GetClusterStatus">
            <summary>
            Get cluster status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ClusterStatus</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IClusterAdminApi.GetClusterStatusWithHttpInfo">
            <summary>
            Get cluster status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of ClusterStatus</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IClusterAdminApi.StartCluster(System.Nullable{System.Boolean})">
            <summary>
            Start MMA cluster
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="remember">Always start with current node count? (optional, default to false)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IClusterAdminApi.StartClusterWithHttpInfo(System.Nullable{System.Boolean})">
            <summary>
            Start MMA cluster
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="remember">Always start with current node count? (optional, default to false)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IClusterAdminApi.GetCapacityInfoAsync">
            <summary>
            Get capacity info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of CapacityInfo</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IClusterAdminApi.GetCapacityInfoAsyncWithHttpInfo">
            <summary>
            Get capacity info
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (CapacityInfo)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IClusterAdminApi.GetClusterStatusAsync">
            <summary>
            Get cluster status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ClusterStatus</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IClusterAdminApi.GetClusterStatusAsyncWithHttpInfo">
            <summary>
            Get cluster status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (ClusterStatus)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IClusterAdminApi.StartClusterAsync(System.Nullable{System.Boolean})">
            <summary>
            Start MMA cluster
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="remember">Always start with current node count? (optional, default to false)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IClusterAdminApi.StartClusterAsyncWithHttpInfo(System.Nullable{System.Boolean})">
            <summary>
            Start MMA cluster
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="remember">Always start with current node count? (optional, default to false)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.#ctor(Neurotec.Accelerator.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.GetCapacityInfo">
            <summary>
            Get capacity info 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>CapacityInfo</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.GetCapacityInfoWithHttpInfo">
            <summary>
            Get capacity info 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of CapacityInfo</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.GetCapacityInfoAsync">
            <summary>
            Get capacity info 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of CapacityInfo</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.GetCapacityInfoAsyncWithHttpInfo">
            <summary>
            Get capacity info 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (CapacityInfo)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.GetClusterStatus">
            <summary>
            Get cluster status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ClusterStatus</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.GetClusterStatusWithHttpInfo">
            <summary>
            Get cluster status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of ClusterStatus</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.GetClusterStatusAsync">
            <summary>
            Get cluster status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ClusterStatus</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.GetClusterStatusAsyncWithHttpInfo">
            <summary>
            Get cluster status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (ClusterStatus)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.StartCluster(System.Nullable{System.Boolean})">
            <summary>
            Start MMA cluster 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="remember">Always start with current node count? (optional, default to false)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.StartClusterWithHttpInfo(System.Nullable{System.Boolean})">
            <summary>
            Start MMA cluster 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="remember">Always start with current node count? (optional, default to false)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.StartClusterAsync(System.Nullable{System.Boolean})">
            <summary>
            Start MMA cluster 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="remember">Always start with current node count? (optional, default to false)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ClusterAdminApi.StartClusterAsyncWithHttpInfo(System.Nullable{System.Boolean})">
            <summary>
            Start MMA cluster 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="remember">Always start with current node count? (optional, default to false)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.IConfigurationAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IConfigurationAdminApi.GetConfiguration">
            <summary>
            Get current configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ClusterConfiguration</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IConfigurationAdminApi.GetConfigurationWithHttpInfo">
            <summary>
            Get current configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of ClusterConfiguration</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IConfigurationAdminApi.SetConfiguration(Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration)">
            <summary>
            Change configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IConfigurationAdminApi.SetConfigurationWithHttpInfo(Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration)">
            <summary>
            Change configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IConfigurationAdminApi.GetConfigurationAsync">
            <summary>
            Get current configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ClusterConfiguration</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IConfigurationAdminApi.GetConfigurationAsyncWithHttpInfo">
            <summary>
            Get current configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (ClusterConfiguration)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IConfigurationAdminApi.SetConfigurationAsync(Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration)">
            <summary>
            Change configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IConfigurationAdminApi.SetConfigurationAsyncWithHttpInfo(Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration)">
            <summary>
            Change configuration
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi.#ctor(Neurotec.Accelerator.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi.GetConfiguration">
            <summary>
            Get current configuration 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ClusterConfiguration</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi.GetConfigurationWithHttpInfo">
            <summary>
            Get current configuration 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of ClusterConfiguration</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi.GetConfigurationAsync">
            <summary>
            Get current configuration 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ClusterConfiguration</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi.GetConfigurationAsyncWithHttpInfo">
            <summary>
            Get current configuration 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (ClusterConfiguration)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi.SetConfiguration(Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration)">
            <summary>
            Change configuration 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi.SetConfigurationWithHttpInfo(Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration)">
            <summary>
            Change configuration 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi.SetConfigurationAsync(Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration)">
            <summary>
            Change configuration 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ConfigurationAdminApi.SetConfigurationAsyncWithHttpInfo(Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration)">
            <summary>
            Change configuration 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.IDatabaseAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IDatabaseAdminApi.GetDatabaseBackup(System.IO.Stream)">
            <summary>
            Create database backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IDatabaseAdminApi.GetDatabaseBackupWithHttpInfo(System.IO.Stream)">
            <summary>
            Create database backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IDatabaseAdminApi.GetTemplateCount">
            <summary>
            Get template count
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>TemplateCount</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IDatabaseAdminApi.GetTemplateCountWithHttpInfo">
            <summary>
            Get template count
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of TemplateCount</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IDatabaseAdminApi.RestoreDatabase(System.IO.Stream)">
            <summary>
            Restore database from backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IDatabaseAdminApi.RestoreDatabaseWithHttpInfo(System.IO.Stream)">
            <summary>
            Restore database from backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"></param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IDatabaseAdminApi.GetDatabaseBackupAsync(System.IO.Stream)">
            <summary>
            Create database backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of System.IO.Stream</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IDatabaseAdminApi.GetDatabaseBackupAsyncWithHttpInfo(System.IO.Stream)">
            <summary>
            Create database backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (System.IO.Stream)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IDatabaseAdminApi.GetTemplateCountAsync">
            <summary>
            Get template count
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of TemplateCount</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IDatabaseAdminApi.GetTemplateCountAsyncWithHttpInfo">
            <summary>
            Get template count
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (TemplateCount)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IDatabaseAdminApi.RestoreDatabaseAsync(System.IO.Stream)">
            <summary>
            Restore database from backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"></param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IDatabaseAdminApi.RestoreDatabaseAsyncWithHttpInfo(System.IO.Stream)">
            <summary>
            Restore database from backup
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"></param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.#ctor(Neurotec.Accelerator.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.GetDatabaseBackup(System.IO.Stream)">
            <summary>
            Create database backup 
            </summary>
            <param name="destinationStream">Destination stream where to write backup data.</param>
            <exception cref="!:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>string</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.GetDatabaseBackupWithHttpInfo(System.IO.Stream)">
            <summary>
            Create database backup 
            </summary>
            <param name="destinationStream">Destination stream where to write backup data.</param>
            <exception cref="!:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of string</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.GetDatabaseBackupAsync(System.IO.Stream)">
            <summary>
            Create database backup 
            </summary>
            <param name="destinationStream">Destination stream where to write backup data.</param>
            <exception cref="!:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of string</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.GetDatabaseBackupAsyncWithHttpInfo(System.IO.Stream)">
            <summary>
            Create database backup 
            </summary>
            <param name="destinationStream">Destination stream where to write backup data.</param>
            <exception cref="!:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (string)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.GetTemplateCount">
            <summary>
            Get template count 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>TemplateCount</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.GetTemplateCountWithHttpInfo">
            <summary>
            Get template count 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of TemplateCount</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.GetTemplateCountAsync">
            <summary>
            Get template count 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of TemplateCount</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.GetTemplateCountAsyncWithHttpInfo">
            <summary>
            Get template count 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (TemplateCount)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.RestoreDatabase(System.IO.Stream)">
            <summary>
            Restore database from backup 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.RestoreDatabaseWithHttpInfo(System.IO.Stream)">
            <summary>
            Restore database from backup 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"></param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.RestoreDatabaseAsync(System.IO.Stream)">
            <summary>
            Restore database from backup 
            </summary>
            <exception cref="!:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"></param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.DatabaseAdminApi.RestoreDatabaseAsyncWithHttpInfo(System.IO.Stream)">
            <summary>
            Restore database from backup 
            </summary>
            <exception cref="!:Neurotec.Cluster.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"></param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.IFederationAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IFederationAdminApi.GetFederationConnections">
            <summary>
            Get federation connections (nodes to connect to from other clusters)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;HostAndPort&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IFederationAdminApi.GetFederationConnectionsWithHttpInfo">
            <summary>
            Get federation connections (nodes to connect to from other clusters)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;HostAndPort&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IFederationAdminApi.GetNodesStatus">
            <summary>
            Get federation status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;FederationConnectionStatus&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IFederationAdminApi.GetNodesStatusWithHttpInfo">
            <summary>
            Get federation status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;FederationConnectionStatus&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IFederationAdminApi.SetFederationConnections(System.Collections.Generic.List{Neurotec.Accelerator.Admin.Rest.Model.HostAndPort})">
            <summary>
            Change federation connections (nodes to connect to from other clusters)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IFederationAdminApi.SetFederationConnectionsWithHttpInfo(System.Collections.Generic.List{Neurotec.Accelerator.Admin.Rest.Model.HostAndPort})">
            <summary>
            Change federation connections (nodes to connect to from other clusters)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IFederationAdminApi.GetFederationConnectionsAsync">
            <summary>
            Get federation connections (nodes to connect to from other clusters)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of List&lt;HostAndPort&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IFederationAdminApi.GetFederationConnectionsAsyncWithHttpInfo">
            <summary>
            Get federation connections (nodes to connect to from other clusters)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (List&lt;HostAndPort&gt;)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IFederationAdminApi.GetNodesStatusAsync">
            <summary>
            Get federation status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of List&lt;FederationConnectionStatus&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IFederationAdminApi.GetNodesStatusAsyncWithHttpInfo">
            <summary>
            Get federation status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (List&lt;FederationConnectionStatus&gt;)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IFederationAdminApi.SetFederationConnectionsAsync(System.Collections.Generic.List{Neurotec.Accelerator.Admin.Rest.Model.HostAndPort})">
            <summary>
            Change federation connections (nodes to connect to from other clusters)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.IFederationAdminApi.SetFederationConnectionsAsyncWithHttpInfo(System.Collections.Generic.List{Neurotec.Accelerator.Admin.Rest.Model.HostAndPort})">
            <summary>
            Change federation connections (nodes to connect to from other clusters)
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.#ctor(Neurotec.Accelerator.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.GetFederationConnections">
            <summary>
            Get federation connections (nodes to connect to from other clusters) 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;HostAndPort&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.GetFederationConnectionsWithHttpInfo">
            <summary>
            Get federation connections (nodes to connect to from other clusters) 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;HostAndPort&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.GetFederationConnectionsAsync">
            <summary>
            Get federation connections (nodes to connect to from other clusters) 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of List&lt;HostAndPort&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.GetFederationConnectionsAsyncWithHttpInfo">
            <summary>
            Get federation connections (nodes to connect to from other clusters) 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (List&lt;HostAndPort&gt;)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.GetNodesStatus">
            <summary>
            Get federation status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;FederationConnectionStatus&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.GetNodesStatusWithHttpInfo">
            <summary>
            Get federation status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;FederationConnectionStatus&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.GetNodesStatusAsync">
            <summary>
            Get federation status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of List&lt;FederationConnectionStatus&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.GetNodesStatusAsyncWithHttpInfo">
            <summary>
            Get federation status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (List&lt;FederationConnectionStatus&gt;)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.SetFederationConnections(System.Collections.Generic.List{Neurotec.Accelerator.Admin.Rest.Model.HostAndPort})">
            <summary>
            Change federation connections (nodes to connect to from other clusters) 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.SetFederationConnectionsWithHttpInfo(System.Collections.Generic.List{Neurotec.Accelerator.Admin.Rest.Model.HostAndPort})">
            <summary>
            Change federation connections (nodes to connect to from other clusters) 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.SetFederationConnectionsAsync(System.Collections.Generic.List{Neurotec.Accelerator.Admin.Rest.Model.HostAndPort})">
            <summary>
            Change federation connections (nodes to connect to from other clusters) 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.FederationAdminApi.SetFederationConnectionsAsyncWithHttpInfo(System.Collections.Generic.List{Neurotec.Accelerator.Admin.Rest.Model.HostAndPort})">
            <summary>
            Change federation connections (nodes to connect to from other clusters) 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="body"> (optional)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.ILicensingAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ILicensingAdminApi.GetLicensingStatus">
            <summary>
            Get licensing status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>LicensingStatus</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ILicensingAdminApi.GetLicensingStatusWithHttpInfo">
            <summary>
            Get licensing status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of LicensingStatus</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ILicensingAdminApi.GetLicensingStatusAsync">
            <summary>
            Get licensing status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of LicensingStatus</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.ILicensingAdminApi.GetLicensingStatusAsyncWithHttpInfo">
            <summary>
            Get licensing status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (LicensingStatus)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.LicensingAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.LicensingAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.LicensingAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.LicensingAdminApi.#ctor(Neurotec.Accelerator.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.LicensingAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.LicensingAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.LicensingAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.LicensingAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.LicensingAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.LicensingAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.LicensingAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.LicensingAdminApi.GetLicensingStatus">
            <summary>
            Get licensing status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>LicensingStatus</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.LicensingAdminApi.GetLicensingStatusWithHttpInfo">
            <summary>
            Get licensing status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of LicensingStatus</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.LicensingAdminApi.GetLicensingStatusAsync">
            <summary>
            Get licensing status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of LicensingStatus</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.LicensingAdminApi.GetLicensingStatusAsyncWithHttpInfo">
            <summary>
            Get licensing status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (LicensingStatus)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.INodeAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.INodeAdminApi.ShutdownNode(System.Nullable{System.Boolean})">
            <summary>
            Shutdown node
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="force">Force shutdown (optional, default to false)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.INodeAdminApi.ShutdownNodeWithHttpInfo(System.Nullable{System.Boolean})">
            <summary>
            Shutdown node
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="force">Force shutdown (optional, default to false)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.INodeAdminApi.ShutdownNodeAsync(System.Nullable{System.Boolean})">
            <summary>
            Shutdown node
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="force">Force shutdown (optional, default to false)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.INodeAdminApi.ShutdownNodeAsyncWithHttpInfo(System.Nullable{System.Boolean})">
            <summary>
            Shutdown node
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="force">Force shutdown (optional, default to false)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.NodeAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodeAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.NodeAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodeAdminApi.#ctor(Neurotec.Accelerator.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.NodeAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodeAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodeAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.NodeAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.NodeAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodeAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodeAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodeAdminApi.ShutdownNode(System.Nullable{System.Boolean})">
            <summary>
            Shutdown node 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="force">Force shutdown (optional, default to false)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodeAdminApi.ShutdownNodeWithHttpInfo(System.Nullable{System.Boolean})">
            <summary>
            Shutdown node 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="force">Force shutdown (optional, default to false)</param>
            <returns>ApiResponse of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodeAdminApi.ShutdownNodeAsync(System.Nullable{System.Boolean})">
            <summary>
            Shutdown node 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="force">Force shutdown (optional, default to false)</param>
            <returns>Task of Task</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodeAdminApi.ShutdownNodeAsyncWithHttpInfo(System.Nullable{System.Boolean})">
            <summary>
            Shutdown node 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="force">Force shutdown (optional, default to false)</param>
            <returns>Task of ApiResponse (Task)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.INodesAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.INodesAdminApi.GetNodeStatus(System.String)">
            <summary>
            Get node status by node ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="nodeId">Node ID, or keyword \&quot;local\&quot; for local node</param>
            <returns>NodeStatus</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.INodesAdminApi.GetNodeStatusWithHttpInfo(System.String)">
            <summary>
            Get node status by node ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="nodeId">Node ID, or keyword \&quot;local\&quot; for local node</param>
            <returns>ApiResponse of NodeStatus</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.INodesAdminApi.GetNodesStatus">
            <summary>
            Get nodes status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;NodeStatus&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.INodesAdminApi.GetNodesStatusWithHttpInfo">
            <summary>
            Get nodes status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;NodeStatus&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.INodesAdminApi.GetNodeStatusAsync(System.String)">
            <summary>
            Get node status by node ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="nodeId">Node ID, or keyword \&quot;local\&quot; for local node</param>
            <returns>Task of NodeStatus</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.INodesAdminApi.GetNodeStatusAsyncWithHttpInfo(System.String)">
            <summary>
            Get node status by node ID
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="nodeId">Node ID, or keyword \&quot;local\&quot; for local node</param>
            <returns>Task of ApiResponse (NodeStatus)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.INodesAdminApi.GetNodesStatusAsync">
            <summary>
            Get nodes status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of List&lt;NodeStatus&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.INodesAdminApi.GetNodesStatusAsyncWithHttpInfo">
            <summary>
            Get nodes status
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (List&lt;NodeStatus&gt;)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi.#ctor(Neurotec.Accelerator.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi.SetBasePath(System.String)">
            <summary>
            Sets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <returns>Dictionary of HTTP header</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi.GetNodeStatus(System.String)">
            <summary>
            Get node status by node ID 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="nodeId">Node ID, or keyword \&quot;local\&quot; for local node</param>
            <returns>NodeStatus</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi.GetNodeStatusWithHttpInfo(System.String)">
            <summary>
            Get node status by node ID 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="nodeId">Node ID, or keyword \&quot;local\&quot; for local node</param>
            <returns>ApiResponse of NodeStatus</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi.GetNodeStatusAsync(System.String)">
            <summary>
            Get node status by node ID 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="nodeId">Node ID, or keyword \&quot;local\&quot; for local node</param>
            <returns>Task of NodeStatus</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi.GetNodeStatusAsyncWithHttpInfo(System.String)">
            <summary>
            Get node status by node ID 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="nodeId">Node ID, or keyword \&quot;local\&quot; for local node</param>
            <returns>Task of ApiResponse (NodeStatus)</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi.GetNodesStatus">
            <summary>
            Get nodes status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>List&lt;NodeStatus&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi.GetNodesStatusWithHttpInfo">
            <summary>
            Get nodes status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>ApiResponse of List&lt;NodeStatus&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi.GetNodesStatusAsync">
            <summary>
            Get nodes status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of List&lt;NodeStatus&gt;</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Api.NodesAdminApi.GetNodesStatusAsyncWithHttpInfo">
            <summary>
            Get nodes status 
            </summary>
            <exception cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">Thrown when fails to make API call</exception>
            <returns>Task of ApiResponse (List&lt;NodeStatus&gt;)</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Client.ApiClient">
            <summary>
            API client is mainly responsible for making the HTTP call to the API backend.
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiClient" /> class
            with default configuration.
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.#ctor(Neurotec.Accelerator.Admin.Rest.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiClient" /> class
            with default base path (https://localhost/rs).
            </summary>
            <param name="config">An instance of Configuration.</param>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiClient" /> class
            with default configuration.
            </summary>
            <param name="basePath">The base path.</param>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.Default">
            <summary>
            Gets or sets the default API client for making HTTP calls.
            </summary>
            <value>The default API client.</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.Configuration">
            <summary>
            Gets or sets an instance of the IReadableConfiguration.
            </summary>
            <value>An instance of the IReadableConfiguration.</value>
            <remarks>
            <see cref="T:Neurotec.Accelerator.Admin.Rest.Client.IReadableConfiguration"/> helps us to avoid modifying possibly global
            configuration values from within a given client. It does not guarantee thread-safety
            of the <see cref="P:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.Configuration"/> instance in any way.
            </remarks>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.RestClient">
            <summary>
            Gets or sets the RestClient.
            </summary>
            <value>An instance of the RestClient</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.CallApi(System.String,RestSharp.Method,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,RestSharp.FileParameter},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Makes the HTTP request (Sync).
            </summary>
            <param name="path">URL path.</param>
            <param name="method">HTTP method.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="postBody">HTTP body (POST request).</param>
            <param name="headerParams">Header parameters.</param>
            <param name="formParams">Form parameters.</param>
            <param name="fileParams">File parameters.</param>
            <param name="pathParams">Path parameters.</param>
            <param name="contentType">Content Type of the request</param>
            <returns>Object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.CallApiAsync(System.String,RestSharp.Method,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,RestSharp.FileParameter},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Makes the asynchronous HTTP request.
            </summary>
            <param name="path">URL path.</param>
            <param name="method">HTTP method.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="postBody">HTTP body (POST request).</param>
            <param name="headerParams">Header parameters.</param>
            <param name="formParams">Form parameters.</param>
            <param name="fileParams">File parameters.</param>
            <param name="pathParams">Path parameters.</param>
            <param name="contentType">Content type.</param>
            <returns>The Task instance.</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.EscapeString(System.String)">
            <summary>
            Escape string (url-encoded).
            </summary>
            <param name="str">String to be escaped.</param>
            <returns>Escaped string.</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.ParameterToFile(System.String,System.IO.Stream)">
            <summary>
            Create FileParameter based on Stream.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="stream">Input stream.</param>
            <returns>FileParameter.</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.ParameterToString(System.Object)">
            <summary>
            If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
            If parameter is a list, join the list with ",".
            Otherwise just return the string.
            </summary>
            <param name="obj">The parameter (header, path, query, form).</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.Deserialize(RestSharp.IRestResponse,System.Type)">
            <summary>
            Deserialize the JSON string into a proper object.
            </summary>
            <param name="response">The HTTP response.</param>
            <param name="type">Object type.</param>
            <returns>Object representation of the JSON string.</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.Serialize(System.Object)">
            <summary>
            Serialize an input (model) into JSON string
            </summary>
            <param name="obj">Object.</param>
            <returns>JSON string.</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.IsJsonMime(System.String)">
             <summary>
            Check if the given MIME is a JSON MIME.
            JSON MIME examples:
                application/json
                application/json; charset=UTF8
                APPLICATION/JSON
                application/vnd.company+json
             </summary>
             <param name="mime">MIME</param>
             <returns>Returns True if MIME type is json.</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.SelectHeaderContentType(System.String[])">
            <summary>
            Select the Content-Type header's value from the given content-type array:
            if JSON type exists in the given array, use it;
            otherwise use the first one defined in 'consumes'
            </summary>
            <param name="contentTypes">The Content-Type array to select from.</param>
            <returns>The Content-Type header to use.</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.SelectHeaderAccept(System.String[])">
            <summary>
            Select the Accept header's value from the given accepts array:
            if JSON exists in the given array, use it;
            otherwise use all of them (joining into a string)
            </summary>
            <param name="accepts">The accepts array to select from.</param>
            <returns>The Accept header to use.</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.Base64Encode(System.String)">
            <summary>
            Encode string in base64 format.
            </summary>
            <param name="text">String to be encoded.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.ConvertType(System.Object,System.Type)">
            <summary>
            Dynamically cast the object into target type.
            </summary>
            <param name="fromObject">Object to be casted</param>
            <param name="toObject">Target type</param>
            <returns>Casted object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.ReadAsBytes(System.IO.Stream)">
            <summary>
            Convert stream to byte array
            </summary>
            <param name="inputStream">Input stream to be converted</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.UrlEncode(System.String)">
            <summary>
            URL encode a string
            Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
            </summary>
            <param name="input">String to be URL encoded</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.SanitizeFilename(System.String)">
            <summary>
            Sanitize filename by removing the path
            </summary>
            <param name="filename">Filename</param>
            <returns>Filename</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.ParameterToKeyValuePairs(System.String,System.String,System.Object)">
            <summary>
            Convert params to key/value pairs. 
            Use collectionFormat to properly format lists and collections.
            </summary>
            <param name="name">Key name.</param>
            <param name="value">Value object.</param>
            <returns>A list of KeyValuePairs</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiClient.IsCollection(System.Object)">
            <summary>
            Check if generic object is a collection.
            </summary>
            <param name="value"></param>
            <returns>True if object is a collection type</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException">
            <summary>
            API Exception
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.ApiException.ErrorCode">
            <summary>
            Gets or sets the error code (HTTP status code)
            </summary>
            <value>The error code (HTTP status code).</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.ApiException.ErrorContent">
            <summary>
            Gets or sets the error content (body json object)
            </summary>
            <value>The error content (Http response body).</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException"/> class.
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException"/> class.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiException.#ctor(System.Int32,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiException"/> class.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
            <param name="errorContent">Error content.</param>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Client.ApiResponse`1">
            <summary>
            API Response
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.ApiResponse`1.StatusCode">
            <summary>
            Gets or sets the status code (HTTP status code)
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.ApiResponse`1.Headers">
            <summary>
            Gets or sets the HTTP headers
            </summary>
            <value>HTTP headers</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.ApiResponse`1.Data">
            <summary>
            Gets or sets the data (parsed HTTP body)
            </summary>
            <value>The data.</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.ApiResponse`1.#ctor(System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Client.ApiResponse`1" /> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="headers">HTTP headers.</param>
            <param name="data">Data (parsed HTTP body)</param>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Client.Configuration">
            <summary>
            Represents a set of configuration settings
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Client.Configuration.Version">
            <summary>
            Version of the package.
            </summary>
            <value>Version of the package.</value>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Client.Configuration.ISO8601_DATETIME_FORMAT">
            <summary>
            Identifier for ISO 8601 DateTime Format
            </summary>
            <remarks>See https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8 for more information.</remarks>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Client.Configuration.DefaultExceptionFactory">
            <summary>
            Default creation of exceptions for a given method name and response object
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.Configuration.Default">
            <summary>
            Gets or sets the default Configuration.
            </summary>
            <value>Configuration.</value>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Client.Configuration._apiKey">
            <summary>
            Gets or sets the API key based on the authentication name.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Client.Configuration._apiKeyPrefix">
            <summary>
            Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
            </summary>
            <value>The prefix of the API key.</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.Configuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Client.Configuration" /> class
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.Configuration.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Client.Configuration" /> class
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.Configuration.#ctor(Neurotec.Accelerator.Admin.Rest.Client.ApiClient,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Client.Configuration" /> class with different settings
            </summary>
            <param name="apiClient">Api client</param>
            <param name="defaultHeader">Dictionary of default HTTP header</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="accessToken">accessToken</param>
            <param name="apiKey">Dictionary of API key</param>
            <param name="apiKeyPrefix">Dictionary of API key prefix</param>
            <param name="tempFolderPath">Temp folder path</param>
            <param name="dateTimeFormat">DateTime format string</param>
            <param name="timeout">HTTP connection timeout (in milliseconds)</param>
            <param name="userAgent">HTTP user agent</param>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.Configuration.#ctor(Neurotec.Accelerator.Admin.Rest.Client.ApiClient)">
            <summary>
            Initializes a new instance of the Configuration class.
            </summary>
            <param name="apiClient">Api client.</param>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.Configuration.ApiClient">
            <summary>
            Gets an instance of an ApiClient for this configuration
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.Configuration.BasePath">
            <summary>
            Gets or sets the base path for API access.
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.Configuration.DefaultHeader">
            <summary>
            Gets or sets the default header.
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.Configuration.Timeout">
            <summary>
            Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.Configuration.UserAgent">
            <summary>
            Gets or sets the HTTP user agent.
            </summary>
            <value>Http user agent.</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.Configuration.Username">
            <summary>
            Gets or sets the username (HTTP basic authentication).
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.Configuration.Password">
            <summary>
            Gets or sets the password (HTTP basic authentication).
            </summary>
            <value>The password.</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.Configuration.GetApiKeyWithPrefix(System.String)">
            <summary>
            Gets the API key with prefix.
            </summary>
            <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
            <returns>API key with prefix.</returns>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.Configuration.AccessToken">
            <summary>
            Gets or sets the access token for OAuth2 authentication.
            </summary>
            <value>The access token.</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.Configuration.TempFolderPath">
            <summary>
            Gets or sets the temporary folder path to store the files downloaded from the server.
            </summary>
            <value>Folder path.</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.Configuration.DateTimeFormat">
            <summary>
            Gets or sets the the date time format used when serializing in the ApiClient
            By default, it's set to ISO 8601 - "o", for others see:
            https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
            and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
            No validation is done to ensure that the string you're providing is valid
            </summary>
            <value>The DateTimeFormat string</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.Configuration.ApiKeyPrefix">
            <summary>
            Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
            </summary>
            <value>The prefix of the API key.</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.Configuration.ApiKey">
            <summary>
            Gets or sets the API key based on the authentication name.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.Configuration.AddDefaultHeader(System.String,System.String)">
            <summary>
            Add default header.
            </summary>
            <param name="key">Header field name.</param>
            <param name="value">Header field value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.Configuration.CreateApiClient">
            <summary>
            Creates a new <see cref="P:Neurotec.Accelerator.Admin.Rest.Client.Configuration.ApiClient" /> based on this <see cref="T:Neurotec.Accelerator.Admin.Rest.Client.Configuration" /> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.Configuration.ToDebugReport">
            <summary>
            Returns a string with essential information for debugging.
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.Configuration.AddApiKey(System.String,System.String)">
            <summary>
            Add Api Key Header.
            </summary>
            <param name="key">Api Key name.</param>
            <param name="value">Api Key value.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.Configuration.AddApiKeyPrefix(System.String,System.String)">
            <summary>
            Sets the API key prefix.
            </summary>
            <param name="key">Api Key name.</param>
            <param name="value">Api Key value.</param>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Client.ExceptionFactory">
            <summary>
            A delegate to ExceptionFactory method
            </summary>
            <param name="methodName">Method name</param>
            <param name="response">Response</param>
            <returns>Exceptions</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Client.GlobalConfiguration">
            <summary>
            <see cref="T:Neurotec.Accelerator.Admin.Rest.Client.GlobalConfiguration"/> provides a compile-time extension point for globally configuring
            API Clients.
            </summary>
            <remarks>
            A customized implementation via partial class may reside in another file and may
            be excluded from automatic generation via a .swagger-codegen-ignore file.
            </remarks>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Client.IApiAccessor">
            <summary>
            Represents configuration aspects required to interact with the API endpoints.
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.IApiAccessor.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.IApiAccessor.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.IApiAccessor.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Client.IReadableConfiguration">
            <summary>
            Represents a readable-only configuration contract.
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.IReadableConfiguration.AccessToken">
            <summary>
            Gets the access token.
            </summary>
            <value>Access token.</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.IReadableConfiguration.ApiKey">
            <summary>
            Gets the API key.
            </summary>
            <value>API key.</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.IReadableConfiguration.ApiKeyPrefix">
            <summary>
            Gets the API key prefix.
            </summary>
            <value>API key prefix.</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.IReadableConfiguration.BasePath">
            <summary>
            Gets the base path.
            </summary>
            <value>Base path.</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.IReadableConfiguration.DateTimeFormat">
            <summary>
            Gets the date time format.
            </summary>
            <value>Date time foramt.</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.IReadableConfiguration.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <value>Default header.</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.IReadableConfiguration.TempFolderPath">
            <summary>
            Gets the temp folder path.
            </summary>
            <value>Temp folder path.</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.IReadableConfiguration.Timeout">
            <summary>
            Gets the HTTP connection timeout (in milliseconds)
            </summary>
            <value>HTTP connection timeout.</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.IReadableConfiguration.UserAgent">
            <summary>
            Gets the user agent.
            </summary>
            <value>User agent.</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.IReadableConfiguration.Username">
            <summary>
            Gets the username.
            </summary>
            <value>Username.</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Client.IReadableConfiguration.Password">
            <summary>
            Gets the password.
            </summary>
            <value>Password.</value>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.IReadableConfiguration.GetApiKeyWithPrefix(System.String)">
            <summary>
            Gets the API key with prefix.
            </summary>
            <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
            <returns>API key with prefix.</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Client.SwaggerDateConverter">
            <summary>
            Formatter for 'date' swagger formats ss defined by full-date - RFC3339
            see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Client.SwaggerDateConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Client.SwaggerDateConverter" /> class.
            </summary>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute">
            <summary>
            BiographicAttribute
            </summary>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute.TypeEnum">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute.TypeEnum.INT">
            <summary>
            Enum INT for "INT"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute.TypeEnum.STRING">
            <summary>
            Enum STRING for "STRING"
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute.#ctor(System.String,System.Nullable{Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute.TypeEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute" /> class.
            </summary>
            <param name="Name">Name.</param>
            <param name="Type">Type.</param>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute.Equals(Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute)">
            <summary>
            Returns true if BiographicAttribute instances are equal
            </summary>
            <param name="input">Instance of BiographicAttribute to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.BiographicAttribute.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.CapacityInfo">
            <summary>
            CapacityInfo
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.CapacityInfo.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Model.CapacityInfo" /> class.
            </summary>
            <param name="AcceleratedFingersCount">AcceleratedFingersCount.</param>
            <param name="AcceleratedFingersLimit">AcceleratedFingersLimit.</param>
            <param name="AcceleratedIrisesCount">AcceleratedIrisesCount.</param>
            <param name="AcceleratedIrisesLimit">AcceleratedIrisesLimit.</param>
            <param name="AcceleratedFacesCount">AcceleratedFacesCount.</param>
            <param name="AcceleratedFacesLimit">AcceleratedFacesLimit.</param>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.CapacityInfo.AcceleratedFingersCount">
            <summary>
            Gets or Sets AcceleratedFingersCount
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.CapacityInfo.AcceleratedFingersLimit">
            <summary>
            Gets or Sets AcceleratedFingersLimit
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.CapacityInfo.AcceleratedIrisesCount">
            <summary>
            Gets or Sets AcceleratedIrisesCount
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.CapacityInfo.AcceleratedIrisesLimit">
            <summary>
            Gets or Sets AcceleratedIrisesLimit
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.CapacityInfo.AcceleratedFacesCount">
            <summary>
            Gets or Sets AcceleratedFacesCount
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.CapacityInfo.AcceleratedFacesLimit">
            <summary>
            Gets or Sets AcceleratedFacesLimit
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.CapacityInfo.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.CapacityInfo.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.CapacityInfo.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.CapacityInfo.Equals(Neurotec.Accelerator.Admin.Rest.Model.CapacityInfo)">
            <summary>
            Returns true if CapacityInfo instances are equal
            </summary>
            <param name="input">Instance of CapacityInfo to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.CapacityInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.CapacityInfo.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration">
            <summary>
            ClusterConfiguration
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration" /> class.
            </summary>
            <param name="ClusterToStart">ClusterToStart.</param>
            <param name="ClusterToStop">ClusterToStop.</param>
            <param name="MaxTaskCount">MaxTaskCount.</param>
            <param name="EngineConfiguration">EngineConfiguration.</param>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration.ClusterToStart">
            <summary>
            Gets or Sets ClusterToStart
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration.ClusterToStop">
            <summary>
            Gets or Sets ClusterToStop
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration.MaxTaskCount">
            <summary>
            Gets or Sets MaxTaskCount
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration.EngineConfiguration">
            <summary>
            Gets or Sets EngineConfiguration
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration.Equals(Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration)">
            <summary>
            Returns true if ClusterConfiguration instances are equal
            </summary>
            <param name="input">Instance of ClusterConfiguration to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.ClusterConfiguration.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.ClusterStatus">
            <summary>
            ClusterStatus
            </summary>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.ClusterStatus.StageEnum">
            <summary>
            Gets or Sets Stage
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.ClusterStatus.StageEnum.WAITINGNODES">
            <summary>
            Enum WAITINGNODES for "WAITING_NODES"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.ClusterStatus.StageEnum.LOADING">
            <summary>
            Enum LOADING for "LOADING"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.ClusterStatus.StageEnum.READY">
            <summary>
            Enum READY for "READY"
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.ClusterStatus.Stage">
            <summary>
            Gets or Sets Stage
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.ClusterStatus.#ctor(System.Nullable{Neurotec.Accelerator.Admin.Rest.Model.ClusterStatus.StageEnum},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Model.ClusterStatus" /> class.
            </summary>
            <param name="Stage">Stage.</param>
            <param name="TotalPartitionsCount">TotalPartitionsCount.</param>
            <param name="LoadedPartitionsCount">LoadedPartitionsCount.</param>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.ClusterStatus.TotalPartitionsCount">
            <summary>
            Gets or Sets TotalPartitionsCount
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.ClusterStatus.LoadedPartitionsCount">
            <summary>
            Gets or Sets LoadedPartitionsCount
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.ClusterStatus.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.ClusterStatus.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.ClusterStatus.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.ClusterStatus.Equals(Neurotec.Accelerator.Admin.Rest.Model.ClusterStatus)">
            <summary>
            Returns true if ClusterStatus instances are equal
            </summary>
            <param name="input">Instance of ClusterStatus to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.ClusterStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.ClusterStatus.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration">
            <summary>
            EngineConfiguration
            </summary>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum">
            <summary>
            Gets or Sets AcceleratedModalities
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.FACE">
            <summary>
            Enum FACE for "FACE"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.FINGER">
            <summary>
            Enum FINGER for "FINGER"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum.IRIS">
            <summary>
            Enum IRIS for "IRIS"
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.AcceleratedModalities">
            <summary>
            Gets or Sets AcceleratedModalities
            </summary>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.FacesAcceleratedTemplateSizeEnum">
            <summary>
            Gets or Sets FacesAcceleratedTemplateSize
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.FacesAcceleratedTemplateSizeEnum.SMALL">
            <summary>
            Enum SMALL for "SMALL"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.FacesAcceleratedTemplateSizeEnum.MEDIUM">
            <summary>
            Enum MEDIUM for "MEDIUM"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.FacesAcceleratedTemplateSizeEnum.LARGE">
            <summary>
            Enum LARGE for "LARGE"
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.FacesAcceleratedTemplateSize">
            <summary>
            Gets or Sets FacesAcceleratedTemplateSize
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.#ctor(System.Collections.Generic.List{Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.AcceleratedModalitiesEnum},System.Nullable{System.Single},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Single},System.Nullable{Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.FacesAcceleratedTemplateSizeEnum},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration" /> class.
            </summary>
            <param name="AcceleratedModalities">AcceleratedModalities.</param>
            <param name="FingersMaximalRotation">FingersMaximalRotation.</param>
            <param name="FingersTurboUseAdaptiveSpeed">FingersTurboUseAdaptiveSpeed.</param>
            <param name="FingersTurboSpeedLevel">FingersTurboSpeedLevel.</param>
            <param name="IrisesMaximalRotation">IrisesMaximalRotation.</param>
            <param name="FacesAcceleratedTemplateSize">FacesAcceleratedTemplateSize.</param>
            <param name="P1">P1.</param>
            <param name="P2">P2.</param>
            <param name="P3">P3.</param>
            <param name="P4">P4.</param>
            <param name="P5">P5.</param>
            <param name="P6">P6.</param>
            <param name="P7">P7.</param>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.FingersMaximalRotation">
            <summary>
            Gets or Sets FingersMaximalRotation
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.FingersTurboUseAdaptiveSpeed">
            <summary>
            Gets or Sets FingersTurboUseAdaptiveSpeed
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.FingersTurboSpeedLevel">
            <summary>
            Gets or Sets FingersTurboSpeedLevel
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.IrisesMaximalRotation">
            <summary>
            Gets or Sets IrisesMaximalRotation
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.P1">
            <summary>
            Gets or Sets P1
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.P2">
            <summary>
            Gets or Sets P2
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.P3">
            <summary>
            Gets or Sets P3
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.P4">
            <summary>
            Gets or Sets P4
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.P5">
            <summary>
            Gets or Sets P5
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.P6">
            <summary>
            Gets or Sets P6
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.P7">
            <summary>
            Gets or Sets P7
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.Equals(Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration)">
            <summary>
            Returns true if EngineConfiguration instances are equal
            </summary>
            <param name="input">Instance of EngineConfiguration to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.EngineConfiguration.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus">
            <summary>
            FederationConnectionStatus
            </summary>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.DirectionEnum">
            <summary>
            Gets or Sets Direction
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.DirectionEnum.OUTGOING">
            <summary>
            Enum OUTGOING for "OUTGOING"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.DirectionEnum.INCOMING">
            <summary>
            Enum INCOMING for "INCOMING"
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.Direction">
            <summary>
            Gets or Sets Direction
            </summary>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.StageEnum">
            <summary>
            Gets or Sets Stage
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.StageEnum.RETRYING">
            <summary>
            Enum RETRYING for "RETRYING"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.StageEnum.INITED">
            <summary>
            Enum INITED for "INITED"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.StageEnum.RUNNING">
            <summary>
            Enum RUNNING for "RUNNING"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.StageEnum.FINISHED">
            <summary>
            Enum FINISHED for "FINISHED"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.StageEnum.BELOWRETENTIONPOINT">
            <summary>
            Enum BELOWRETENTIONPOINT for "BELOW_RETENTION_POINT"
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.Stage">
            <summary>
            Gets or Sets Stage
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.#ctor(System.Nullable{Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.DirectionEnum},System.String,System.Nullable{Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.StageEnum},System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus" /> class.
            </summary>
            <param name="Direction">Direction.</param>
            <param name="ClusterId">ClusterId.</param>
            <param name="Stage">Stage.</param>
            <param name="Addresses">Addresses.</param>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.ClusterId">
            <summary>
            Gets or Sets ClusterId
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.Addresses">
            <summary>
            Gets or Sets Addresses
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.Equals(Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus)">
            <summary>
            Returns true if FederationConnectionStatus instances are equal
            </summary>
            <param name="input">Instance of FederationConnectionStatus to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.FederationConnectionStatus.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.FileWrapper">
            <summary>
            FileWrapper
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.FileWrapper.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Model.FileWrapper" /> class.
            </summary>
            <param name="Name">Name.</param>
            <param name="Content">base64 encoded bytes.</param>
            <param name="ContentType">ContentType.</param>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.FileWrapper.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.FileWrapper.Content">
            <summary>
            base64 encoded bytes
            </summary>
            <value>base64 encoded bytes</value>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.FileWrapper.ContentType">
            <summary>
            Gets or Sets ContentType
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.FileWrapper.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.FileWrapper.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.FileWrapper.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.FileWrapper.Equals(Neurotec.Accelerator.Admin.Rest.Model.FileWrapper)">
            <summary>
            Returns true if FileWrapper instances are equal
            </summary>
            <param name="input">Instance of FileWrapper to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.FileWrapper.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.FileWrapper.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.HostAndPort">
            <summary>
            HostAndPort
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.HostAndPort.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Model.HostAndPort" /> class.
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.HostAndPort.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Model.HostAndPort" /> class.
            </summary>
            <param name="Host">Host (required).</param>
            <param name="Port">Port.</param>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.HostAndPort.Host">
            <summary>
            Gets or Sets Host
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.HostAndPort.Port">
            <summary>
            Gets or Sets Port
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.HostAndPort.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.HostAndPort.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.HostAndPort.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.HostAndPort.Equals(Neurotec.Accelerator.Admin.Rest.Model.HostAndPort)">
            <summary>
            Returns true if HostAndPort instances are equal
            </summary>
            <param name="input">Instance of HostAndPort to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.HostAndPort.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.HostAndPort.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus">
            <summary>
            LicensingStatus
            </summary>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FacesEnum">
            <summary>
            Gets or Sets Faces
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FacesEnum.NONE">
            <summary>
            Enum NONE for "NONE"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FacesEnum.DEVELOPMENT">
            <summary>
            Enum DEVELOPMENT for "DEVELOPMENT"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FacesEnum.STANDARD">
            <summary>
            Enum STANDARD for "STANDARD"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FacesEnum.EXTENDED">
            <summary>
            Enum EXTENDED for "EXTENDED"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FacesEnum.TRIAL">
            <summary>
            Enum TRIAL for "TRIAL"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FacesEnum.EXTREME">
            <summary>
            Enum EXTREME for "EXTREME"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FacesEnum.ABIS50">
            <summary>
            Enum ABIS50 for "ABIS_50"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FacesEnum.ABISUNLIMITED">
            <summary>
            Enum ABISUNLIMITED for "ABIS_UNLIMITED"
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.Faces">
            <summary>
            Gets or Sets Faces
            </summary>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FingersEnum">
            <summary>
            Gets or Sets Fingers
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FingersEnum.NONE">
            <summary>
            Enum NONE for "NONE"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FingersEnum.DEVELOPMENT">
            <summary>
            Enum DEVELOPMENT for "DEVELOPMENT"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FingersEnum.STANDARD">
            <summary>
            Enum STANDARD for "STANDARD"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FingersEnum.EXTENDED">
            <summary>
            Enum EXTENDED for "EXTENDED"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FingersEnum.TRIAL">
            <summary>
            Enum TRIAL for "TRIAL"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FingersEnum.EXTREME">
            <summary>
            Enum EXTREME for "EXTREME"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FingersEnum.ABIS50">
            <summary>
            Enum ABIS50 for "ABIS_50"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FingersEnum.ABISUNLIMITED">
            <summary>
            Enum ABISUNLIMITED for "ABIS_UNLIMITED"
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.Fingers">
            <summary>
            Gets or Sets Fingers
            </summary>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.IrisesEnum">
            <summary>
            Gets or Sets Irises
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.IrisesEnum.NONE">
            <summary>
            Enum NONE for "NONE"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.IrisesEnum.DEVELOPMENT">
            <summary>
            Enum DEVELOPMENT for "DEVELOPMENT"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.IrisesEnum.STANDARD">
            <summary>
            Enum STANDARD for "STANDARD"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.IrisesEnum.EXTENDED">
            <summary>
            Enum EXTENDED for "EXTENDED"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.IrisesEnum.TRIAL">
            <summary>
            Enum TRIAL for "TRIAL"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.IrisesEnum.EXTREME">
            <summary>
            Enum EXTREME for "EXTREME"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.IrisesEnum.ABIS50">
            <summary>
            Enum ABIS50 for "ABIS_50"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.IrisesEnum.ABISUNLIMITED">
            <summary>
            Enum ABISUNLIMITED for "ABIS_UNLIMITED"
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.Irises">
            <summary>
            Gets or Sets Irises
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.#ctor(System.Nullable{Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FacesEnum},System.Nullable{Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.FingersEnum},System.Nullable{Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.IrisesEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus" /> class.
            </summary>
            <param name="Faces">Faces.</param>
            <param name="Fingers">Fingers.</param>
            <param name="Irises">Irises.</param>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.Equals(Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus)">
            <summary>
            Returns true if LicensingStatus instances are equal
            </summary>
            <param name="input">Instance of LicensingStatus to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.LicensingStatus.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.LogEntry">
            <summary>
            LogEntry
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.LogEntry.#ctor(System.Nullable{System.DateTime},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Model.LogEntry" /> class.
            </summary>
            <param name="Timestamp">Timestamp.</param>
            <param name="Message">Message.</param>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.LogEntry.Timestamp">
            <summary>
            Gets or Sets Timestamp
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.LogEntry.Message">
            <summary>
            Gets or Sets Message
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.LogEntry.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.LogEntry.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.LogEntry.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.LogEntry.Equals(Neurotec.Accelerator.Admin.Rest.Model.LogEntry)">
            <summary>
            Returns true if LogEntry instances are equal
            </summary>
            <param name="input">Instance of LogEntry to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.LogEntry.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.LogEntry.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus">
            <summary>
            NodeStatus
            </summary>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.StageEnum">
            <summary>
            Gets or Sets Stage
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.StageEnum.UNKNOWN">
            <summary>
            Enum UNKNOWN for "UNKNOWN"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.StageEnum.WAITINGNODES">
            <summary>
            Enum WAITINGNODES for "WAITING_NODES"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.StageEnum.LOADING">
            <summary>
            Enum LOADING for "LOADING"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.StageEnum.RUNNING">
            <summary>
            Enum RUNNING for "RUNNING"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.StageEnum.WAITINGSHUTDOWN">
            <summary>
            Enum WAITINGSHUTDOWN for "WAITING_SHUTDOWN"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.StageEnum.REJECTED">
            <summary>
            Enum REJECTED for "REJECTED"
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.Stage">
            <summary>
            Gets or Sets Stage
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.#ctor(System.Nullable{System.Int64},System.String,System.String,System.Nullable{Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.StageEnum},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="IpAddress">IpAddress.</param>
            <param name="ClusterId">ClusterId.</param>
            <param name="Stage">Stage.</param>
            <param name="DatabaseResponsiblePartitionsCount">DatabaseResponsiblePartitionsCount.</param>
            <param name="DatabaseLoadedPartitionsCount">DatabaseLoadedPartitionsCount.</param>
            <param name="EngineResponsiblePartitionsCount">EngineResponsiblePartitionsCount.</param>
            <param name="EngineLoadedPartitionsCount">EngineLoadedPartitionsCount.</param>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.IpAddress">
            <summary>
            Gets or Sets IpAddress
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.ClusterId">
            <summary>
            Gets or Sets ClusterId
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.DatabaseResponsiblePartitionsCount">
            <summary>
            Gets or Sets DatabaseResponsiblePartitionsCount
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.DatabaseLoadedPartitionsCount">
            <summary>
            Gets or Sets DatabaseLoadedPartitionsCount
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.EngineResponsiblePartitionsCount">
            <summary>
            Gets or Sets EngineResponsiblePartitionsCount
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.EngineLoadedPartitionsCount">
            <summary>
            Gets or Sets EngineLoadedPartitionsCount
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.Equals(Neurotec.Accelerator.Admin.Rest.Model.NodeStatus)">
            <summary>
            Returns true if NodeStatus instances are equal
            </summary>
            <param name="input">Instance of NodeStatus to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.NodeStatus.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.Password.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Model.Password" /> class.
            </summary>
            <param name="_Password">_Password.</param>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.Password._Password">
            <summary>
            Gets or Sets _Password
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.Password.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.Password.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.Password.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.Password.Equals(Neurotec.Accelerator.Admin.Rest.Model.Password)">
            <summary>
            Returns true if Password instances are equal
            </summary>
            <param name="input">Instance of Password to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.Password.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.Password.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.Task">
            <summary>
            Task
            </summary>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.Task.StatusEnum">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.Task.StatusEnum.SUBMITTED">
            <summary>
            Enum SUBMITTED for "SUBMITTED"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.Task.StatusEnum.RUNNING">
            <summary>
            Enum RUNNING for "RUNNING"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.Task.StatusEnum.FINISHED">
            <summary>
            Enum FINISHED for "FINISHED"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.Task.StatusEnum.CANCELED">
            <summary>
            Enum CANCELED for "CANCELED"
            </summary>
        </member>
        <member name="F:Neurotec.Accelerator.Admin.Rest.Model.Task.StatusEnum.ERROR">
            <summary>
            Enum ERROR for "ERROR"
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.Task.Status">
            <summary>
            Gets or Sets Status
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.Task.#ctor(System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime},System.Nullable{Neurotec.Accelerator.Admin.Rest.Model.Task.StatusEnum},System.Nullable{System.DateTime},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Model.Task" /> class.
            </summary>
            <param name="Id">Id.</param>
            <param name="Title">Title.</param>
            <param name="CreatedAt">CreatedAt.</param>
            <param name="Status">Status.</param>
            <param name="EndedAt">EndedAt.</param>
            <param name="ErrorMessage">ErrorMessage.</param>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.Task.Id">
            <summary>
            Gets or Sets Id
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.Task.Title">
            <summary>
            Gets or Sets Title
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.Task.CreatedAt">
            <summary>
            Gets or Sets CreatedAt
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.Task.EndedAt">
            <summary>
            Gets or Sets EndedAt
            </summary>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.Task.ErrorMessage">
            <summary>
            Gets or Sets ErrorMessage
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.Task.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.Task.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.Task.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.Task.Equals(Neurotec.Accelerator.Admin.Rest.Model.Task)">
            <summary>
            Returns true if Task instances are equal
            </summary>
            <param name="input">Instance of Task to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.Task.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.Task.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:Neurotec.Accelerator.Admin.Rest.Model.TemplateCount">
            <summary>
            TemplateCount
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.TemplateCount.#ctor(System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Neurotec.Accelerator.Admin.Rest.Model.TemplateCount" /> class.
            </summary>
            <param name="Count">Count.</param>
        </member>
        <member name="P:Neurotec.Accelerator.Admin.Rest.Model.TemplateCount.Count">
            <summary>
            Gets or Sets Count
            </summary>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.TemplateCount.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.TemplateCount.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.TemplateCount.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.TemplateCount.Equals(Neurotec.Accelerator.Admin.Rest.Model.TemplateCount)">
            <summary>
            Returns true if TemplateCount instances are equal
            </summary>
            <param name="input">Instance of TemplateCount to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.TemplateCount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Neurotec.Accelerator.Admin.Rest.Model.TemplateCount.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
    </members>
</doc>
