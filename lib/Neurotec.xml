<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neurotec</name>
    </assembly>
    <members>
        <member name="T:Neurotec.Collections.Generic.NKeyNotFoundException">
            <summary>
            This error occurs when when the key specified for accessing an element in a collection does not match any key in the collection.
            </summary>
        </member>
        <member name="P:Neurotec.Collections.Generic.NKeyNotFoundException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.ArrayCollection">
            <summary>
            Collection of Arrays.
            </summary>             
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.ArrayReadOnlyCollection">
            <summary>
            Readonly collection of Arrays. 
            </summary>                       
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.ArrayReadOnlyCollection.#ctor(Neurotec.NObject)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Object responsible for the collection.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.ArrayReadOnlyCollection.GetInternal(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.DisposableStructCollection`2">
            <summary>
            Collection of structures containing strings.
            </summary>                                  
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.DisposableStructReadOnlyCollection`2">
            <summary>
            Readonly collection of structures containing strings.
            </summary>                                           
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2">
            <summary>
            Collection of arrays (two dimensional collection).
            </summary>                                        
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2.IndexOf(`0[])">
            <summary>
            Method not supported by this class.
            </summary>
            <exception cref="T:System.NotSupportedException">The method is not supported.</exception>
            
            <returns>
            \Returns the index of the item.
            </returns>                                                                      
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2.GetCount(System.Int32)">
            <summary>
            Gets the number of items in particular array of the collection.
            </summary>
            <param name="baseIndex">Index of the array.</param>
            <returns>
            Number of items in subcollection (array indexed with baseIndex).
            </returns>                              
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2.GetCapacity(System.Int32)">
            <summary>
            Sets capacity of the collection with base index specified.
            </summary>
            <param name="baseIndex">The base index.</param>
            <returns>Collection capacity.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2.SetCapacity(System.Int32,System.Int32)">
            <summary>
            Sets capacity of the collection with base index specified.
            </summary>
            <param name="baseIndex">The base index.</param>
            <param name="value">New capacity value.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2.Get(System.Int32,System.Int32)">
            <summary>
            Gets the item from a subcollection.
            </summary>
            <param name="baseIndex">The index of the array.</param>
            <param name="index">The index inside the array.</param>
            <returns>
            Item of the collection at specified location.
            </returns>                              
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2.CopyTo(System.Int32,System.Array,System.Int32)">
            <summary>
            Copies the current collection to an array at specified index.
            </summary>
            <param name="baseIndex">The base index.</param>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">Index in the array.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2.CopyTo(System.Int32,`0[],System.Int32)">
            <summary>
            Copies the items of the subcollection to an Array, starting at a
            particular index.
            </summary>
            <param name="baseIndex">The index of the subcollection (array in the collection).</param>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index of destination array.</param>
            All the elements from the baseIndex'th subcollection will be copied to the destination array starting with arrayIndex'th location.
            <exception cref="T:System.ArgumentNullException">The array argument
                                                    is null</exception>
            <exception cref="T:System.ArgumentException">The array is to
                                                small for given
                                                index and the
                                                collection size</exception>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2.IndexOf(System.Int32,`0)">
            <summary>
            Gets the index of the item (in the subcollection).
            </summary>
            <param name="baseIndex">The index of the subcollection (array in the collection).</param>
            <param name="value">The item to be searched in the subcollection</param>
            <returns>
            Integer index of the item. The index value of -1 means that
            item was not found in the collection.
            </returns>                              
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2.Contains(System.Int32,`0)">
            <summary>
            Checks if the subcollection contains specific item.
            </summary>
            <param name="baseIndex">The index of the subcollection (array in the collection).</param>
            <param name="value">The item to be searched in the subcollection</param>
            <returns>
            True if the item exists in the subcollection. 
            </returns>                              
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2.Set(System.Int32,System.Int32,`0)">
            <summary>
            Set the item of a subcollection.
            </summary>
            <param name="baseIndex">The index of the subcollection (array in the collection).</param>
            <param name="index">The index inside the subcollection.</param>
            <param name="value">The value to be assigned.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2.Add(System.Int32,`0)">
            <summary>
            Adds item to the subcollection.
            </summary>
            <param name="baseIndex">Index of the subcollection (array in the collection) to which the item
                                    should be added.</param>
            <param name="value">Item to be added.</param>
            <returns>
            Implementation defined index of the added item.
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2.Insert(System.Int32,System.Int32,`0)">
            <summary>
            Adds an item to the subcollection.
            </summary>
            <param name="baseIndex">The index of the subcollection (array in the collection).</param>
            <param name="index">The index inside the subcollection.</param>
            <param name="value">The value to be added.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2.Remove(System.Int32,`0)">
            <summary>
            Remove the item from the subcollection.
            </summary>
            <param name="baseIndex">The index of the subcollection (array in the collection).</param>
            <param name="value">The value to be removed.</param>
            <returns>
            Returns index of the removed item.
            </returns>                              
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2.RemoveAt(System.Int32,System.Int32)">
            <summary>
            Removes the item at certain index of the subcollection.
            </summary>
            <param name="baseIndex">The index of the subcollection (array in the collection).</param>
            <param name="index">The index inside the subcollection.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2.RemoveRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes one or more items of the subcollection starting at certain index.
            </summary>
            <param name="baseIndex">The index of the subcollection (array in the collection).</param>
            <param name="index">The index of the first item inside the subcollection.</param>
            <param name="count">The number of the items to be removed.</param>    
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2.Clear(System.Int32)">
            <summary>
            Empties the subcollection.
            </summary>
            <param name="baseIndex">The index of the subcollection (array in the collection).</param>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NArrayCollectionBase`2.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element specified by index.
            </summary>
            <param name="baseIndex">The base index.</param>
            <param name="index">Index of the item.</param>
            <returns>The element specified.</returns>
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.NArrayCollection">
            <summary>
            Provides functionality for working with collections of arrays.
            </summary>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NArrayCollection.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.GetCount(System.Int32)">
            <summary>
            Gets the number of items in the array.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
            <returns>The number of items in the array.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.IndexOf(System.Int32,System.Object)">
            <summary>
            Retrieves the index of the specified item in the array.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
            <param name="item">Item to retrieve index of.</param>
            <returns>Index of the item.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.Insert(System.Int32,System.Int32,System.Object)">
            <summary>
            Inserts a value in the array.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
            <param name="index">Index of value.</param>
            <param name="item">Value to insert.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.InsertRange(System.Int32,System.Int32,System.Object[])">
            <summary>
            Inserts an array of values in the array.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
            <param name="index">Index of the first value.</param>
            <param name="items">Array of values to insert.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.InsertRange(System.Int32,System.Int32,System.Array)">
            <summary>
            Inserts an array of values in the array.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
            <param name="index">Index of the first value.</param>
            <param name="items">Array of values to insert.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.RemoveAt(System.Int32,System.Int32)">
            <summary>
            Removes the specified value from the array.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
            <param name="index">Index of the value to remove.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.RemoveRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes a range of values from the array.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
            <param name="startIndex">Index of the first value to remove.</param>
            <param name="count">Number of values to remove.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.Add(System.Int32,System.Object)">
            <summary>
            Adds an item to the array.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
            <param name="item">The item to add.</param>
            <returns>Index of the item.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.AddRange(System.Int32,System.Object[])">
            <summary>
            Adds an array of item to the array.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
            <param name="items">Array of item to add.</param>
            <returns>Index of the last added item.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.AddRange(System.Int32,System.Array)">
            <summary>
            Adds an array of item to the array.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
            <param name="items">Array of item to add.</param>
            <returns>Index of the last added item.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.Clear(System.Int32)">
            <summary>
            Clears the specified array.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.Contains(System.Int32,System.Object)">
            <summary>
            Checks whether the array contains the specified item.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
            <param name="item">The item to find.</param>
            <returns>true if the array contains the item, else false.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.CopyTo(System.Int32,System.Object[],System.Int32)">
            <summary>
            Copies the array into an independent array.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">Index in the destination array at which to insert.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.CopyTo(System.Int32,System.Array,System.Int32)">
            <summary>
            Copies the array into an independent array.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
            <param name="array">The destination array.</param>
            <param name="index">Index in the destination array at which to insert.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.Remove(System.Int32,System.Object)">
            <summary>
            Removes the specified item from the array.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
            <param name="item">The item to remove.</param>
            <returns>Index freed by the removed item.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.ToArray(System.Int32)">
            <summary>
            Converts the array into an independent array.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.ToItemArray(System.Int32)">
            <summary>
            Converts the array into an independent array.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.CopyTo(System.Object[][],System.Int32)">
            <summary>
            Copies the array into an independent two-dimensional array.
            </summary>
            <param name="array">Array to copy items to.</param>
            <param name="index">Index in the array, at which the data will be inserted.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the array into an array object.
            </summary>
            <param name="array">Array to copy items to.</param>
            <param name="index">IIndex in the array, at which the data will be inserted.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NArrayCollection.GetEnumerator">
            <summary>
            Retrieves the enumerator of the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NArrayCollection.IsReadOnly">
            <summary>
            Checks whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NArrayCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NArrayCollection.Item(System.Int32,System.Int32)">
            <summary>
             Gets or sets the item specified by index.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
            <param name="index">Index of the item.</param>
            <returns>The item.</returns>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NArrayCollection.Item(System.Int32)">
            <summary>
            Gets the array specified by index.
            </summary>
            <param name="baseIndex">Index of the array in the collection.</param>
            <returns>The array.</returns>
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.NDictionary">
            <summary>
            Provides information about tables, classes, extended data types, and other items in the Application Object Tree.
            </summary>
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.NDictionary.KeyCollection">
            <summary>
            Represents a collection of value keys.
            </summary>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NDictionary.KeyCollection.ToItemArray">
            <summary>
            Converts the key collection to an item array.
            </summary>
            <returns>The new array.</returns>
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.NDictionary.ValueCollection">
            <summary>
            Represents a collection of values.
            </summary>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NDictionary.ValueCollection.ToItemArray">
            <summary>
            Converts the value collection to an item array.
            </summary>
            <returns>The new array.</returns>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NDictionary.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NDictionary.GetItemAt(System.Int32)">
            <summary>
            Retrieves the specified item.
            </summary>
            <param name="index">Index of the item.</param>
            <returns>The item.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NDictionary.Add(System.Object)">
            <summary>
            Adds the specified item to the dictionary.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NDictionary.Add(System.Collections.Generic.KeyValuePair{System.Object,System.Object})">
            <summary>
            Adds the specified item to the dictionary.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NDictionary.RemoveAt(System.Int32)">
            <summary>
            Removes the specified item from the dictionary.
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NDictionary.Clear">
            <summary>
            Clears the dictionary.
            </summary>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NDictionary.Add(System.Object,System.Object)">
            <summary>
            Adds the specified value to the dictionary.
            </summary>
            <param name="key">Key of the value.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NDictionary.ContainsKey(System.Object)">
            <summary>
            Checks whether the dictionary contains the specified key.
            </summary>
            <param name="key">The key to find.</param>
            <returns>true if the dictionary contains the key, else false.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NDictionary.Remove(System.Object)">
            <summary>
            Removes a value specified by key from the dictionary.
            </summary>
            <param name="key">Key of the value to remove.</param>
            <returns>true if the value was removed successfully, else false</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NDictionary.TryGetValue(System.Object,System.Object@)">
            <summary>
            Attempts to retrieve a value specified by key.
            Return a Boolean value indicating success.
            </summary>
            <param name="key">Key of the value to retrieve.</param>
            <param name="value">[out] The retrieved value.</param>
            <returns>true if the value was retrieved successfully, else false</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.Object,System.Object}[],System.Int32)">
            <summary>
            Copies the dictionary to an array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="index">Index in the array, at which the data will be inserted.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the dictionary to an array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="index">Index in the array, at which the data will be inserted.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NDictionary.ToArray">
            <summary>
            Converts the dictionary to an array.
            </summary>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NDictionary.ToItemArray">
            <summary>
            Converts the dictionary to an array.
            </summary>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NDictionary.GetEnumerator">
            <summary>
            Retrieves the enumerator of the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NDictionary.IsReadOnly">
            <summary>
            Checks whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NDictionary.Count">
            <summary>
            Gets the number of items in the dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NDictionary.Item(System.Object)">
            <summary>
            Gets or sets the value specified by key.
            </summary>
            <param name="key">Key of the value.</param>
            <returns>The value.</returns>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NDictionary.Item(System.Int32)">
            <summary>
            Gets or sets the item specified by index.
            </summary>
            <param name="index">Index of the item.</param>
            <returns>The item.</returns>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NDictionary.Keys">
            <summary>
            Gets the collection of value keys.
            </summary>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NDictionary.Values">
            <summary>
            Gets the collection of values.
            </summary>
        </member>
        <member name="E:Neurotec.Collections.ObjectModel.NDictionary.CollectionChanged">
            <summary>
            Adds or removes a handler for an event which occurs when collection is changed.
            </summary>
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.NCollectionChangedAction">
            <summary>
            Enumerates collection-changing actions.
            </summary>
        </member>
        <member name="F:Neurotec.Collections.ObjectModel.NCollectionChangedAction.Remove">
            Indicates that an item was added to a collection.
        </member>
        <member name="F:Neurotec.Collections.ObjectModel.NCollectionChangedAction.Replace">
            Indicates that an item was removed from a collection.
        </member>
        <member name="F:Neurotec.Collections.ObjectModel.NCollectionChangedAction.Move">
            Indicates that an item was replaced in a collection.
        </member>
        <member name="F:Neurotec.Collections.ObjectModel.NCollectionChangedAction.Reset">
            Indicates that an item was moved in a collection.
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.NCollection">
            <summary>
            Provides functionality for working with collections.
            </summary>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NCollection.NCollectionChangedActionNativeType">
            <summary>
            Defines the native type of the "collection changed" action.
            </summary>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NCollection.NCollectionCollectionChangedCallbackNativeType">
            <summary>
            Defines the native type of the "collection changed" callback.
            </summary>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NCollection.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollection.IndexOf(System.Object)">
            <summary>
            Retrieves the index of the specified item.
            </summary>
            <param name="item">Item to retrieve index of.</param>
            <returns>The index of the item.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollection.Insert(System.Int32,System.Object)">
            <summary>
            Adds an item to the collection at specified index.
            </summary>
            <param name="index">Index of the item.</param>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollection.InsertRange(System.Int32,System.Object[])">
            <summary>
            Adds an array of items to the collection at specified index.
            </summary>
            <param name="index">Index of the first item.</param>
            <param name="items">Array of items to add.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollection.InsertRange(System.Int32,System.Array)">
            <summary>
            Adds an array of items to the collection at specified index.
            </summary>
            <param name="index">Index of the first item.</param>
            <param name="items">Array of items to add.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the specified items from the collection.
            </summary>
            <param name="startIndex">Index of the first item to remove.</param>
            <param name="count">Number of items to remove.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollection.Add(System.Object)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
            <returns>Index of the item.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollection.AddRange(System.Object[])">
            <summary>
            Adds an array of items to the collection.
            </summary>
            <param name="items">Array of items to add.</param>
            <returns>Index of the first item.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollection.AddRange(System.Array)">
            <summary>
            Adds an array of items to the collection.
            </summary>
            <param name="items">Array of items to add.</param>
            <returns>Index of the first item.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollection.Clear">
            <summary>
            Clears the current collection.
            </summary>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollection.Contains(System.Object)">
            <summary>
            Checks whether the collection contains the specified item.
            </summary>
            <param name="item">The item to find.</param>
            <returns>true if the collection contains the item; else false</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollection.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copies the collection to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">Index in the array at which to insert values.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the collection to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">Index in the array at which to insert values.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollection.Remove(System.Object)">
            <summary>
            Removes the specified value from the collection.
            </summary>
            <param name="item">The value to remove.</param>
            <returns>Index freed by the removed value.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollection.ToArray">
            <summary>
            Converts the collection to an array.
            </summary>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollection.ToItemArray">
            <summary>
            Converts the collection to an array.
            </summary>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollection.GetEnumerator">
            <summary>
            Retrieves the enumerator of the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NCollection.IsReadOnly">
            <summary>
            Checks whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items in the collection.
            </summary>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item specified by index.
            </summary>
            <param name="index">Index of the item.</param>
            <returns>The item.</returns>
        </member>
        <member name="E:Neurotec.Collections.ObjectModel.NCollection.CollectionChanged">
            <summary>
            Adds or removes a handler for an event which occurs when collection is changed.
            </summary>
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.NCollectionBase`1">
            <summary>
            Generic collection. 
            </summary>          
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollectionBase`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">Item to be added.</param>
            <returns>
            Index of the added element in the collection.
            </returns>                                   
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollectionBase`1.Remove(`0)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>
            \Returns the index of the removed item. Index value of -1
            means that item was not present in the collection.
            </returns>                                               
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollectionBase`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes one or more items starting at certain index.
            </summary>
            <param name="index">The index of the first item to be removed.</param>
            <param name="count">The number of items to remove.</param>            
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollectionBase`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the current collection to an array at specified index.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">Index in the array.</param>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NCollectionBase`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            ICollection.
            </summary>                                                  
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollectionBase`1.GetEnumerator">
            <summary>
            Creates the enumerator for the collection items.
            </summary>
            <returns>
            Enumerator with standard IEnumerator interface.
            </returns>                                      
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollectionBase`1.Clear">
            <summary>
            Empties the collection.
            </summary>             
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollectionBase`1.Contains(`0)">
            <summary>
            Checks if the collection contains specific item.
            </summary>
            <param name="item">The item to be checked.</param>
            <returns>
            True if the item exists in the collection.
            </returns>                                        
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the items of the collection to an Array, starting at a
            particular index.
            </summary>
            <param name="array">The array of objects matching the
                                type of collection.</param>
            <param name="arrayIndex">The index of the first array
                                     location where items will be copied
                                     to.</param>
            
            <exception cref="T:System.ArgumentNullException">The array argument
                                                    is null</exception>
            <exception cref="T:System.ArgumentException">The array is to
                                                small for given
                                                index and the
                                                collection size</exception>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NCollectionBase`1.Count">
            <summary>
            Gets the number of items in the collection. 
            </summary>                                  
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollectionBase`1.IndexOf(`0)">
            <summary>
            Gets the index of the item.
            </summary>
            <param name="item">The item to be searched in the
                               collection.</param>
            <returns>
            Integer index of the item. The index value of -1 means that
            item was not found in the collection.
            </returns>
                                                                       
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollectionBase`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at the given index.
            </summary>
            <param name="index">The index in the collection used to insert
                                an item.</param>
            <param name="item">The item to be inserted.</param>           
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NCollectionBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at certain index.
            </summary>
            <param name="index">The index of the item that will be
                                removed.</param>                  
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NCollectionBase`1.Item(System.Int32)">
            <summary>
            Gets or sets the object specified by the index.
            </summary>
            <param name="index">Index in the collection.</param>
            <returns>The object.</returns>
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.NObjectCollection`1">
            <summary>
            Collection of NObjects.
            </summary>             
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NObjectCollection`1.IndexOf(`0)">
            <summary>
            Retrieves the index of an item.
            </summary>
            <param name="item">The specified item.</param>
            <returns>Index of the item.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NObjectCollection`1.IndexOf(Neurotec.Interop.HNObject)">
            <summary>
            Gets the index of an item specified by handle.
            </summary>
            <param name="handle">Handle to the item.</param>
            <returns>The index of the item.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NObjectCollection`1.Contains(Neurotec.Interop.HNObject)">
            <summary>
            Checks whether the collection contains the item specified by the handle.
            </summary>
            <param name="handle">Handle to the item.</param>
            <returns>true if the collection contains the item; else false.</returns>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NObjectCollection`1.Item(Neurotec.Interop.HNObject)">
            <summary>
            Gets the item indicated by handle.
            </summary>
            <param name="handle">Handle to the item.</param>
            <returns>The item.</returns>
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.NObjectReadOnlyCollection`1">
            <summary>
            Readonly collection of NObjects. 
            </summary>                       
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NObjectReadOnlyCollection`1.#ctor(Neurotec.NObject)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Object responsible for the collection.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NObjectReadOnlyCollection`1.GetInternal(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NObjectReadOnlyCollection`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NObjectReadOnlyCollection`1.IndexOf(Neurotec.Interop.HNObject)">
            <summary>
            Gets the index of the item.
            </summary>
            <param name="handle">The handle of the object to be searched
                                 in the collection.</param>
            <returns>
            Integer index of the item. The index value of -1 means that
            item was not found in the collection. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NObjectReadOnlyCollection`1.Contains(Neurotec.Interop.HNObject)">
            <summary>
            Checks whether the collection contains an object specified by handle.
            </summary>
            <param name="handle">Object handle.</param>
            <returns>true if the array contains the object; else false.</returns>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NObjectReadOnlyCollection`1.Item(Neurotec.Interop.HNObject)">
            <summary>
            Gets the item specified by handle.
            </summary>
            <param name="handle">The handle.</param>
            <returns>the item specified.</returns>
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.NObjectReadOnlyCollectionBase`1">
            <summary>
            Readonly collection of NObjects. 
            </summary>                       
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NObjectReadOnlyCollectionBase`1.#ctor(Neurotec.NObject)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Object responsible for the collection.</param>
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.NReadOnlyCollectionBase`1">
            <summary>
            Readonly collection. 
            </summary>           
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NReadOnlyCollectionBase`1.#ctor(Neurotec.NObject)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Object responsible for freeing resources associated with the collection.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NReadOnlyCollectionBase`1.GetInternal(System.Int32)">
            <summary>
            Return the item by the given index.
            </summary>
            <param name="index">The index in the collection.</param>
            <returns>The item.</returns>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NReadOnlyCollectionBase`1.Touch">
            <summary>
            Mark the changes to the collection.
            </summary>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NReadOnlyCollectionBase`1.Version">
            <summary>
            Collection's revision number (updated after each potential change to the collection).
            </summary>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NReadOnlyCollectionBase`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">[in] Index of the element.</param>
            <returns>
            The element at the specified index. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NReadOnlyCollectionBase`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NReadOnlyCollectionBase`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            ICollection.
            </summary>                                                  
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NReadOnlyCollectionBase`1.GetEnumerator">
            <summary>
            Creates the enumerator for the collection items.
            </summary>
            <returns>
            Enumerator with standard IEnumerator interface.
            </returns>                                      
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NReadOnlyCollectionBase`1.Contains(`0)">
            <summary>
            Checks if the collection contains specific item.
            </summary>
            <param name="item">The item to be checked.</param>
            <returns>
            True if the item exists in the collection.
            </returns>                                        
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NReadOnlyCollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the items of the collection to an Array, starting at a
            particular index.
            </summary>
            <param name="array">The array of objects matching the
                                type of collection.</param>
            <param name="arrayIndex">The index of the first array
                                     location where items will be copied
                                     to.</param>
            
            <exception cref="T:System.ArgumentNullException">The array argument
                                                    is null</exception>
            <exception cref="T:System.ArgumentException">The array is to
                                                small for given
                                                index and the
                                                collection size</exception>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NReadOnlyCollectionBase`1.Count">
            <summary>
            Gets the number of items in the collection. 
            </summary>                                  
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NReadOnlyCollectionBase`1.IndexOf(`0)">
            <summary>
            Checks if the collection contains specific item.
            </summary>
            <param name="item">The item to be checked.</param>
            <returns>
            True if the item exists in the collection.
            </returns>                                        
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.NSimpleCollection`1">
            <summary>
            Collection of simple items (non objects). 
            </summary>                                
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NSimpleCollection`1.Count">
            <summary>
            Retrieves a number of elements in the collection.
            </summary>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NSimpleCollection`1.Capacity">
            <summary>
            Gets or sets the total size of the collection (not the number
            of items actually contained).
            
            
            </summary>
            <exception cref="T:System.NotSupportedException">If either setting or
                                                    getting capacity is
                                                    not supported by
                                                    actual
                                                    implementation.</exception>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NSimpleCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the current collection to an array at specified index.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">Index in the array.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NSimpleCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the current collection to an array at specified index.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">Index in the array.</param>
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.NSimpleReadOnlyCollection`1">
            <summary>
            Readonly collection of simple items (non objects). 
            </summary>                                         
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NSimpleReadOnlyCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the current collection to an array at specified index.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">Index in the array.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.NSimpleReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the current collection to an array at specified index.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">Index in the array.</param>
        </member>
        <member name="P:Neurotec.Collections.ObjectModel.NSimpleReadOnlyCollection`1.Count">
            <inheritdoc />
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.ObjectCollection">
            <summary>
            Collection of Objects.
            </summary>             
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.ObjectReadOnlyCollection">
            <summary>
            Readonly collection of Objects. 
            </summary>                       
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.ObjectReadOnlyCollection.#ctor(Neurotec.NObject)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Object responsible for the collection.</param>
        </member>
        <member name="M:Neurotec.Collections.ObjectModel.ObjectReadOnlyCollection.GetInternal(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.StringCollection">
            <summary>
            Collection of strings. 
            </summary>             
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.StringReadOnlyCollection">
            <summary>
            Collection of strings that can not be modified.
            </summary>                                     
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.StructArrayCollection`2">
            <summary>
            Collection of arrays (two dimensional collection).
            </summary>                                        
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.StructCollection`1">
            <summary>
            Collection of structures.
            </summary>               
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.StructReadOnlyCollection`1">
            <summary>
            Readonly collection of structures.
            </summary>                        
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.ValueTypeArrayCollection`2">
            <summary>
            Collection of value arrays (two dimensional collection). 
            </summary>                                               
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.ValueTypeCollection`1">
            <summary>
            Collection of values.
            </summary>           
        </member>
        <member name="T:Neurotec.Collections.ObjectModel.ValueTypeReadOnlyCollection`1">
            <summary>
            Readonly collection of values. 
            </summary>                     
        </member>
        <member name="T:Neurotec.ComponentModel.NCustomParameterDescriptor">
            <summary>
            Provides custom parameter descriptor management functionality.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NCustomParameterDescriptor.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.ComponentModel.NCustomParameterDescriptor.#ctor(System.String,Neurotec.NType,Neurotec.NAttributes,System.String,System.Object,System.Object,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Object)">
            <summary>
            Creates a new custom parameter descriptor.
            </summary>
            <param name="name">Descriptor name.</param>
            <param name="parameterType">Parameter type.</param>
            <param name="attributes">Descriptor attributes.</param>
            <param name="format">Descriptor format.</param>
            <param name="defaultValue">Default parameter value.</param>
            <param name="minValue">Minimum parameter value.</param>
            <param name="maxValue">Maximum parameter value.</param>
            <param name="stdValues">An array of standard values.</param>
            <param name="data">Descriptor data.</param>
        </member>
        <member name="P:Neurotec.ComponentModel.NCustomParameterDescriptor.Data">
            <summary>
            Gets custom parameter descriptor data.
            </summary>
        </member>
        <member name="T:Neurotec.ComponentModel.NCustomMethodDescriptor">
            <summary>
            Provides custom method descriptor management functionality.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NCustomMethodDescriptor.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NCustomMethodDescriptor.Data">
            <summary>
            Gets custom property descriptor data.
            </summary>
        </member>
        <member name="T:Neurotec.ComponentModel.NCustomEventDescriptor">
            <summary>
            Provides custom event descriptor management functionality.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NCustomEventDescriptor.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NCustomEventDescriptor.Data">
            <summary>
            Gets custom property descriptor data.
            </summary>
        </member>
        <member name="T:Neurotec.ComponentModel.NCustomPropertyDescriptor">
            <summary>
            Provides custom property descriptor management functionality.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NCustomPropertyDescriptor.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NCustomPropertyDescriptor.Data">
            <summary>
            Gets custom property descriptor data.
            </summary>
        </member>
        <member name="T:Neurotec.ComponentModel.NDescriptor">
            <summary>
            Provides descriptor management functionality.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NDescriptor.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NDescriptor.Name">
            <summary>
            Gets descriptor name.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NDescriptor.Attributes">
            <summary>
            Gets descriptor attributes.
            </summary>
        </member>
        <member name="T:Neurotec.ComponentModel.NEventDescriptor">
            <summary>
            Provides functions for getting information about property.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NEventDescriptor.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.ComponentModel.NEventDescriptor.AddHandler(Neurotec.NObject,System.Delegate)">
            <summary>
            Binds the event to the component.
            </summary>
            <param name="object">The component the event binds to.</param>
            <param name="value">Event delegate.</param>
        </member>
        <member name="M:Neurotec.ComponentModel.NEventDescriptor.RemoveHandler(Neurotec.NObject,System.Delegate)">
            <summary>
            Unbinds the delegate from the component so that the delegate will no longer receive events from the component.
            </summary>
            <param name="object">The component the event binds to.</param>
            <param name="value">Event delegate.</param>
        </member>
        <member name="M:Neurotec.ComponentModel.NEventDescriptor.AsEventDescriptor">
            <summary>
            Retrieves the event descriptor for the current event.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Neurotec.ComponentModel.NEventDescriptor.EventType">
            <summary>
            Gets the type of the event.
            </summary>
        </member>
        <member name="T:Neurotec.ComponentModel.NMemberDescriptor">
            <summary>
            Provides member descriptor management functionality.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NMemberDescriptor.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NMemberDescriptor.ComponentType">
            <summary>
            Gets the component type.
            </summary>
        </member>
        <member name="T:Neurotec.ComponentModel.NMethodDescriptor">
            <summary>
            Provides functions for getting information about property.
            </summary>
        </member>
        <member name="T:Neurotec.ComponentModel.NMethodDescriptor.ParameterCollection">
            <summary>
            Collection of method parameters.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NMethodDescriptor.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.ComponentModel.NMethodDescriptor.Invoke(Neurotec.NObject,System.Object[])">
            <summary>
            Invokes the method associated with the descriptor.
            </summary>
            <param name="object">The object on which the method will be invoked.</param>
            <param name="parameters">An array of values with the same number, order, and type as the parameters of the method or constructor to be invoked.</param>
            <returns>The value returned by the invoked method, or null in case of constructor.</returns>
        </member>
        <member name="M:Neurotec.ComponentModel.NMethodDescriptor.Invoke(Neurotec.NObject,Neurotec.NPropertyBag)">
            <summary>
            Invokes the method associated with the descriptor.
            </summary>
            <param name="object">The object on which the method will be invoked.</param>
            <param name="parameters">A property bag containing values with the same number, order, and type as the parameters of the method or constructor to be invoked.</param>
            <returns>The value returned by the invoked method, or null in case of constructor.</returns>
        </member>
        <member name="M:Neurotec.ComponentModel.NMethodDescriptor.Invoke(Neurotec.NObject,System.String)">
            <summary>
            Invokes the method associated with the descriptor.
            </summary>
            <param name="object">The object on which the method will be invoked.</param>
            <param name="parameters">A string representing the parameters of the method or constructor to be invoked.</param>
            <returns>The value returned by the invoked method, or null in case of constructor.</returns>
        </member>
        <member name="P:Neurotec.ComponentModel.NMethodDescriptor.ReturnParameter">
            <summary>
            Retrieves the method parameter.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NMethodDescriptor.Parameters">
            <summary>
            Retrieves a collection of method parameters.
            </summary>
        </member>
        <member name="T:Neurotec.ComponentModel.NParameterBag">
            <summary>
            A helper class that aids in implementation of PropertyBag for ParameterDescriptor class.
            </summary>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.Enumerator.#ctor(Neurotec.ComponentModel.NParameterBag)">
            <summary>
            Creates a new instance of Enumerator structure.
            </summary>
            <param name="owner">The NParameterBag owning the Enumerator.</param>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.Enumerator.MoveNext">
            <summary>
            Moves the enumerator to the next value.
            </summary>
            <returns>true if there is a value to move to; else false.</returns>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.Enumerator.Reset">
            <summary>
            Resets the current enumerator.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NParameterBag.Enumerator.Current">
            <summary>
            Gets the current key value pair.
            </summary>
        </member>
        <member name="T:Neurotec.ComponentModel.NParameterBag.KeyCollection">
            <summary>
            Represents the collection of key parts of the key value pair.
            </summary>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.KeyCollection.Contains(System.String)">
            <summary>
            Checks whether the collection contains the specified value.
            </summary>
            <param name="value">The value to check.</param>
            <returns>true if the collection contains the value; else false.</returns>
        </member>
        <member name="T:Neurotec.ComponentModel.NParameterBag.ValueCollection">
            <summary>
            Represents the collection of value parts of the key value pair.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NParameterBag.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.#ctor(Neurotec.ComponentModel.NParameterDescriptor[])">
            <summary>
            Creates a new parameter bag from the specified parameters.
            </summary>
            <param name="parameters">An array of parameters.</param>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.Apply(Neurotec.NPropertyBag)">
            <summary>
            Applies the current parameter bag to the specified property bag.
            </summary>
            <param name="value">The property bag.</param>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.Apply(Neurotec.NPropertyBag,System.Boolean)">
            <summary>
            Applies the current parameter bag to the specified property bag.
            </summary>
            <param name="value">The property bag.</param>
            <param name="ignoreUnknown">true if unknown values should be ignored; else false.</param>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.ToPropertyBag">
            <summary>
            Converts the current parameter bag to a property bag.
            </summary>
            <returns>The property bag.</returns>
        </member>
        <member name="P:Neurotec.ComponentModel.NParameterBag.Item(System.Int32)">
            <summary>
            Gets the specified key vale pair.
            </summary>
            <param name="index">Index of the key value pair.</param>
            <returns>The key value pair.</returns>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.Add(System.String,System.Object)">
            <summary>
            Adds a new key value pair.
            </summary>
            <param name="key">Key part of the pair.</param>
            <param name="value">Value part of the pair.</param>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.ContainsKey(System.String)">
            <summary>
            Checks whether the parameter bag contains a parameter specified by key.
            </summary>
            <param name="key">Key of the parameter.</param>
            <returns>true if the parameter bag contains the parameter, else false.</returns>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.Remove(System.String)">
            <summary>
            Removes the parameter specified by key.
            </summary>
            <param name="key">Key of the parameter.</param>
            <returns>true if the operation was successful, else false.</returns>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.TryGetValue(System.String,System.Object@)">
            <summary>
            Retrieves the value of a parameter specified by the key. Returns a Boolean value indicating whether the operation succeeded.
            </summary>
            <param name="key">Key to the parameter to be retrieved.</param>
            <param name="value">[out] The parameter.</param>
            <returns>true if the operation was successful, else false.</returns>
        </member>
        <member name="P:Neurotec.ComponentModel.NParameterBag.Item(System.String)">
            <summary>
            Gets or sets the value specified by key.
            </summary>
            <param name="key">Key of the parameter.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.RemoveAt(System.Int32)">
            <summary>
            Removes the parameter specified by index.
            </summary>
            <param name="index">Index of the parameter to be removed.</param>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds a key value pair to the current parameter bag.
            </summary>
            <param name="item">The key value pair to add.</param>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.Clear">
            <summary>
            Clears the current parameter bag.
            </summary>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Checks whether the current parameter bag contains the specified key value pair.
            </summary>
            <param name="item">The key value pair.</param>
            <returns>true if the parameter bag contains the key value pair; else false.</returns>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies the current parameter bag into a key value pair array.
            </summary>
            <param name="array">The key value pair array.</param>
            <param name="arrayIndex">Index in the array, at which the copying starts.</param>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified key value pair from the current parameter bag.
            </summary>
            <param name="item">The key value pair to be removed.</param>
            <returns>true if the operation was successful, else false.</returns>
        </member>
        <member name="M:Neurotec.ComponentModel.NParameterBag.GetEnumerator">
            <summary>
            Gets the enumerator for the current key value pair.
            </summary>
            <returns>The new enumerator.</returns>
        </member>
        <member name="T:Neurotec.ComponentModel.NParameterDescriptor">
            <summary>
            Provides functions for getting information about parameter.
            </summary>
        </member>
        <member name="T:Neurotec.ComponentModel.NParameterDescriptor.StdValueCollection">
            <summary>
            Represents an array of standard parameter values.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NParameterDescriptor.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NParameterDescriptor.ParameterType">
            <summary>
            Gets the type of the parameter.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NParameterDescriptor.Format">
            <summary>
            Gets the format of the current parameter descriptor.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NParameterDescriptor.DefaultValue">
            <summary>
            Gets the default value of the current parameter descriptor.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NParameterDescriptor.MinValue">
            <summary>
            Gets the minimum value of the current parameter descriptor.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NParameterDescriptor.MaxValue">
            <summary>
            Gets the maximum value of the current parameter descriptor.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NParameterDescriptor.StdValues">
            <summary>
            Gets the collection of standard values for the current parameter descriptor.
            </summary>
        </member>
        <member name="T:Neurotec.ComponentModel.NPropertyDescriptor">
            <summary>
            Provides functions for getting information about property.
            </summary>
        </member>
        <member name="T:Neurotec.ComponentModel.NPropertyDescriptor.StdValueCollection">
            <summary>
            Represents an array of standard property values.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NPropertyDescriptor.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.ComponentModel.NPropertyDescriptor.GetValue(Neurotec.NObject)">
            <summary>
            Retrieves the value of the component.
            </summary>
            <param name="component">The component to get value of.</param>
            <returns>The value of the component.</returns>
        </member>
        <member name="M:Neurotec.ComponentModel.NPropertyDescriptor.SetValue(Neurotec.NObject,System.Object)">
            <summary>
            Sets the value of the specified component.
            </summary>
            <param name="component">The component to set value of.</param>
            <param name="value">The new value of the component.</param>
        </member>
        <member name="M:Neurotec.ComponentModel.NPropertyDescriptor.CanResetValue(Neurotec.NObject)">
            <summary>
            Checks whether the value of the component can be reset.
            </summary>
            <param name="component">The component to reset.</param>
            <returns>true if the component's value can be reset; else false.</returns>
        </member>
        <member name="M:Neurotec.ComponentModel.NPropertyDescriptor.ResetValue(Neurotec.NObject)">
            <summary>
            Resets the value of the specified component.
            </summary>
            <param name="component">The component to reset.</param>
        </member>
        <member name="M:Neurotec.ComponentModel.NPropertyDescriptor.AddValueChanged(Neurotec.NObject,System.EventHandler)">
            <summary>
            Adds a "Value Changed" event callback to the specified component.
            </summary>
            <param name="component">Component to add the callback to.</param>
            <param name="handler">Event handler.</param>
        </member>
        <member name="M:Neurotec.ComponentModel.NPropertyDescriptor.RemoveValueChanged(Neurotec.NObject,System.EventHandler)">
            <summary>
            Removes a "Value Changed" event callback from the specified component.
            </summary>
            <param name="component">Component to remove the callback from.</param>
            <param name="handler">Event handler.</param>
        </member>
        <member name="P:Neurotec.ComponentModel.NPropertyDescriptor.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NPropertyDescriptor.Format">
            <summary>
            Gets the format of the current property descriptor.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NPropertyDescriptor.DefaultValue">
            <summary>
            Gets the default value of the current property descriptor.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NPropertyDescriptor.MinValue">
            <summary>
            Gets the minimum value of the current property descriptor.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NPropertyDescriptor.MaxValue">
            <summary>
            Gets the maximum value of the current property descriptor.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NPropertyDescriptor.StdValues">
            <summary>
            Gets the collection of standard values for the current property descriptor.
            </summary>
        </member>
        <member name="T:Neurotec.ComponentModel.NTypeDescriptor">
            <summary>
            Provides information about the characteristics for a component, such as its attributes, properties, and events.
            </summary>
        </member>
        <member name="P:Neurotec.ComponentModel.NTypeDescriptor.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.ComponentModel.NTypeDescriptor.GetProperties(Neurotec.NObject)">
            <summary>
            Retrieves the properties of the specified object.
            </summary>
            <param name="obj">The object to retrieve properties of.</param>
            <returns>An array containing the properties of the object.</returns>
        </member>
        <member name="M:Neurotec.ComponentModel.NTypeDescriptor.GetProperties(Neurotec.NType)">
            <summary>
            Retrieves the properties of the specified type.
            </summary>
            <param name="type">The type to retrieve properties of.</param>
            <returns>An array containing the properties of the type.</returns>
        </member>
        <member name="M:Neurotec.ComponentModel.NTypeDescriptor.GetDefaultPropertyName(Neurotec.NObject)">
            <summary>
            Retrieves the default property name of the specified object.
            </summary>
            <param name="obj">The object to retrieve property name of.</param>
            <returns>The string with default property name.</returns>
        </member>
        <member name="M:Neurotec.ComponentModel.NTypeDescriptor.GetDefaultPropertyName(Neurotec.NType)">
            <summary>
            Retrieves the default property name of the specified type.
            </summary>
            <param name="type">The type to retrieve property name of.</param>
            <returns>The string with default property name.</returns>
        </member>
        <member name="P:Neurotec.IO.NFile.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="T:Neurotec.IO.NBuffer">
            <summary>
            Provides buffer management functionality.
            </summary>
        </member>
        <member name="M:Neurotec.IO.NBuffer.Data.Create(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a new Data object from a part of byte array.
            </summary>
            <param name="array">Byte array.</param>
            <param name="arrayIndex">Index at which the part of the array begins.</param>
            <param name="arrayCount">Length of the part of the array.</param>
            <returns>New Data object.</returns>
        </member>
        <member name="F:Neurotec.IO.NBuffer.Data._array">
            <summary>
            Represents a data array.
            </summary>
        </member>
        <member name="F:Neurotec.IO.NBuffer.Data.handle">
            <summary>
            Represents a data handle.
            </summary>
        </member>
        <member name="M:Neurotec.IO.NBuffer.Copy(Neurotec.IO.NBuffer,System.Int32,Neurotec.IO.NBuffer,System.Int32,System.Int32)">
            <summary>
            Copies bytes from one buffer into another with specified offsets into both buffers and size.
            </summary>
            <param name="srcBuffer">The source buffer.</param>
            <param name="srcOffset">Offset into the source buffer.</param>
            <param name="dstBuffer">The destination buffer.</param>
            <param name="dstOffset">Offset into the destination buffer.</param>
            <param name="size">The buffer size.</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.Copy(Neurotec.IO.NBuffer,System.Int64,Neurotec.IO.NBuffer,System.Int64,System.Int64)">
            <summary>
            Copies bytes from one buffer into another with specified offsets into both buffers and size.
            </summary>
            <param name="srcBuffer">The source buffer.</param>
            <param name="srcOffset">Offset into the source buffer.</param>
            <param name="dstBuffer">The destination buffer.</param>
            <param name="dstOffset">Offset into the destination buffer.</param>
            <param name="size">The buffer size.</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.Copy(Neurotec.IO.NBuffer,System.UIntPtr,Neurotec.IO.NBuffer,System.UIntPtr,System.UIntPtr)">
            <summary>
            Copies bytes from one buffer into another with specified offsets into both buffers and size.
            </summary>
            <param name="srcBuffer">The source buffer.</param>
            <param name="srcOffset">Offset into the source buffer.</param>
            <param name="dstBuffer">The destination buffer.</param>
            <param name="dstOffset">Offset into the destination buffer.</param>
            <param name="size">The buffer size.</param>
        </member>
        <member name="P:Neurotec.IO.NBuffer.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.IO.NBuffer.Empty">
            <summary>
            Gets or sets an empty NBuffer.
            </summary>
            <value>
            Empty NBuffer.
            </value>                      
        </member>
        <member name="M:Neurotec.IO.NBuffer.#ctor(System.Int32)">
            <summary>
            \ \ 
            </summary>
            <param name="size">_nt_</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.#ctor(System.Int64)">
            <summary>
            \ \ 
            </summary>
            <param name="size">_nt_</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.#ctor(System.UIntPtr)">
            <summary>
            \ \ 
            </summary>
            <param name="size">_nt_</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the NBuffer class.
            </summary>
            <param name="ptr">A pointer to buffer.</param>
            <param name="size">Size of a buffer.</param>    
        </member>
        <member name="M:Neurotec.IO.NBuffer.#ctor(System.IntPtr,System.Int64)">
            <summary>
            \ \ 
            </summary>
            <param name="ptr">_nt_</param>
            <param name="size">_nt_</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.#ctor(System.IntPtr,System.UIntPtr)">
            <summary>
            \ \ 
            </summary>
            <param name="ptr">_nt_</param>
            <param name="size">_nt_</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.#ctor(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            \ \ 
            </summary>
            <param name="ptr">_nt_</param>
            <param name="size">_nt_</param>
            <param name="ownsPtr">_nt_</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.#ctor(System.IntPtr,System.Int64,System.Boolean)">
            <summary>
            \ \ 
            </summary>
            <param name="ptr">_nt_</param>
            <param name="size">_nt_</param>
            <param name="ownsPtr">_nt_</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.#ctor(System.IntPtr,System.UIntPtr,System.Boolean)">
            <summary>
            \ \ 
            </summary>
            <param name="ptr">_nt_</param>
            <param name="size">_nt_</param>
            <param name="ownsPtr">_nt_</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.#ctor(System.IntPtr,System.Int32,Neurotec.NMemoryType)">
            <summary>
            \ \ 
            </summary>
            <param name="ptr">_nt_</param>
            <param name="size">_nt_</param>
            <param name="ptrType">_nt_</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.#ctor(System.IntPtr,System.Int64,Neurotec.NMemoryType)">
            <summary>
            \ \ 
            </summary>
            <param name="ptr">_nt_</param>
            <param name="size">_nt_</param>
            <param name="ptrType">_nt_</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.#ctor(System.IntPtr,System.UIntPtr,Neurotec.NMemoryType)">
            <summary>
            \ \ 
            </summary>
            <param name="ptr">_nt_</param>
            <param name="size">_nt_</param>
            <param name="ptrType">_nt_</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.#ctor(System.Byte[])">
            <summary>
            \ \ 
            </summary>
            <param name="array">_nt_</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            \ \ 
            </summary>
            <param name="array">_nt_</param>
            <param name="arrayIndex">_nt_</param>
            <param name="arrayCount">_nt_</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.#ctor(Neurotec.IO.NBuffer,System.Int32,System.Int32)">
            <summary>
            \ \ 
            </summary>
            <param name="srcBuffer">_nt_</param>
            <param name="offset">_nt_</param>
            <param name="size">_nt_</param>     
        </member>
        <member name="M:Neurotec.IO.NBuffer.#ctor(Neurotec.IO.NBuffer,System.Int64,System.Int64)">
            <summary>
            \ \ 
            </summary>
            <param name="srcBuffer">_nt_</param>
            <param name="offset">_nt_</param>
            <param name="size">_nt_</param>     
        </member>
        <member name="M:Neurotec.IO.NBuffer.#ctor(Neurotec.IO.NBuffer,System.UIntPtr,System.UIntPtr)">
            <summary>
            \ \ 
            </summary>
            <param name="srcBuffer">_nt_</param>
            <param name="offset">_nt_</param>
            <param name="size">_nt_</param>     
        </member>
        <member name="M:Neurotec.IO.NBuffer.CopyTo(Neurotec.IO.NBuffer,System.Int32)">
            <summary>
            Copies bytes from the current buffer into the specified buffer with specified offset.
            </summary>
            <param name="dstBuffer">The destination buffer.</param>
            <param name="dstOffset">The destination offset.</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.CopyTo(Neurotec.IO.NBuffer,System.Int64)">
            <summary>
            Copies bytes from the current buffer into the specified buffer with specified offset.
            </summary>
            <param name="dstBuffer">The destination buffer.</param>
            <param name="dstOffset">The destination offset.</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.CopyTo(Neurotec.IO.NBuffer,System.UIntPtr)">
            <summary>
            Copies bytes from the current buffer into the specified buffer with specified offset.
            </summary>
            <param name="dstBuffer">The destination buffer.</param>
            <param name="dstOffset">The destination offset.</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.CopyTo(System.IntPtr,System.Int32)">
            <summary>
            Copies bytes from the current buffer into the buffer specified by pointer with specified size.
            </summary>
            <param name="pDstBuffer">Pointer to the destination buffer.</param>
            <param name="dstBufferSize">Size if the destination buffer.</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.CopyTo(System.IntPtr,System.Int64)">
            <summary>
            Copies bytes from the current buffer into the buffer specified by pointer with specified size.
            </summary>
            <param name="pDstBuffer">Pointer to the destination buffer.</param>
            <param name="dstBufferSize">Size if the destination buffer.</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.CopyTo(System.IntPtr,System.UIntPtr)">
            <summary>
            Copies bytes from the current buffer into the buffer specified by pointer with specified size.
            </summary>
            <param name="pDstBuffer">Pointer to the destination buffer.</param>
            <param name="dstBufferSize">Size if the destination buffer.</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies bytes from the current buffer into a byte array at specified index.
            </summary>
            <param name="array">The destination byte array.</param>
            <param name="arrayIndex">The specified index.</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.CopyTo(System.Int32,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Copies bytes from the current buffer into a different buffer with specified size and offset.
            </summary>
            <param name="offset">Offset into the current buffer.</param>
            <param name="pDstBuffer">The destination buffer.</param>
            <param name="dstBufferSize">Size of the destination buffer.</param>
            <param name="size">Size of the current buffer.</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.CopyTo(System.Int64,System.IntPtr,System.Int64,System.Int64)">
            <summary>
            Copies bytes from the current buffer into a different buffer with specified size and offset.
            </summary>
            <param name="offset">Offset into the current buffer.</param>
            <param name="pDstBuffer">The destination buffer.</param>
            <param name="dstBufferSize">Size of the destination buffer.</param>
            <param name="size">Size of the current buffer.</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.CopyTo(System.UIntPtr,System.IntPtr,System.UIntPtr,System.UIntPtr)">
            <summary>
            Copies bytes from the current buffer into a different buffer with specified size and offset.
            </summary>
            <param name="offset">Offset into the current buffer.</param>
            <param name="pDstBuffer">The destination buffer.</param>
            <param name="dstBufferSize">Size of the destination buffer.</param>
            <param name="size">Size of the current buffer.</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.CopyTo(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from the current buffer into a byte array at specified index.
            </summary>
            <param name="offset">Offset into the current buffer.</param>
            <param name="array">The destination byte array.</param>
            <param name="arrayIndex">The index in the array.</param>
            <param name="size">Sized of the current buffer.</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.CopyFrom(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Copies bytes from the specified buffer into the current buffer.
            </summary>
            <param name="pSrcBuffer">Pointer to the source buffer.</param>
            <param name="srcBufferSize">Size of the source buffer.</param>
            <param name="offset">Offset into the current buffer.</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.CopyFrom(System.IntPtr,System.Int64,System.Int64)">
            <summary>
            Copies bytes from the specified buffer into the current buffer.
            </summary>
            <param name="pSrcBuffer">Pointer to the source buffer.</param>
            <param name="srcBufferSize">Size of the source buffer.</param>
            <param name="offset">Offset into the current buffer.</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.CopyFrom(System.IntPtr,System.UIntPtr,System.UIntPtr)">
            <summary>
            Copies bytes from the specified buffer into the current buffer.
            </summary>
            <param name="pSrcBuffer">Pointer to the source buffer.</param>
            <param name="srcBufferSize">Size of the source buffer.</param>
            <param name="offset">Offset into the current buffer.</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.CopyFrom(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies bytes from the specified byte array at specified index to the current buffer.
            </summary>
            <param name="array">The source byte array.</param>
            <param name="arrayIndex">Index in the source array.</param>
            <param name="arrayCount">Size of the source array.</param>
            <param name="offset">Offset into the current buffer.</param>
        </member>
        <member name="M:Neurotec.IO.NBuffer.ToArray">
            <summary>
            Copies the elements of the NBuffer to a new byte array.
            </summary>
            <returns>
            A byte array containing copies of the elements of the
            NBuffer.
            </returns>
        </member>
        <member name="M:Neurotec.IO.NBuffer.WriteTo(System.IO.Stream)">
            <summary>
            Writes the contents of NBuffer to memory stream.
            </summary>
            <param name="stream">The stream to write the contents of
                                 NBuffer to.</param>                
        </member>
        <member name="P:Neurotec.IO.NBuffer.Ptr">
            <summary>
            Gets a representation of NBuffer pointer. 
            </summary>                                             
        </member>
        <member name="P:Neurotec.IO.NBuffer.Size">
            <summary>
            Gets the length of NBuffer.
            </summary>
            <value>
            The length of NBuffer. 
            </value>                                           
        </member>
        <member name="P:Neurotec.IO.NBuffer.LongSize">
            <summary>
            Gets a 64-bit integer that represents the length of NBuffer. 
            </summary>                                                   
        </member>
        <member name="P:Neurotec.IO.NBuffer.NativeSize">
            <summary>
            Gets UIntPtr that represents the length of NBuffer. 
            </summary>                                          
        </member>
        <member name="T:Neurotec.IO.NBufferedStream">
            <summary>
            Provides buffered stream management functionality.
            </summary>
        </member>
        <member name="P:Neurotec.IO.NBufferedStream.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.IO.NBufferedStream.#ctor(Neurotec.IO.NStream)">
            <summary>
            Initializes a new instance of NBufferedStream class.
            </summary>
            <param name="innerStream">The inner stream.</param> 
        </member>
        <member name="M:Neurotec.IO.NBufferedStream.#ctor(Neurotec.IO.NStream,System.Int32)">
            <summary>
            Initializes a new instance of NBufferedStream class.
            </summary>
            <param name="innerStream">The inner stream.</param>
            <param name="bufferSize">Size of the NBuffer.</param>
        </member>
        <member name="F:Neurotec.IO.NCustomStream.Data.Stream">
            <summary>
            Represents the data stream.
            </summary>
        </member>
        <member name="F:Neurotec.IO.NCustomStream.Data.Buffer">
            <summary>
            Represents the byte buffer.
            </summary>
        </member>
        <member name="M:Neurotec.IO.NCustomStream.Data.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of Data class for the specified data stream.
            </summary>
            <param name="stream">The data stream.</param>
        </member>
        <member name="P:Neurotec.IO.NCustomStream.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="T:Neurotec.IO.NFileStream">
            <summary>
            Provides access to unmanaged files from managed code.
            </summary>
        </member>
        <member name="P:Neurotec.IO.NFileStream.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.IO.NFileStream.#ctor(System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance of NFileStream class with specified path and mode.
            </summary>
            <param name="path">File stream path.</param>
            <param name="mode">File mode.</param>
        </member>
        <member name="M:Neurotec.IO.NFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of NFileStream class with specified path, mode and access.
            </summary>
            <param name="path">File stream path.</param>
            <param name="mode">File mode.</param>
            <param name="access">File access.</param>
        </member>
        <member name="M:Neurotec.IO.NFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Initializes a new instance of NFileStream class with specified path, mode, access and share.
            </summary>
            <param name="path">File stream path.</param>
            <param name="mode">File mode.</param>
            <param name="access">File access.</param>
            <param name="share">File sharing.</param>
        </member>
        <member name="M:Neurotec.IO.NFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>
            Initializes a new instance of NFileStream class with specified path, mode, access, share and buffer size.
            </summary>
            <param name="path">File stream path.</param>
            <param name="mode">File mode.</param>
            <param name="access">File access.</param>
            <param name="share">File sharing.</param>
            <param name="bufferSize">Buffer size in bytes.</param>
        </member>
        <member name="M:Neurotec.IO.NFileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of NFileStream class with specified handle and access.
            </summary>
            <param name="handle">The handle.</param>
            <param name="access">File access.</param>
        </member>
        <member name="M:Neurotec.IO.NFileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Int32)">
            <summary>
            Initializes a new instance of NFileStream class with specified handle, access and buffer size.
            </summary>
            <param name="handle">The handle.</param>
            <param name="access">File access.</param>
            <param name="bufferSize">Buffer size in bytes.</param>
        </member>
        <member name="M:Neurotec.IO.NFileStream.#ctor(System.IntPtr,System.Boolean,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of NFileStream class with specified handle and access.
            </summary>
            <param name="handle">The handle.</param>
            <param name="ownsHandle">true if the file stream owns the handle; else false.</param>
            <param name="access">File access.</param>
        </member>
        <member name="M:Neurotec.IO.NFileStream.#ctor(System.IntPtr,System.Boolean,System.IO.FileAccess,System.Int32)">
            <summary>
            Initializes a new instance of NFileStream class with specified handle, access and buffer size.
            </summary>
            <param name="handle">The handle.</param>
            <param name="ownsHandle">true if the file stream owns the handle; else false.</param>
            <param name="access">File access.</param>
            <param name="bufferSize">Buffer size in bytes.</param>
        </member>
        <member name="P:Neurotec.IO.NFileStream.OSHandle">
            <summary>
            Gets the OS handle.
            </summary>
        </member>
        <member name="T:Neurotec.IO.NByteOrder">
            <summary>
            Specifies byte order. 
            </summary>                                     
        </member>
        <member name="F:Neurotec.IO.NByteOrder.LittleEndian">
            <summary> Little endian byte order is used.</summary>
        </member>
        <member name="F:Neurotec.IO.NByteOrder.BigEndian">
            <summary> Big endian byte order is used.</summary>
        </member>
        <member name="T:Neurotec.IO.NIOTypes">
            <summary>
            Input/Output types.
            </summary>
        </member>
        <member name="M:Neurotec.IO.NIOTypes.IsByteOrderValid(Neurotec.IO.NByteOrder)">
            <summary>
            Checks whether the byte order is valid.
            </summary>
            <param name="value">The byte order.</param>
            <returns>NTrue if the byte order is valid; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.IO.NIOTypes.GetByteOrderSystem">
            <summary>
            Gets the byte order.
            </summary>
            <returns>NByteOrder object.</returns>
        </member>
        <member name="M:Neurotec.IO.NIOTypes.IsByteOrderReverse(Neurotec.IO.NByteOrder)">
            <summary>
            Checks whether the byte order is reverse.
            </summary>
            <param name="value">The byte order.</param>
            <returns>NTrue if the byte order is reverse; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.IO.NIOTypes.IsSeekOriginValid(System.IO.SeekOrigin)">
            <summary>
            Checks whether the seek origin is valid.
            </summary>
            <param name="value">The seek origin.</param>
            <returns>NTrue if the seek origin is valid; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.IO.NIOTypes.IsFileModeValid(System.IO.FileMode)">
            <summary>
            Checks whether the file mode is valid.
            </summary>
            <param name="value">The file mode.</param>
            <returns>NTrue if the file mode is valid; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.IO.NIOTypes.IsFileAccessValid(System.IO.FileAccess)">
            <summary>
            Checks whether the file access is valid.
            </summary>
            <param name="value">The file access.</param>
            <returns>NTrue if the file access is valid; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.IO.NIOTypes.IsFileShareValid(System.IO.FileShare)">
            <summary>
            Checks whether the file share is valid.
            </summary>
            <param name="value">The file share.</param>
            <returns>NTrue if the file share is valid; else NFalse.</returns>
        </member>
        <member name="P:Neurotec.IO.NIOTypes.NByteOrderNativeType">
            <summary>
            Defines the native type of the byte order.
            </summary>
        </member>
        <member name="P:Neurotec.IO.NIOTypes.SeekOriginNativeType">
            <summary>
            Defines the native type of the seek origin.
            </summary>
        </member>
        <member name="P:Neurotec.IO.NIOTypes.FileModeNativeType">
            <summary>
            Defines the native type of the file mode.
            </summary>
        </member>
        <member name="P:Neurotec.IO.NIOTypes.FileAccessNativeType">
            <summary>
            Defines the native type of the file access.
            </summary>
        </member>
        <member name="P:Neurotec.IO.NIOTypes.FileShareNativeType">
            <summary>
            Defines the native type of the file share.
            </summary>
        </member>
        <member name="P:Neurotec.IO.NIOTypes.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="T:Neurotec.IO.NMemoryStream">
            <summary>
            Provides access to unmanaged blocks of memory from managed
            code.
            </summary>
        </member>
        <member name="P:Neurotec.IO.NMemoryStream.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.IO.NMemoryStream.#ctor">
            <summary>
            Initializes a new, empty instance of the NMemoryStream class.
            
            </summary>                                                      
        </member>
        <member name="M:Neurotec.IO.NMemoryStream.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the NMemoryStream class using the specified memory length.
            </summary>
            <param name="capacity">The length of the memory to use.</param>
        </member>
        <member name="M:Neurotec.IO.NMemoryStream.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the NMemoryStream class using the specified memory length.
            </summary>
            <param name="capacity">The length of the memory to use.</param>
        </member>
        <member name="M:Neurotec.IO.NMemoryStream.#ctor(System.UIntPtr)">
            <summary>
            Initializes a new instance of the NMemoryStream class using the specified memory length.
            </summary>
            <param name="capacity">The length of the memory to use.</param>
        </member>
        <member name="M:Neurotec.IO.NMemoryStream.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the NMemoryStream class using the specified buffer.
            </summary>
            <param name="buffer">Byte buffer specified.</param>
        </member>
        <member name="M:Neurotec.IO.NMemoryStream.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the NMemoryStream class using the specified buffer and writing permission.
            </summary>
            <param name="buffer">Byte buffer specified.</param>
            <param name="canWrite">true if writing is permitted; else false.</param>
        </member>
        <member name="M:Neurotec.IO.NMemoryStream.#ctor(Neurotec.IO.NBuffer)">
            <summary>
            Initializes a new instance of the NMemoryStream class using the specified buffer.
            </summary>
            <param name="buffer">NBuffer specified.</param>
        </member>
        <member name="M:Neurotec.IO.NMemoryStream.#ctor(Neurotec.IO.NBuffer,System.Boolean)">
            <summary>
            Initializes a new instance of the NMemoryStream class using the specified buffer and writing permission.
            </summary>
            <param name="buffer">NBuffer specified.</param>
            <param name="canWrite">true if writing is permitted; else false.</param>
        </member>
        <member name="M:Neurotec.IO.NMemoryStream.#ctor(Neurotec.IO.NBuffer,System.IO.FileAccess,System.Boolean)">
            <summary>
            Initializes a new instance of the NMemoryStream class using the specified buffer, file access and exposability.
            </summary>
            <param name="buffer">NBuffer specified.</param>
            <param name="access">File access.</param>
            <param name="bufferExposable">true if the buffer is exposable; else false.</param>
        </member>
        <member name="M:Neurotec.IO.NMemoryStream.GetBuffer">
            <summary>
            Retrieves the buffer.
            </summary>
            <returns>NBuffer object.</returns>
        </member>
        <member name="M:Neurotec.IO.NMemoryStream.ToArray">
            <summary>
            Saves stream to byte array.
            </summary>
            <returns>
            Byte array.
            </returns>                                                
        </member>
        <member name="M:Neurotec.IO.NMemoryStream.WriteTo(Neurotec.IO.NStream)">
            <summary>
            Writes NMemoryStream to Stream.
            </summary>
            <param name="stream">Stream object.</param>               
        </member>
        <member name="P:Neurotec.IO.NMemoryStream.Capacity">
            <summary>
            Gets the stream size of memory assigned to a stream
            (capacity). 
            </summary>                                                 
        </member>
        <member name="P:Neurotec.IO.NMemoryStream.LongCapacity">
            <summary>
            Gets the stream size of memory assigned to a stream (capacity), as a long number.
            </summary>
        </member>
        <member name="P:Neurotec.IO.NMemoryStream.NativeCapacity">
            <summary>
            Gets the stream size of memory assigned to a stream (capacity), as an unsigned integer.
            </summary>
        </member>
        <member name="P:Neurotec.IO.NMemoryStream.PositionPtr">
            <summary>
            Gets the pointer to a certain position.
            </summary>
        </member>
        <member name="T:Neurotec.IO.NStream">
            <summary>
            This class supports internal Neurotechnology libraries
            infrastructure and should not be used directly in your code. 
            </summary>                                                   
        </member>
        <member name="P:Neurotec.IO.NStream.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.IO.NStream.Null">
            <summary>
            Gets an empty NStream.
            </summary>
        </member>
        <member name="M:Neurotec.IO.NStream.FromStream(System.IO.Stream)">
            <summary>
            Creates new NStream from Stream object.
            </summary>
            <param name="stream">Memory stream.</param>
            <returns>
            NStream object. 
            </returns>
        </member>
        <member name="M:Neurotec.IO.NStream.Synchronized(Neurotec.IO.NStream)">
            <summary>
            Creates a synchronized NStream from a Stream object.
            </summary>
            <param name="stream">Memory stream.</param>
            <returns>NStream object.</returns>
        </member>
        <member name="M:Neurotec.IO.NStream.CopyTo(Neurotec.IO.NStream)">
            <summary>
            Copies the current stream to another stream.
            </summary>
            <param name="dstStream">Destination stream.</param>
        </member>
        <member name="M:Neurotec.IO.NStream.CopyTo(Neurotec.IO.NStream,System.Int32)">
            <summary>
            Copies the current stream to another stream with specified buffer size.
            </summary>
            <param name="dstStream">Destination stream.</param>
            <param name="bufferSize">Buffer size.</param>
        </member>
        <member name="M:Neurotec.IO.NStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">New desired length of the current stream
                                in bytes. </param>                      
        </member>
        <member name="M:Neurotec.IO.NStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin
                                 parameter. </param>
            <param name="origin">A value indicating the reference point
                                 used to obtain the new position. </param>
            <returns>
            The new position within the current stream.
            </returns>                                                    
        </member>
        <member name="M:Neurotec.IO.NStream.ReadByte">
            <summary>
            Reads a byte from the stream.
            </summary>
            <returns>
            Value of byte at current position in a stream.
            </returns>                                    
        </member>
        <member name="M:Neurotec.IO.NStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream.
            </summary>
            <param name="value">The byte to write to the stream. </param>
        </member>
        <member name="M:Neurotec.IO.NStream.Read(Neurotec.IO.NBuffer)">
            <summary>
            Reads a sequence of bytes from the current stream.
            </summary>
            <param name="buffer">Memory buffer.</param>
            <returns>
            Number of bytes successfully read. 
            </returns>                                                 
        </member>
        <member name="M:Neurotec.IO.NStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream.
            </summary>
            <param name="buffer">Destination array. The locations with index range from offset to (offset+count\-1) will be replaced by the bytes read from the current source.
                                </param>
            <param name="offset">The zero\-based byte offset in buffer
                                 at which to begin storing the data read
                                 from the current stream. </param>
            <param name="count">Number of bytes to be read from the
                                current stream. </param>
            <returns>
            Number of bytes successfully read.
            </returns>                                                   
        </member>
        <member name="M:Neurotec.IO.NStream.Write(Neurotec.IO.NBuffer)">
            <summary>
            Writes a content of a buffer to the current stream.
            </summary>
            <param name="buffer">Memory buffer.</param>
        </member>
        <member name="M:Neurotec.IO.NStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream.
            </summary>
            <param name="buffer">An array of bytes.</param>
            <param name="offset">The zero\-based byte offset in buffer
                                 at which to begin copying bytes to the
                                 current stream. </param>
            <param name="count">Number of bytes to be written to the
                                current stream.</param>                
        </member>
        <member name="M:Neurotec.IO.NStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered
            data to be written to the underlying device.
            </summary>                                                
        </member>
        <member name="M:Neurotec.IO.NStream.AsStream">
            <summary>
            Converts the current NStream into a data stream.
            </summary>
            <returns>The data stream.</returns>
        </member>
        <member name="P:Neurotec.IO.NStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports
            reading. 
            </summary>                                                 
        </member>
        <member name="P:Neurotec.IO.NStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports
            writing. 
            </summary>                                                 
        </member>
        <member name="P:Neurotec.IO.NStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports
            seeking. 
            </summary>                                                 
        </member>
        <member name="P:Neurotec.IO.NStream.Length">
            <summary>
            Gets size of a stream in bytes. 
            </summary>                      
        </member>
        <member name="P:Neurotec.IO.NStream.Position">
            <summary>
            Gets number of bytes from the start of the data to the
            current position in a stream. 
            </summary>                                            
        </member>
        <member name="T:Neurotec.Plugins.ComponentModel.NPluginEventDescriptor">
            <summary>
            Provides functionality for creating plugin event descriptors.
            </summary>
        </member>
        <member name="P:Neurotec.Plugins.ComponentModel.NPluginEventDescriptor.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="T:Neurotec.Plugins.ComponentModel.NPluginMethodDescriptor">
            <summary>
            Provides functionality for creating plugin method descriptors.
            </summary>
        </member>
        <member name="P:Neurotec.Plugins.ComponentModel.NPluginMethodDescriptor.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="T:Neurotec.Plugins.ComponentModel.NPluginPropertyDescriptor">
            <summary>
            Provides functionality for creating plugin property descriptors.
            </summary>
        </member>
        <member name="P:Neurotec.Plugins.ComponentModel.NPluginPropertyDescriptor.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.Plugins.NDataFileBuilder.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="T:Neurotec.Plugins.NDataFileManager">
            <summary>
            Provides functions for managing Neurotechnology data files (*.Ndf). Data files are dependencies
            required by NBiometricEngine.
            </summary>                                                                                     
        </member>
        <member name="P:Neurotec.Plugins.NDataFileManager.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.Plugins.NDataFileManager.Instance">
            <summary>
            Gets NDataFileManager instance.
            </summary>
            <value>
            NDataFileManager object.
            </value>                       
        </member>
        <member name="M:Neurotec.Plugins.NDataFileManager.AddFile(System.String)">
            <summary>
            Adds data file (*.ndf) to NDataFileManager. This method is used when only several data files are
            required.
            </summary>
            <param name="fileName">String containing file name or full path to file.</param>                
        </member>
        <member name="M:Neurotec.Plugins.NDataFileManager.AddFromDirectory(System.String,System.Boolean)">
            <summary>
            Adds all data file from specified directory to NDataFileManager.
            </summary>
            <param name="directory">String containing directory path.</param>
            <param name="searchSubDirectories">If true, data files in subdirectories will be included; if false,
                                               only files from the root directory will be included.</param>     
        </member>
        <member name="M:Neurotec.Plugins.NDataFileManager.RemoveFile(System.String)">
            <summary>
            Removes specified data file from NDataFileManager.
            </summary>
            <param name="fileName">Name of a file to remove. </param>
        </member>
        <member name="M:Neurotec.Plugins.NDataFileManager.Clear">
            <summary>
            Clears all files from NDataFileManager.
            </summary>                             
        </member>
        <member name="M:Neurotec.Plugins.NDataFileManager.GetAllFiles">
            <summary>
            Gets all data files used by specified NDataFileManager.
            </summary>
            <returns>
            Data files array. 
            </returns>                                             
        </member>
        <member name="P:Neurotec.Plugins.NDataRecord.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="T:Neurotec.Plugins.NDataFile">
            <summary>
            Provides functions for working with Neurotechnology data files (*.Ndf). Data files are dependencies
            required by NBiometricEngine.
            </summary>                                                                                         
        </member>
        <member name="P:Neurotec.Plugins.NDataFile.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.Plugins.NDataFile.FileName">
            <summary>
            Gets data file name.
            </summary>
            <value>
            Data file name. 
            </value>            
        </member>
        <member name="P:Neurotec.Plugins.NDataFile.Records">
            <summary>
            Gets all records saved in data file. This property is for internal usage and in most case user should
            not call it.
            </summary>
            <value>
            Collection of records saved in data file.
            </value>                                                                                             
        </member>
        <member name="T:Neurotec.Plugins.NPluginState">
            <summary>
            Enumerates NPlugin state values. The plugin state show how
            much of initialization the plugin has performed and can be
            used to identify common problems of plugin loading.
            </summary>                                                
        </member>
        <member name="F:Neurotec.Plugins.NPluginState.None">
            <summary>
            Indicates uninitialized variable. This value should never be
            observed by the API user. 
            </summary>                                                  
        </member>
        <member name="F:Neurotec.Plugins.NPluginState.LoadError">
            <summary>
            Indicates that plugin's dynamic library (dll) failed to load.
            </summary>
        </member>
        <member name="F:Neurotec.Plugins.NPluginState.NotRecognized">
            <summary>
            Indicates that function returning plugin module handle was
            not found. If the file name of plugin library is &quot;<i>&lt;Name&gt;</i>.dll&quot;,
            the expected name of the function is &quot;<i>&lt;Name&gt;</i>ModuleOf&quot;.
            </summary>
        </member>
        <member name="F:Neurotec.Plugins.NPluginState.InvalidModule">
            <summary>
            Indicates invalid plugin module. The plugin's ModuleOf
            function (see: <see cref="F:Neurotec.Plugins.NPluginState.NotRecognized" text="NotRecognized" />)
            was found, but the returned handle was wrong.
            </summary>
        </member>
        <member name="F:Neurotec.Plugins.NPluginState.InterfaceTypeMismatch">
            <summary>
            Indicates that plugin's interface type differs from expected
            type. This means that the plugin is for other
            product/application. Interface type can be retrieved using
            NPluginModule.InterfaceType property.
            </summary>
        </member>
        <member name="F:Neurotec.Plugins.NPluginState.InterfaceVersionMismatch">
            <summary>
            Indicates that plug-in interface version mismatches. This
            means that plugin is of the right type, but has version
            incompatible with versions supported by current plugin
            loader. Interface version can be retrieved using
            NPlugin.SelectedInterfaceVersion property.               
            </summary>
        </member>
        <member name="F:Neurotec.Plugins.NPluginState.InvalidInterface">
            <summary>
            Indicates that the plugin's interface didn't pass the
            validation check. This happens when some mandatory functions
            required for plugin are missing or return wrong value.      
            </summary>
        </member>
        <member name="F:Neurotec.Plugins.NPluginState.Unplugged">
            <summary>
            Indicates that plugin is not connected into the system. The
            plugin will not be used by the system unless activated with <see cref="M:Neurotec.Plugins.NPlugin.Plug" text="NPlugin.Plug" />
            or <see cref="M:Neurotec.Plugins.NPluginManager.PlugAll" text="NPluginManager.PlugAll" />/<see cref="M:Neurotec.Plugins.NPluginManager.Refresh" text="NPluginManager.Refresh" />
            methods.                                                                                                                                                                    
            </summary>
        </member>
        <member name="F:Neurotec.Plugins.NPluginState.Unused">
            <summary>
            Indicates that plugin is activated (with <see cref="M:Neurotec.Plugins.NPlugin.Plug" text="NPlugin.Plug" />
            or <see cref="M:Neurotec.Plugins.NPluginManager.PlugAll" text="NPluginManager.PlugAll" />/<see cref="M:Neurotec.Plugins.NPluginManager.Refresh" text="NPluginManager.Refresh" />
            methods) but not currently used (not plugged into the system
            because there are no potential users of the plugin). The
            plugin will be automatically plugged once device manager of
            appropriate type is created (see: <see cref="F:Neurotec.Plugins.NPluginState.Plugged" text="Plugged" />).                                                                     
            </summary>
        </member>
        <member name="F:Neurotec.Plugins.NPluginState.Disabled">
            <summary>
            Indicates that plugin is disabled.
            </summary>
        </member>
        <member name="F:Neurotec.Plugins.NPluginState.Duplicate">
            <summary>
            Indicates that NPluginManager already contains plug-in with
            the same name.                                             
            </summary>
        </member>
        <member name="F:Neurotec.Plugins.NPluginState.IncompatibleWithOtherPlugins">
            <summary>
            Indicates that the current plugin is incompatible with other
            plugin in the system. Each plugin has a priority value which
            determines which of the incompatible plugins will be loaded.
            The plugin with the highest priority will be loaded, and
            other plugins will fail with npsIncompatibleWithOtherPlugins
            state.                                                      
            </summary>
        </member>
        <member name="F:Neurotec.Plugins.NPluginState.PluggingError">
            <summary>
            Indicates that an error occurred when plugging the plug-in.
            NPlugin.Rrror property can be used to retrieve exception. 
            </summary>
        </member>
        <member name="F:Neurotec.Plugins.NPluginState.Plugged">
            <summary>
            Indicates that plugin is activated and the provided
            functionality can be used by the system. If all the device
            managers enumerating the devices provided by the current
            plugin are terminated, the plugin will be automatically
            unplugged and it's state changed to <see cref="F:Neurotec.Plugins.NPluginState.Unused" text="Unused" />.
            </summary>
        </member>
        <member name="T:Neurotec.Plugins.NPlugin">
            <summary>
            Plug-in management framework for use in other Neurotechnology
            components.
            </summary>                                                   
        </member>
        <member name="P:Neurotec.Plugins.NPlugin.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.Plugins.NPlugin.NPluginStateNativeType">
            <summary>
            Defines the native type of the plugin state.
            </summary>
        </member>
        <member name="M:Neurotec.Plugins.NPlugin.Plug">
            <summary>
            Plugs specified plug-in to the system.
            </summary>
            <remarks>
            The requested plugin might not be plugged into the system
            immediately. If there is no potential users (device managers)
            for provided device types, the plugin's state will be set to <see cref="F:Neurotec.Plugins.NPluginState.Unused" text="Unused" />.
            The plugin will be automatically plugged later, once device
            manager of appropriate type is created.
            </remarks>                                                                                                                     
        </member>
        <member name="M:Neurotec.Plugins.NPlugin.Unplug">
            <summary>
            Unplugs specified plug-in from the system.
            </summary>
            <remarks>
              * The function is not mandatory as plugin will be unplugged
                automatically when it becomes unused. Not calling a function
                would have effect that plugin would be later plugged
                automatically when needed.
              * If the function is called the plugin's state will be set
                to <see cref="F:Neurotec.Plugins.NPluginState.Unplugged" text="Unplugged" />
                and plugin will not be automatically plugged later.
              * The function can be used to force unplug even if devices
                provided by the plugin are still in use.
            
            </remarks>                                                                    
        </member>
        <member name="M:Neurotec.Plugins.NPlugin.Enable">
            <summary>
            Enables NPlugin.
            </summary>      
        </member>
        <member name="M:Neurotec.Plugins.NPlugin.Disable">
            <summary>
            Disables NPlugin
            </summary>      
        </member>
        <member name="P:Neurotec.Plugins.NPlugin.Owner">
            <summary>
            Gets the manager of the plugin.
            </summary>
            <value>
            Reference to NPluginManager
            </value>    
        </member>
        <member name="P:Neurotec.Plugins.NPlugin.FileName">
            <summary>
            Gets plug-in library name.
            </summary>
            <value>
            String which contains plug-in file name. 
            </value>                                 
        </member>
        <member name="P:Neurotec.Plugins.NPlugin.LoadTime">
            <summary>
            Gets plug-in load time.
            </summary>
            <value>
            TimeSpan structure with plugin load time. 
            </value>                                  
        </member>
        <member name="P:Neurotec.Plugins.NPlugin.State">
            <summary>
            Gets the state of specified plugin.
            </summary>
            <value>
            NPluginState object. 
            </value>                           
        </member>
        <member name="P:Neurotec.Plugins.NPlugin.SelectedInterfaceVersion">
            <summary>
            Gets current version of plugin interface.
            </summary>
            <value>
            NVersion value.
            </value>                                 
        </member>
        <member name="P:Neurotec.Plugins.NPlugin.PlugTime">
            <summary>
            Gets plug-in plug time.
            </summary>
            <value>
            TimeSpan structure with plugin load time. 
            </value>                                  
        </member>
        <member name="P:Neurotec.Plugins.NPlugin.Module">
            <summary>
            \Gets NPluginModule object.
            </summary>                    
        </member>
        <member name="T:Neurotec.Plugins.NPluginManagerPluginEventArgs">
            <summary>
            Base class for holding NPluginManager events data.
            </summary>                                         
        </member>
        <member name="M:Neurotec.Plugins.NPluginManagerPluginEventArgs.#ctor(Neurotec.Plugins.NPlugin)">
            <summary>
            Plugin constructor.
            </summary>
            <param name="plugin">The plugin associated with event.</param>
        </member>
        <member name="P:Neurotec.Plugins.NPluginManagerPluginEventArgs.Plugin">
            <summary>
            Gets Plugin associated with event raised by PluginManager.
            </summary>
            <value>
            NPlugin object.
            </value>                                                  
        </member>
        <member name="T:Neurotec.Plugins.NPluginManager">
            <summary>
            Provides functions for working with plugins.
            </summary>                                  
        </member>
        <member name="T:Neurotec.Plugins.NPluginManager.PluginCollection">
            <summary>
            Represents collection of plugins.
            </summary>
            <remarks>
            To iterate over the collection use the interfaces supported
            by the base class: NObjectReadOnlyCollection.
            </remarks>                                                                                                                    
        </member>
        <member name="M:Neurotec.Plugins.NPluginManager.PluginCollection.Add(Neurotec.Plugins.NPluginModule,System.String)">
            <summary>
            Adds plugin and its dependencies (if exist) from specified
            directory.
            </summary>
            <param name="module">Plugin module.</param>
            <param name="directory">Directory where plugin and its
                                    dependencies (if exist) are saved.</param>
            <returns>
            Added plugin. 
            </returns>                                                        
        </member>
        <member name="M:Neurotec.Plugins.NPluginManager.PluginCollection.Add(System.String)">
            <summary>
            Adds plugin from user specified file.
            </summary>
            <param name="fileName">\File name where plugin is saved.</param>
            <returns>
            Added plugin.
            </returns>
            <remarks>
            This method automatically searches for library dependencies
            in the directory of the plugin library (specified in f<i>ileName</i>).
            
            </remarks>                                                            
        </member>
        <member name="M:Neurotec.Plugins.NPluginManager.PluginCollection.IndexOf(System.String)">
            <summary>
            Retrieves the index of the plugin specified by name.
            </summary>
            <param name="name">The name of the plugin.</param>
            <returns>The index of the plugin.</returns>
        </member>
        <member name="P:Neurotec.Plugins.NPluginManager.PluginCollection.Item(System.String)">
            <summary>
            Retrieves a plugin specified by name.
            </summary>
            <param name="name">Plugin name.</param>
            <returns>NPlugin object.</returns>
        </member>
        <member name="T:Neurotec.Plugins.NPluginManager.DisabledPluginCollection">
            <summary>
            Represents collection of plugin names for plugins that will
            be disabled.
            </summary>
            <remarks>
            To view or modify the collection use the methods from the
            base class: <see cref="T:Neurotec.Collections.ObjectModel.StringCollection" text="StringCollection" />.
            </remarks>                                                                                             
        </member>
        <member name="P:Neurotec.Plugins.NPluginManager.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Plugins.NPluginManager.GetInstances">
            <summary>
            Gets instance of the objects.
            </summary>
            <returns>Array of object instances.</returns>
        </member>
        <member name="M:Neurotec.Plugins.NPluginManager.EnsurePluginSearchPerformed">
            <summary>
            Checks if initial plugin search was performed and if not calls Refresh
            </summary>            
        </member>
        <member name="M:Neurotec.Plugins.NPluginManager.Refresh">
            <summary>
            Refreshes plugins list
            </summary>            
        </member>
        <member name="M:Neurotec.Plugins.NPluginManager.PlugAll">
            <summary>
            Plugs all plugins into the system.
            </summary>                        
        </member>
        <member name="M:Neurotec.Plugins.NPluginManager.UnplugAll">
            <summary>
            Unplugs all plugins.
            </summary>          
        </member>
        <member name="M:Neurotec.Plugins.NPluginManager.GetInterfaceVersions">
            <summary>
            \Returns the range of supported interface versions by
            specified NPluginManager.
            </summary>
            <returns>
            NVersionRange array with all supported interface version
            values.
            </returns>                                              
        </member>
        <member name="P:Neurotec.Plugins.NPluginManager.PluginSearchPath">
            <summary>
            Gets or sets plugins and its dependencies search path.
            </summary>
            <value>
            Plugin search path.
            </value>                                              
        </member>
        <member name="P:Neurotec.Plugins.NPluginManager.InterfaceType">
            <summary>
            Gets NPluginManager interface type name.
            </summary>
            <value>
            String with NPluginManager interface name. 
            </value>                                   
        </member>
        <member name="P:Neurotec.Plugins.NPluginManager.AllowsUnplug">
            <summary>
            Checks whether PlugAll and UnplugAll methods work
            </summary>
            <value>
            Bool value. 
            </value>                                         
        </member>
        <member name="P:Neurotec.Plugins.NPluginManager.Plugins">
            <summary>
            Gets collection of all plugins in NPluginManager.
            </summary>
            <value>
            Plugins collection. 
            </value>                                         
        </member>
        <member name="P:Neurotec.Plugins.NPluginManager.DisabledPlugins">
            <summary>
            Gets disabled plugins collection.
            </summary>
            <value>
            Collection of names of plugins that are disabled. 
            </value>                                          
        </member>
        <member name="T:Neurotec.Plugins.NPluginModule">
            <summary>
            The module providing one or more plugins.
            </summary>
        </member>
        <member name="P:Neurotec.Plugins.NPluginModule.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Plugins.NPluginModule.#ctor">
            <summary>
            Creates a new instance of NPluginModule class.
            </summary>
        </member>
        <member name="M:Neurotec.Plugins.NPluginModule.GetInterfaceVersions">
            <summary>
            \Returns the range of supported interface versions by current
            NPluginModule object.
            </summary>
            <returns>
            <paraattr align="justify">
            NVersionRange array with all supported interface version
            values.
            </paraattr>
            </returns>
            Note
            NVersionRange* and NVersion* macros can be used to parse 
            version range.                                              
        </member>
        <member name="P:Neurotec.Plugins.NPluginModule.PluginName">
            <summary>
            Gets plugin name.
            </summary>
            <value>
            String with plugin name. 
            </value>                 
        </member>
        <member name="P:Neurotec.Plugins.NPluginModule.InterfaceType">
            <summary>
            Gets plugin interface type name.
            </summary>
            <value>
            String with plugin interface type name. 
            </value>                                
        </member>
        <member name="P:Neurotec.Plugins.NPluginModule.Priority">
            <summary>
            Gets plugin priority over other plugins.
            </summary>
            <value>
            Plugin priority over other plugins.
            </value>
            <remarks>
            Priority influences plugins adding to the system. If two or
            more plugins are incompatible or duplicate plugins exist
            plugin with higher priority will be added to the system.
            Priority is set during plugin compilation.
            
            Default plugin priority is 0.
            </remarks>                                                 
        </member>
        <member name="P:Neurotec.Plugins.NPluginModule.IncompatiblePlugins">
            <summary>
            Gets the list of incompatible plugins.
            </summary>
            <value>
            String with incompatible plugin names. Plugin names are
            separated by semicolons (;).
            </value>
            <remarks>
            <paraattr align="justify">
            This property retrieves only the list of incompatible plug-in
            names. Plug-in file names can be retrieved using FileName
            property.
            </paraattr>
            </remarks>                                                   
        </member>
        <member name="T:Neurotec.Reflection.NArrayCollectionInfo">
            <summary>
            Provides functionality to retrieve information about array collections.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NArrayCollectionInfo.ItemStdValueCollection">
            <summary>
            A collection of standard item values.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.BaseCollection">
            <summary>
            Retrieves the base collection of the array collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.ItemType">
            <summary>
            Retrieves the type of items in the array collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.ItemAttributes">
            <summary>
            Retrieves the attributes of items in the array collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.ItemFormat">
            <summary>
            Retrieves the type of items in the array collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.ItemMinValue">
            <summary>
            Retrieves the minimal item value.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.ItemMaxValue">
            <summary>
            Retrieves the maximal item value.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.GetCountMethod">
            <summary>
            Retrieves the method which gets the number of items in the array collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.GetMethod">
            <summary>
            Retrieves the method which gets an item in the array collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.ToArrayMethod">
            <summary>
            Retrieves the method which converts the array collection into a regular array.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.SetMethod">
            <summary>
            Retrieves the method which sets an item of the array collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.AddMethod">
            <summary>
            Retrieves the method which adds an item to an array collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.AddRangeMethod">
            <summary>
            Retrieves the method which adds a range of items to an array collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.InsertMethod">
            <summary>
            Retrieves the method which adds an item to an array collection at a specific index.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.InsertRangeMethod">
            <summary>
            Retrieves the method which adds a range of items to an array collection at a specific index.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.RemoveMethod">
            <summary>
            Retrieves the method which removes an item from an array collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.IndexOfMethod">
            <summary>
            Retrieves the method which gets an index of an item in the array collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.RemoveAtMethod">
            <summary>
            Retrieves the method which removes an item with specific index from an array collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.RemoveRangeMethod">
            <summary>
            Retrieves the method which removes a range of items from an array collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.ClearMethod">
            <summary>
            Retrieves the method which clears the array collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NArrayCollectionInfo.ItemStdValues">
            <summary>
            Retrieves the collection of standard item values.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NDictionaryInfo">
            <summary>
            Provides functionality to retrieve information about dictionaries.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NDictionaryInfo.KeyStdValueCollection">
            <summary>
            A collection of standard item key values.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NDictionaryInfo.ValueStdValueCollection">
            <summary>
            A collection of standard item values.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.ItemType">
            <summary>
            Retrieves the type of items in the dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.ItemAttributes">
            <summary>
            Retrieves the attributes of items in the dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.KeyType">
            <summary>
            Retrieves the type of item keys in the dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.KeyAttributes">
            <summary>
            Retrieves the attributes of item keys in the dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.KeyFormat">
            <summary>
            Retrieves the type of item keys in the dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.KeyMinValue">
            <summary>
            Retrieves the minimal item key value.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.KeyMaxValue">
            <summary>
            Retrieves the maximal item key value.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.ValueType">
            <summary>
            Retrieves the type of item values in the dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.ValueAttributes">
            <summary>
            Retrieves the attributes of item values in the dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.ValueFormat">
            <summary>
            Retrieves the type of item values in the dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.ValueMinValue">
            <summary>
            Retrieves the minimal item value.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.ValueMaxValue">
            <summary>
            Retrieves the maximal item value.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.GetCountMethod">
            <summary>
            Retrieves the method which gets the number of items in the dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.GetAtMethod">
            <summary>
            Retrieves the method which gets an item in the dictionary specified by index.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.ToArrayMethod">
            <summary>
            Retrieves the method which converts the dictionary into an array.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.GetKeyMethod">
            <summary>
            Retrieves the method which gets a key of an item in the dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.ToKeyArrayMethod">
            <summary>
            Retrieves the method which converts the dictionary into an array of item keys.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.GetValueMethod">
            <summary>
            Retrieves the method which gets a value of an item in the dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.ToValueArrayMethod">
            <summary>
            Retrieves the method which converts the dictionary into an array of item values.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.AddPairMethod">
            <summary>
            Retrieves the method which adds a key-value pair to a dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.RemoveAtMethod">
            <summary>
            Retrieves the method which removes an item with specific index from the dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.ClearMethod">
            <summary>
            Retrieves the method which clears the dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.ContainsMethod">
            <summary>
            Retrieves the method which checks whether a dictionary contains a specific value.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.GetMethod">
            <summary>
            Retrieves the method which gets an item in the dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.TryGetMethod">
            <summary>
            Retrieves the method which gets an item in the dictionary and returns a Boolean value indicating success.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.AddMethod">
            <summary>
            Retrieves the method which adds an item to a dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.SetMethod">
            <summary>
            Retrieves the method which sets a value of an item in the dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.RemoveMethod">
            <summary>
            Retrieves the method which removes an item from a dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.AddCollectionChangedMethod">
            <summary>
            Retrieves the method which adds a "collection changed" event to a dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.AddCollectionChangedCallbackMethod">
            <summary>
            Retrieves the method which adds a "collection changed" event callback to a dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.RemoveCollectionChangedMethod">
            <summary>
            Retrieves the method which removes a "collection changed" event from a dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.RemoveCollectionChangedCallbackMethod">
            <summary>
            Retrieves the method which removes a "collection changed" event callback from a dictionary.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.KeyStdValues">
            <summary>
            Retrieves the collection of standard item keys.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NDictionaryInfo.ValueStdValues">
            <summary>
            Retrieves the collection of standard item values.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NEnumConstantInfo">
            <summary>
            Provides functionality to retrieve information about enumeration constants.
            </summary>                                                                 
        </member>
        <member name="P:Neurotec.Reflection.NEnumConstantInfo.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NEnumConstantInfo.Value">
            <summary>
            Gets the value of the current enum constant.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NCollectionInfo">
            <summary>
            Provides functionality to retrieve information about collections.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NCollectionInfo.ItemStdValueCollection">
            <summary>
            A collection of standard item values.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.ItemType">
            <summary>
            Retrieves the type of items in the collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.ItemAttributes">
            <summary>
            Retrieves the attributes of items in the collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.ItemFormat">
            <summary>
            Retrieves the type of items in the collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.ItemMinValue">
            <summary>
            Retrieves the minimal item value.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.ItemMaxValue">
            <summary>
            Retrieves the maximal item value.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.GetCountMethod">
            <summary>
            Retrieves the method which gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.GetMethod">
            <summary>
            Retrieves the method which gets an item in the collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.ToArrayMethod">
            <summary>
            Retrieves the method which converts the collection into a regular array.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.GetCapacityMethod">
            <summary>
            Retrieves the method which gets the maximum number of items in the collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.SetCapacityMethod">
            <summary>
            Retrieves the method which sets the maximum number of items in the collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.SetMethod">
            <summary>
            Retrieves the method which sets an item of the collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.AddMethod">
            <summary>
            Retrieves the method which adds an item to a collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.AddRangeMethod">
            <summary>
            Retrieves the method which adds a range of items to a collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.InsertMethod">
            <summary>
            Retrieves the method which adds an item to a collection at a specific index.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.InsertRangeMethod">
            <summary>
            Retrieves the method which adds a range of items to a collection at a specific index.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.RemoveMethod">
            <summary>
            Retrieves the method which removes an item from a collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.IndexOfMethod">
            <summary>
            Retrieves the method which gets an index of an item in the collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.RemoveAtMethod">
            <summary>
            Retrieves the method which removes an item with specific index from a collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.RemoveRangeMethod">
            <summary>
            Retrieves the method which removes a range of items from a collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.ClearMethod">
            <summary>
            Retrieves the method which clears the collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.AddCollectionChangedMethod">
            <summary>
            Retrieves the method which adds a "collection changed" event to a collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.AddCollectionChangedCallbackMethod">
            <summary>
            Retrieves the method which adds a "collection changed" event callback to a collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.RemoveCollectionChangedMethod">
            <summary>
            Retrieves the method which removes a "collection changed" event from a collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.RemoveCollectionChangedCallbackMethod">
            <summary>
            Retrieves the method which removes a "collection changed" event callback from a collection.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NCollectionInfo.ItemStdValues">
            <summary>
            Retrieves the collection of standard item values.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NObjectPartInfo">
            <summary>
            Provides functionality to retrieve information about object parts.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NObjectPartInfo.DeclaredConstantCollection">
            <summary>
            Collection of declared constants.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NObjectPartInfo.DeclaredMethodCollection">
            <summary>
            Collection of declared methods.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NObjectPartInfo.DeclaredPropertyCollection">
            <summary>
            Collection of declared properties.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NObjectPartInfo.DeclaredEventCollection">
            <summary>
            Collection of declared events.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NObjectPartInfo.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Reflection.NObjectPartInfo.GetDeclaredConstant(System.String)">
            <summary>
            Retrieves the specified declared constant.
            </summary>
            <param name="name">Name of the constant.</param>
            <returns>The declared constant.</returns>
        </member>
        <member name="M:Neurotec.Reflection.NObjectPartInfo.GetDeclaredMethod(System.String)">
            <summary>
            Retrieves the specified declared method.
            </summary>
            <param name="name">Name of the method.</param>
            <returns>The declared method.</returns>
        </member>
        <member name="M:Neurotec.Reflection.NObjectPartInfo.GetDeclaredMethods(System.String)">
            <summary>
            Retrieves the specified declared methods.
            </summary>
            <param name="name">Names of the methods.</param>
            <returns>An array of declared methods.</returns>
        </member>
        <member name="M:Neurotec.Reflection.NObjectPartInfo.GetDeclaredProperty(System.String)">
            <summary>
            Retrieves the specified declared property.
            </summary>
            <param name="name">Name of the property.</param>
            <returns>The declared property.</returns>
        </member>
        <member name="M:Neurotec.Reflection.NObjectPartInfo.GetDeclaredEvent(System.String)">
            <summary>
            Retrieves the specified declared event.
            </summary>
            <param name="name">Name of the event.</param>
            <returns>The declared event.</returns>
        </member>
        <member name="M:Neurotec.Reflection.NObjectPartInfo.GetObjectPart(Neurotec.NObject)">
            <summary>
            Retrieves the part of the specified object.
            </summary>
            <param name="object">The object to retrieve a part of.</param>
            <returns>The object part.</returns>
        </member>
        <member name="P:Neurotec.Reflection.NObjectPartInfo.PropertyName">
            <summary>
            Retrieves the name of an object part property.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NObjectPartInfo.DeclaredConstants">
            <summary>
            Retrieves the collection of declared constants.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NObjectPartInfo.DeclaredMethods">
            <summary>
            Retrieves the collection of declared methods.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NObjectPartInfo.DeclaredProperties">
            <summary>
            Retrieves the collection of declared proeprties.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NObjectPartInfo.DeclaredEvents">
            <summary>
            Retrieves the collection of declared events.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NMemberInfo">
            <summary>
            Provides functionality to retrieve information about class members.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NMemberInfo.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NMemberInfo.DeclaringType">
            <summary>
            Gets the declaring type of the member.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NMemberInfo.Name">
            <summary>
            Gets member name.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NMemberInfo.Attributes">
            <summary>
            Gets member attributes.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NMethodInfo">
            <summary>
            Provides functions for getting information about property.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NMethodInfo.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NParameterInfo">
            <summary>
            Provides functions for getting information about parameter.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NParameterInfo.StdValueCollection">
            <summary>
            Represents an array of standard parameter values.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NParameterInfo.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NParameterInfo.Name">
            <summary>
            Gets parameter name.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NParameterInfo.ParameterType">
            <summary>
            Gets the type of the parameter.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NParameterInfo.Attributes">
            <summary>
            Gets parameter attributes.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NParameterInfo.Format">
            <summary>
            Gets the format of the current parameter.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NParameterInfo.DefaultValue">
            <summary>
            Gets the default value of the current parameter.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NParameterInfo.MinValue">
            <summary>
            Gets the minimum value of the current parameter.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NParameterInfo.MaxValue">
            <summary>
            Gets the maximum value of the current parameter.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NParameterInfo.StdValues">
            <summary>
            Gets the collection of standard values for the current parameter.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NConstantInfo">
            <summary>
            Provides functionality to retrieve information about constants.
            </summary>                                                     
        </member>
        <member name="P:Neurotec.Reflection.NConstantInfo.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NConstantInfo.ConstantType">
            <summary>
            Gets the type of the constant.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NConstantInfo.Value">
            <summary>
            Gets the value of the current constant.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NEventInfo">
            <summary>
            Provides functionality to retrieve information about events.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NEventInfo.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Reflection.NEventInfo.AddHandler(Neurotec.NObject,System.Delegate)">
            <summary>
            Binds the event to the object.
            </summary>
            <param name="object">The object the event binds to.</param>
            <param name="value">The event delegate.</param>
        </member>
        <member name="M:Neurotec.Reflection.NEventInfo.RemoveHandler(Neurotec.NObject,System.Delegate)">
            <summary>
            Unbinds the delegate from the object so that the delegate will no longer receive events from the object.
            </summary>
            <param name="object">The object the event binds to.</param>
            <param name="value">The event delegate.</param>
        </member>
        <member name="P:Neurotec.Reflection.NEventInfo.EventType">
            <summary>
            Gets the type of the event.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NEventInfo.AddMethod">
            <summary>
            Retrieves a method which adds an event.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NEventInfo.AddCallbackMethod">
            <summary>
            Retrieves the method which adds a callback to the event.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NEventInfo.RemoveMethod">
            <summary>
            Retrieves a method which removes an event.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NEventInfo.RemoveCallbackMethod">
            <summary>
            Retrieves the method which removes a callback from the event.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NPropertyInfo">
            <summary>
            Provides functionality to retrieve and change information about properties.
            </summary>
        </member>
        <member name="T:Neurotec.Reflection.NPropertyInfo.StdValueCollection">
            <summary>
            Represents an array of standard property values.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NPropertyInfo.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.Reflection.NPropertyInfo.GetValue(Neurotec.NObject)">
            <summary>
            Retrieves the value of the component.
            </summary>
            <param name="object">The object to get value of.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Neurotec.Reflection.NPropertyInfo.SetValue(Neurotec.NObject,System.Object)">
            <summary>
            Sets the value of the specified component.
            </summary>
            <param name="object">The object to set value of.</param>
            <param name="value">The new value of the property.</param>
        </member>
        <member name="M:Neurotec.Reflection.NPropertyInfo.CanResetValue">
            <summary>
            Checks whether the value of the property can be reset.
            </summary>
            <returns>true if the property's value can be reset; else false.</returns>
        </member>
        <member name="M:Neurotec.Reflection.NPropertyInfo.ResetValue(Neurotec.NObject)">
            <summary>
            Resets the value of the specified property.
            </summary>
            <param name="object">The object to reset property for.</param>
        </member>
        <member name="P:Neurotec.Reflection.NPropertyInfo.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NPropertyInfo.Format">
            <summary>
            Gets the format of the property.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NPropertyInfo.DefaultValue">
            <summary>
            Gets the default value of the property.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NPropertyInfo.MinValue">
            <summary>
            Gets the minimum value of the property.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NPropertyInfo.MaxValue">
            <summary>
            Gets the maximum value of the property.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NPropertyInfo.GetMethod">
            <summary>
            Retrieves the method which gets the value of the property.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NPropertyInfo.SetMethod">
            <summary>
            Retrieves the method which sets the value of the property.
            </summary>
        </member>
        <member name="P:Neurotec.Reflection.NPropertyInfo.StdValues">
            <summary>
            Gets the collection of standard values for the property.
            </summary>
        </member>
        <member name="T:Neurotec.INeurotecException">
            <summary>
            The interface that provides information about Neurotec exceptions.
            </summary>
        </member>
        <member name="P:Neurotec.INeurotecException.Code">
            <summary>
            Gets an error code of the current exception.
            </summary>
        </member>
        <member name="T:Neurotec.Interop.ArrayArray">
            <summary>
            Provides object array management functionality.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.ArrayArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of ObjectArray class.
            </summary>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.ArrayArray.#ctor(System.Array[])">
            <summary>
            Initializes a new instance of ObjectArray class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Neurotec.Interop.ArrayArray.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of ObjectArray class.
            </summary>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsHandles">Whether the array own object handles.</param>
        </member>
        <member name="M:Neurotec.Interop.ArrayArray.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of ObjectArray class.
            </summary>
            <param name="ptr">Pointer to the array.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.ArrayArray.#ctor(System.IntPtr,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of ObjectArray class.
            </summary>
            <param name="ptr">Pointer to the </param>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsPtr">Whether the array owns the pointer.</param>
            <param name="ownsHandles">Whether the array owns object handles.</param>
        </member>
        <member name="M:Neurotec.Interop.ArrayArray.CopyTo(System.Array,System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.ArrayArray.CopyTo(System.Array[],System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.ArrayArray.ToValue">
            <summary>
            Converts the current object to specific value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="T:Neurotec.Interop.DateTimeArray">
            <summary>
            Provides unsigned integer array management.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.DateTimeArray.#ctor(System.Int32,System.DateTimeKind)">
            <summary>
            Initializes a new instance of DateTimeArray class.
            </summary>
            <param name="count">Number of elements in the array.</param>
            <param name="kind">The kind of the date time values.</param>
        </member>
        <member name="M:Neurotec.Interop.DateTimeArray.#ctor(System.Int64[],System.DateTimeKind)">
            <summary>
            Initializes a new instance of DateTimeArray class.
            </summary>
            <param name="array">The array.</param>
            <param name="kind">The kind of the date time values.</param>
        </member>
        <member name="M:Neurotec.Interop.DateTimeArray.#ctor(System.Int64[],System.Int32,System.Int32,System.DateTimeKind)">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index in the array.</param>
            <param name="arrayCount">Number of elements in the array.</param>
            <param name="kind">The kind of the date time values.</param>
        </member>
        <member name="M:Neurotec.Interop.DateTimeArray.#ctor(System.Int64,System.Int32,System.DateTimeKind)">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="value">Element value.</param>
            <param name="count">Number of elements in the array.</param>
            <param name="kind">The kind of the date time values.</param>
        </member>
        <member name="M:Neurotec.Interop.DateTimeArray.#ctor(System.DateTime[],System.DateTimeKind)">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="array">The array.</param>
            <param name="kind">The kind of the date time values.</param>
        </member>
        <member name="M:Neurotec.Interop.DateTimeArray.#ctor(System.DateTime[],System.Int32,System.Int32,System.DateTimeKind)">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index in the array.</param>
            <param name="arrayCount">Number of elements in the array.</param>
            <param name="kind">The kind of the date time values.</param>
        </member>
        <member name="M:Neurotec.Interop.DateTimeArray.#ctor(System.DateTime,System.Int32,System.DateTimeKind)">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="value">Element value.</param>
            <param name="count">Number of elements in the array.</param>
            <param name="kind">The kind of the date time values.</param>
        </member>
        <member name="M:Neurotec.Interop.DateTimeArray.#ctor(System.IntPtr,System.Int32,System.DateTimeKind)">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="ptr">Pointer to the array.</param>
            <param name="count">Number of elements in the array.</param>
            <param name="kind">The kind of the date time values.</param>
        </member>
        <member name="M:Neurotec.Interop.DateTimeArray.#ctor(System.IntPtr,System.Int32,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="ptr">Pointer to the array.</param>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsPtr">Whether the array own the pointer.</param>
            <param name="kind">The kind of the date time values.</param>
        </member>
        <member name="M:Neurotec.Interop.DateTimeArray.CopyTo(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.DateTimeArray.ToDateTimeArray(System.Int32)">
            <summary>
            Converts the current object to DateTime array.
            </summary>
            <param name="realCount">Number of elements in the array.</param>
            <returns>Integer array.</returns>
        </member>
        <member name="M:Neurotec.Interop.DateTimeArray.CopyTo(System.DateTime[],System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
        </member>
        <member name="M:Neurotec.Interop.DateTimeArray.ToDateTimeArray">
            <summary>
            Converts the current object to DateTime array.
            </summary>
            <returns>Integer array.</returns>
        </member>
        <member name="M:Neurotec.Interop.DateTimeArray.ToDateTimeValue">
            <summary>
            Converts the current object to DateTime value.
            </summary>
            <returns>The integer value.</returns>
        </member>
        <member name="T:Neurotec.Interop.DisposableValueTypeArray">
            <summary>
            Provides disposable structure array management functionality.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.DisposableValueTypeArray.#ctor(System.Type,System.Type,System.Int32)">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="type">Element type.</param>
            <param name="nativeType">Native element type.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.DisposableValueTypeArray.#ctor(System.Type,System.Type,System.Array)">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="type">Element type.</param>
            <param name="nativeType">Native element type.</param>
            <param name="array">The array.</param>
        </member>
        <member name="M:Neurotec.Interop.DisposableValueTypeArray.#ctor(System.Type,System.Type,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="type">Element type.</param>
            <param name="nativeType">Native element type.</param>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsValues">Whether the array owns values.</param>
        </member>
        <member name="M:Neurotec.Interop.DisposableValueTypeArray.#ctor(System.Type,System.Type,System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="type">Element type.</param>
            <param name="nativeType">Native element type.</param>
            <param name="ptr">Pointer to the array.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.DisposableValueTypeArray.#ctor(System.Type,System.Type,System.IntPtr,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="type">Element type.</param>
            <param name="nativeType">Native element type.</param>
            <param name="ptr">Pointer to the </param>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsPtr">Whether the array owns the pointer.</param>
            <param name="ownsValues">Whether the array owns values.</param>
        </member>
        <member name="M:Neurotec.Interop.DisposableValueTypeArray.CopyTo(System.Array,System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="T:Neurotec.Interop.DisposableValueTypeArray`2">
            <summary>
            Provides disposable structure array management functionality.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.DisposableValueTypeArray`2.#ctor(Neurotec.NTypes.NativeStructToStruct{`0,`1},Neurotec.NTypes.DisposeNativeStruct{`1},System.Int32)">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="toStruct">Delegate to use when converting native structure to managed one.</param>
            <param name="dispose">Delegate to use when disposing native structure.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.DisposableValueTypeArray`2.#ctor(Neurotec.NTypes.NativeStructToStruct{`0,`1},Neurotec.NTypes.CreateNativeStruct{`0,`1},Neurotec.NTypes.DisposeNativeStruct{`1},`0[])">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="toStruct">Delegate to use when converting native structure to managed one.</param>
            <param name="create">Delegate to use when converting managed structure to native one.</param>
            <param name="dispose">Delegate to use when disposing native structure.</param>
            <param name="array">The array.</param>
        </member>
        <member name="M:Neurotec.Interop.DisposableValueTypeArray`2.#ctor(Neurotec.NTypes.NativeStructToStruct{`0,`1},Neurotec.NTypes.DisposeNativeStruct{`1},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="toStruct">Delegate to use when converting native structure to managed one.</param>
            <param name="dispose">Delegate to use when disposing native structure.</param>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsValues">Whether the array owns values.</param>
        </member>
        <member name="M:Neurotec.Interop.DisposableValueTypeArray`2.#ctor(Neurotec.NTypes.NativeStructToStruct{`0,`1},Neurotec.NTypes.DisposeNativeStruct{`1},System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="toStruct">Delegate to use when converting native structure to managed one.</param>
            <param name="dispose">Delegate to use when disposing native structure.</param>
            <param name="ptr">Pointer to the array.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.DisposableValueTypeArray`2.#ctor(Neurotec.NTypes.NativeStructToStruct{`0,`1},Neurotec.NTypes.DisposeNativeStruct{`1},System.IntPtr,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="toStruct">Delegate to use when converting native structure to managed one.</param>
            <param name="dispose">Delegate to use when disposing native structure.</param>
            <param name="ptr">Pointer to the </param>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsPtr">Whether the array owns the pointer.</param>
            <param name="ownsValues">Whether the array owns values.</param>
        </member>
        <member name="M:Neurotec.Interop.DisposableValueTypeArray`2.CopyTo(System.Array,System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.DisposableValueTypeArray`2.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.DisposableValueTypeArray`2.ToValue">
            <summary>
            Converts the current object to specific value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="T:Neurotec.Interop.HNCallback">
            <summary>
            Provides functionality for managing string handles.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.HNCallback.#ctor">
            <summary>
            Do not delete this (used by P/Invoke)
            </summary>
        </member>
        <member name="M:Neurotec.Interop.HNCallback.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of HNString class.
            </summary>
            <param name="handle">The string handle.</param>
            <param name="ownsHandle">Whether the string owns the handle.</param>
        </member>
        <member name="P:Neurotec.Interop.HNCallback.IsInvalid">
            <summary>
            Checls whether the current callback handle is invalid.
            </summary>
        </member>
        <member name="T:Neurotec.Interop.HNObject">
            <summary>
            Internal class for NObject handle in lower level API.
            <para></para><b>This class supports the .NET Framework infrastructure and is not intended to be used directly from your code.</b>
            </summary>
        </member>
        <member name="M:Neurotec.Interop.HNObject.#ctor">
            <summary>
            Do not delete this (used by P/Invoke)
            </summary>
        </member>
        <member name="M:Neurotec.Interop.HNObject.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="handle">The handle value in lower level API.</param>
            <param name="ownsHandle">Will the current object be responsible for freeing the resources associated with the handle.</param>
        </member>
        <member name="P:Neurotec.Interop.HNObject.IsInvalid">
            <summary>
            Checks if the handle is invalid.
            </summary>
        </member>
        <member name="T:Neurotec.Interop.HNString">
            <summary>
            Provides functionality for managing string handles.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.HNString.#ctor">
            <summary>
            Do not delete this (used by P/Invoke)
            </summary>
        </member>
        <member name="M:Neurotec.Interop.HNString.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of HNString class.
            </summary>
            <param name="handle">The string handle.</param>
            <param name="ownsHandle">Whether the string owns the handle.</param>
        </member>
        <member name="M:Neurotec.Interop.HNString.ToString">
            <summary>
            Converts the current handle to string.
            </summary>
            <returns>The string representation of the current handle.</returns>
        </member>
        <member name="M:Neurotec.Interop.HNString.ToCharArray">
            <summary>
            Converts the current handle to char array.
            </summary>
            <returns>The char array representing the current handle.</returns>
        </member>
        <member name="P:Neurotec.Interop.HNString.IsInvalid">
            <summary>
            Checks whether the current string handle is invalid.
            </summary>
        </member>
        <member name="T:Neurotec.Interop.IntPtrArray">
            <summary>
            Provides signed integer array management.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of IntPtrArray class.
            </summary>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.#ctor(System.IntPtr[])">
            <summary>
            Initializes a new instance of IntPtrArray class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.#ctor(System.IntPtr[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of IntPtrArray class.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index in the array.</param>
            <param name="arrayCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of IntPtrArray class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.#ctor(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of IntPtrArray class.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index in the array.</param>
            <param name="arrayCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of IntPtrArray class.
            </summary>
            <param name="value">Element value.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.#ctor(System.Int64[])">
            <summary>
            Initializes a new instance of IntPtrArray class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.#ctor(System.Int64[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of IntPtrArray class.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index in the array.</param>
            <param name="arrayCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.#ctor(System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of IntPtrArray class.
            </summary>
            <param name="value">Element value.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of IntPtrArray class.
            </summary>
            <param name="ptr">Pointer to the array.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.#ctor(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of IntPtrArray class.
            </summary>
            <param name="ptr">Pointer to the array.</param>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsPtr">Whether the array own the pointer.</param>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.CopyTo(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.ToIntArray(System.Int32)">
            <summary>
            Converts the current object to integer array.
            </summary>
            <param name="realCount">Number of elements in the array.</param>
            <returns>Integer array.</returns>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.ToIntArray">
            <summary>
            Converts the current object to integer array.
            </summary>
            <returns>Integer array.</returns>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.ToIntValue">
            <summary>
            Converts the current object to integer value.
            </summary>
            <returns>The integer value.</returns>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.CopyTo(System.Int64[],System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.ToLongArray(System.Int32)">
            <summary>
            Converts the current object to long array.
            </summary>
            <param name="realCount">Number of elements in the array.</param>
            <returns>The long array.</returns>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.CopyTo(System.Int64[],System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.ToLongArray">
            <summary>
            Converts the current object to long array.
            </summary>
            <returns>The long array.</returns>
        </member>
        <member name="M:Neurotec.Interop.IntPtrArray.ToLongValue">
            <summary>
            Converts the current object to long value.
            </summary>
            <returns>The long value.</returns>
        </member>
        <member name="T:Neurotec.Interop.NativeArray">
            <summary>
            Provides array management functionality.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.NativeArray.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of NArray class.
            </summary>
            <param name="count">Number of elements in the array.</param>
            <param name="elementSize">Size of an array element.</param>
        </member>
        <member name="M:Neurotec.Interop.NativeArray.#ctor(System.IntPtr,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of NArray class.
            </summary>
            <param name="ptr">A pointer to the array.</param>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsPtr">Whether the array owns the pointer.</param>
            <param name="elementSize">Size of an array element.</param>
        </member>
        <member name="M:Neurotec.Interop.NativeArray.CopyTo(System.Array,System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.NativeArray.ToArray(System.Int32)">
            <summary>
            Converts the current object to an array.
            </summary>
            <param name="realCount">Number of element in the array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.Interop.NativeArray.ToValue">
            <summary>
            Converts the current object to an object value.
            </summary>
            <returns>Object value.</returns>
        </member>
        <member name="M:Neurotec.Interop.NativeArray.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
        </member>
        <member name="M:Neurotec.Interop.NativeArray.ToArray">
            <summary>
            Converts the current object to an array.
            </summary>
        </member>
        <member name="P:Neurotec.Interop.NativeArray.Ptr">
            <summary>
            Gets a pointer to the current array.
            </summary>
        </member>
        <member name="P:Neurotec.Interop.NativeArray.Size">
            <summary>
            Gets the size of the current array.
            </summary>
        </member>
        <member name="P:Neurotec.Interop.NativeArray.LongSize">
            <summary>
            Gets the size of the current array.
            </summary>
        </member>
        <member name="P:Neurotec.Interop.NativeArray.NativeSize">
            <summary>
            Gets the size of the current array.
            </summary>
        </member>
        <member name="P:Neurotec.Interop.NativeArray.Length">
            <summary>
            Gets the length of the current array.
            </summary>
        </member>
        <member name="T:Neurotec.Interop.INativeArray`1">
            <summary>
            Represents an array of objects that can be individually accessed by index.
            </summary>
        </member>
        <member name="T:Neurotec.Interop.NativeArray`1">
            <summary>
            Represents an array of objects that can be individually accessed by index.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.NativeArray`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.NativeArray`1.ToArray(System.Int32)">
            <summary>
            Converts the current object to array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:Neurotec.Interop.NativeArray`1.ToValue">
            <summary>
            Converts the current object to specific value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Neurotec.Interop.NativeArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
        </member>
        <member name="M:Neurotec.Interop.NativeArray`1.ToArray">
            <summary>
            Converts the current object to array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="T:Neurotec.Interop.NObjectArray">
            <summary>
            Provides object array management functionality.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.NObjectArray.#ctor(System.Type,System.Int32)">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="type">Element type.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.NObjectArray.#ctor(System.Array)">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Neurotec.Interop.NObjectArray.#ctor(System.Type,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="type">Element type.</param>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsHandles">Whether the array own object handles.</param>
            <param name="cache">Whether caching is used.</param>
        </member>
        <member name="M:Neurotec.Interop.NObjectArray.#ctor(System.Type,System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="type">Element type.</param>
            <param name="ptr">Pointer to the array.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.NObjectArray.#ctor(System.Type,System.IntPtr,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="type">Element type.</param>
            <param name="ptr">Pointer to the </param>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsPtr">Whether the array owns the pointer.</param>
            <param name="ownsHandles">Whether the array owns object handles.</param>
            <param name="cache">Whether caching is used.</param>
        </member>
        <member name="M:Neurotec.Interop.NObjectArray.CopyTo(System.Array,System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="T:Neurotec.Interop.NObjectArray`1">
            <summary>
            Provides object array management functionality.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.NObjectArray`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.NObjectArray`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Neurotec.Interop.NObjectArray`1.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsHandles">Whether the array own object handles.</param>
            <param name="cache">Whether caching is used.</param>
        </member>
        <member name="M:Neurotec.Interop.NObjectArray`1.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="ptr">Pointer to the array.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.NObjectArray`1.#ctor(System.IntPtr,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of NObjectArray class.
            </summary>
            <param name="ptr">Pointer to the </param>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsPtr">Whether the array owns the pointer.</param>
            <param name="ownsHandles">Whether the array owns object handles.</param>
            <param name="cache">Whether caching is used.</param>
        </member>
        <member name="M:Neurotec.Interop.NObjectArray`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.NObjectArray`1.ToValue">
            <summary>
            Converts the current object to specific value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="T:Neurotec.Interop.NObjectArrayBase">
            <summary>
            Provides object array management functionality.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.NObjectArrayBase.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of NObjectArrayBase class.
            </summary>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsHandles">Whether the array own object handles.</param>
        </member>
        <member name="M:Neurotec.Interop.NObjectArrayBase.#ctor(System.IntPtr,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of NObjectArrayBase class.
            </summary>
            <param name="ptr">Pointer to the </param>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsPtr">Whether the array owns the pointer.</param>
            <param name="ownsHandles">Whether the array owns object handles.</param>
        </member>
        <member name="T:Neurotec.Interop.NStringWrapper">
            <summary>
            Manages string wrapper functionality.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.NStringWrapper.#ctor(System.String)">
            <summary>
            Initializes a new instance of NStringWrapper class.
            </summary>
            <param name="value">String to be wrapped.</param>
        </member>
        <member name="M:Neurotec.Interop.NStringWrapper.#ctor(System.Char[])">
            <summary>
            Initializes a new instance of NStringWrapper class.
            </summary>
            <param name="value">Char array to be wrapped.</param>
        </member>
        <member name="P:Neurotec.Interop.NStringWrapper.Handle">
            <summary>
            Gets handle to a string.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.NStringWrapper.op_Implicit(Neurotec.Interop.NStringWrapper)~Neurotec.Interop.HNString">
            <summary>
            Converts a string wrapper to HNString object.
            </summary>
            <param name="value">A string wrapper.</param>
            <returns>HNString object</returns>
        </member>
        <member name="T:Neurotec.Interop.ObjectArray">
            <summary>
            Provides object array management functionality.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.ObjectArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of ObjectArray class.
            </summary>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.ObjectArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of ObjectArray class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Neurotec.Interop.ObjectArray.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of ObjectArray class.
            </summary>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsHandles">Whether the array own object handles.</param>
        </member>
        <member name="M:Neurotec.Interop.ObjectArray.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of ObjectArray class.
            </summary>
            <param name="ptr">Pointer to the array.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.ObjectArray.#ctor(System.IntPtr,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of ObjectArray class.
            </summary>
            <param name="ptr">Pointer to the </param>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsPtr">Whether the array owns the pointer.</param>
            <param name="ownsHandles">Whether the array owns object handles.</param>
        </member>
        <member name="M:Neurotec.Interop.ObjectArray.CopyTo(System.Array,System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.ObjectArray.CopyTo(System.Object[],System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.ObjectArray.ToValue">
            <summary>
            Converts the current object to specific value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="T:Neurotec.Interop.StringArray">
            <summary>
            Provides string array management functionality.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.StringArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of NStringArray class.
            </summary>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.StringArray.#ctor(System.String[])">
            <summary>
            Initializes a new instance of NStringArray class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Neurotec.Interop.StringArray.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of NStringArray class.
            </summary>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsHandles">Whether the array own string handles.</param>
        </member>
        <member name="M:Neurotec.Interop.StringArray.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of NStringArray class.
            </summary>
            <param name="ptr">Pointer to the array.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.StringArray.#ctor(System.IntPtr,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of NStringArray class.
            </summary>
            <param name="ptr">Pointer to the </param>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsPtr">Whether the array owns the pointer.</param>
            <param name="ownsHandles">Whether the array owns string handles.</param>
        </member>
        <member name="M:Neurotec.Interop.StringArray.CopyTo(System.Array,System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.StringArray.CopyTo(System.String[],System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.StringArray.ToValue">
            <summary>
            Converts the current object to specific value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="T:Neurotec.Interop.UIntPtrArray">
            <summary>
            Provides unsigned integer array management.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.#ctor(System.UIntPtr[])">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.#ctor(System.UIntPtr[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index in the array.</param>
            <param name="arrayCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.#ctor(System.UIntPtr,System.Int32)">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="value">Element value.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.#ctor(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index in the array.</param>
            <param name="arrayCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="value">Element value.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.#ctor(System.Int64[])">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.#ctor(System.Int64[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index in the array.</param>
            <param name="arrayCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.#ctor(System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="value">Element value.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="ptr">Pointer to the array.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.#ctor(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of UIntPtrArray class.
            </summary>
            <param name="ptr">Pointer to the array.</param>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsPtr">Whether the array own the pointer.</param>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.CopyTo(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.ToIntArray(System.Int32)">
            <summary>
            Converts the current object to integer array.
            </summary>
            <param name="realCount">Number of elements in the array.</param>
            <returns>Integer array.</returns>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.ToIntArray">
            <summary>
            Converts the current object to integer array.
            </summary>
            <returns>Integer array.</returns>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.ToIntValue">
            <summary>
            Converts the current object to integer value.
            </summary>
            <returns>The integer value.</returns>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.CopyTo(System.Int64[],System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.ToLongArray(System.Int32)">
            <summary>
            Converts the current object to long array.
            </summary>
            <param name="realCount">Number of elements in the array.</param>
            <returns>The long array.</returns>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.CopyTo(System.Int64[],System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.ToLongArray">
            <summary>
            Converts the current object to long array.
            </summary>
            <returns>The long array.</returns>
        </member>
        <member name="M:Neurotec.Interop.UIntPtrArray.ToLongValue">
            <summary>
            Converts the current object to long value.
            </summary>
            <returns>The long value.</returns>
        </member>
        <member name="T:Neurotec.Interop.ValueTypeArray">
            <summary>
            Provides value array management functionality.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.ValueTypeArray.#ctor(System.Type,System.Int32)">
            <summary>
            Initializes a new instance of NValueArray class.
            </summary>
            <param name="type">Element type.</param>
            <param name="count">Number of elements.</param>
        </member>
        <member name="M:Neurotec.Interop.ValueTypeArray.#ctor(System.Array)">
            <summary>
            Initializes a new instance of the NValueArray class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Neurotec.Interop.ValueTypeArray.#ctor(System.Array,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of NValueArray class.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index in the array.</param>
            <param name="arrayCount">Number of array elements.</param>
        </member>
        <member name="M:Neurotec.Interop.ValueTypeArray.#ctor(System.Object,System.Int32)">
            <summary>
            Initializes a new instance of NValueArray class.
            </summary>
            <param name="value">Element value.</param>
            <param name="count">Number of elements.</param>
        </member>
        <member name="M:Neurotec.Interop.ValueTypeArray.#ctor(System.Type,System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of NValueArray class.
            </summary>
            <param name="type">Element type.</param>
            <param name="ptr">Pointer to the array.</param>
            <param name="count">Number of elements.</param>
        </member>
        <member name="M:Neurotec.Interop.ValueTypeArray.#ctor(System.Type,System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of NValueArray class.
            </summary>
            <param name="type">Element type.</param>
            <param name="ptr">Pointer to the array.</param>
            <param name="count">Number of elements.</param>
            <param name="ownsPtr">Whether the array own the pointer.</param>
        </member>
        <member name="M:Neurotec.Interop.ValueTypeArray.CopyTo(System.Array,System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="T:Neurotec.Interop.ValueTypeArray`1">
            <summary>
            Provides nullable value array management functionality.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Neurotec.Interop.ValueTypeArray`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of NValueArray class.
            </summary>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.ValueTypeArray`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of NValueArray class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Neurotec.Interop.ValueTypeArray`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of NValueArray class.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index in the array.</param>
            <param name="arrayCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.ValueTypeArray`1.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new instance of NValueArray class.
            </summary>
            <param name="value">Element value.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.ValueTypeArray`1.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of NValueArray class.
            </summary>
            <param name="ptr">Pointer to the array.</param>
            <param name="count">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.ValueTypeArray`1.#ctor(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of NValueArray class.
            </summary>
            <param name="ptr">Pointer to the array.</param>
            <param name="count">Number of elements in the array.</param>
            <param name="ownsPtr">Whether the array own the pointer.</param>
        </member>
        <member name="M:Neurotec.Interop.ValueTypeArray`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
            <param name="realCount">Number of elements in the array.</param>
        </member>
        <member name="M:Neurotec.Interop.ValueTypeArray`1.ToArray(System.Int32)">
            <summary>
            Converts the current object into a value array.
            </summary>
            <param name="realCount">Number of elements in the array.</param>
            <returns>The value array.</returns>
        </member>
        <member name="M:Neurotec.Interop.ValueTypeArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all contents of the current array to the specified array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index in the array at which copying begins.</param>
        </member>
        <member name="M:Neurotec.Interop.ValueTypeArray`1.ToArray">
            <summary>
            Converts the current object into a value array.
            </summary>
            <returns>The value array.</returns>
        </member>
        <member name="M:Neurotec.Interop.ValueTypeArray`1.ToValue">
            <summary>
            Converts the current object to specific value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="T:Neurotec.Interop.NNameStringPair_">
            <summary>
            Represents a pair of name strings.
            </summary>
        </member>
        <member name="F:Neurotec.Interop.NNameStringPair_.hKey">
            <summary>
            Key string of the name string pair.
            </summary>
        </member>
        <member name="F:Neurotec.Interop.NNameStringPair_.hValue">
            <summary>
            Value string of the name string pair.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.NNameStringPair_.ToStruct(Neurotec.Interop.NNameStringPair_@)">
            <summary>
            Converts a name string pair into a key value pair.
            </summary>
            <param name="value">The name string pair.</param>
            <returns>The key value pair.</returns>
        </member>
        <member name="M:Neurotec.Interop.NNameStringPair_.Create(System.Collections.Generic.KeyValuePair{System.String,System.String},Neurotec.Interop.NNameStringPair_@)">
            <summary>
            Creates a name value pair from the specified key value pair.
            </summary>
            <param name="value">The key value pair.</param>
            <param name="v">[out] The new name string pair.</param>
        </member>
        <member name="M:Neurotec.Interop.NNameStringPair_.Dispose(Neurotec.Interop.NNameStringPair_@)">
            <summary>
            Disposes of the specified name string pair.
            </summary>
            <param name="value">Name string pair to dispose of.</param>
        </member>
        <member name="T:Neurotec.Interop.NKeyValuePair_">
            <summary>
            Represents a key value pair structure.
            </summary>
        </member>
        <member name="F:Neurotec.Interop.NKeyValuePair_.hKey">
            <summary>
            Handle to the key part of the key value pair.
            </summary>
        </member>
        <member name="F:Neurotec.Interop.NKeyValuePair_.hValue">
            <summary>
            Handle to the value part of the key value pair.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.NKeyValuePair_.ToStruct(Neurotec.Interop.NKeyValuePair_@)">
            <summary>
            Creates a new key value pair structure from the specified key value pair.
            </summary>
            <param name="value">Pointer to the key value pair.</param>
            <returns>Key value pair structure.</returns>
        </member>
        <member name="M:Neurotec.Interop.NKeyValuePair_.Create(System.Collections.Generic.KeyValuePair{System.Object,System.Object},Neurotec.Interop.NKeyValuePair_@)">
            <summary>
            Creates a new key value pair from the specified key value pair structure.
            </summary>
            <param name="value">Key value pair structure.</param>
            <param name="v">[out] Pointer to the key value pair.</param>
        </member>
        <member name="M:Neurotec.Interop.NKeyValuePair_.Dispose(Neurotec.Interop.NKeyValuePair_@)">
            <summary>
            Disposes of the specified key value pair.
            </summary>
            <param name="value">Pointer to the key value pair to be disposed of.</param>
        </member>
        <member name="T:Neurotec.Interop.NNameValuePair_">
            <summary>
            Represents a name value pair structure.
            </summary>
        </member>
        <member name="F:Neurotec.Interop.NNameValuePair_.hKey">
            <summary>
            Handle to the key part of the name value pair.
            </summary>
        </member>
        <member name="F:Neurotec.Interop.NNameValuePair_.hValue">
            <summary>
            Handle to the value part of the name value pair.
            </summary>
        </member>
        <member name="M:Neurotec.Interop.NNameValuePair_.ToStruct(Neurotec.Interop.NNameValuePair_@)">
            <summary>
            Creates a new key value pair structure from the specified name value pair.
            </summary>
            <param name="value">Pointer to the name value pair.</param>
            <returns>Key value pair structure.</returns>
        </member>
        <member name="M:Neurotec.Interop.NNameValuePair_.Create(System.Collections.Generic.KeyValuePair{System.String,System.Object},Neurotec.Interop.NNameValuePair_@)">
            <summary>
            Creates a new name value pair from the specified key value pair structure.
            </summary>
            <param name="value">Key value pair structure.</param>
            <param name="v">[out] Pointer to the name value pair.</param>
        </member>
        <member name="M:Neurotec.Interop.NNameValuePair_.Dispose(Neurotec.Interop.NNameValuePair_@)">
            <summary>
            Disposes of the specified name value pair.
            </summary>
            <param name="value">Pointer to the name value pair to be disposed of.</param>
        </member>
        <member name="P:Neurotec.NAggregateException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="P:Neurotec.NAggregateException.Code">
            <summary>
            Gets an error code of the current exception.
            </summary>
            <value>
            Value
            </value>
            <summary>
            Gets an error code of the current exception.
            </summary>
            <value>
            Value
            </value>
            <summary>
            Gets or sets
            </summary>
            <value>
            Error code. 
            </value>
        </member>
        <member name="T:Neurotec.NArgumentException">
            <summary>
            The exception that is thrown when one of the arguments provided to a method is not valid.
            </summary> 
        </member>
        <member name="P:Neurotec.NArgumentException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="P:Neurotec.NArgumentException.Code">
            <summary>
            Gets an error code of the current exception.
            </summary>
            <value>
            Value
            </value>
            <summary>
            Gets an error code of the current exception.
            </summary>
            <value>
            Value
            </value>
            <summary>
            Gets or sets
            </summary>
            <value>
            Error code. 
            </value>
        </member>
        <member name="T:Neurotec.NArgumentNullException">
            <summary>
            The exception which is thrown when argument value is NULL where non-NULL value was expected.
            </summary>  
        </member>
        <member name="P:Neurotec.NArgumentNullException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="T:Neurotec.NArgumentOutOfRangeException">
            <summary>
            The exception that is thrown when argument value is out of range. 
            </summary> 
        </member>
        <member name="P:Neurotec.NArgumentOutOfRangeException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack.
            </value>
        </member>
        <member name="T:Neurotec.NArithmeticException">
            <summary>
            The exception that is thrown for errors in an arithmetic, casting, or conversion operation.
            </summary>
        </member>
        <member name="P:Neurotec.NArithmeticException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="T:Neurotec.NArray">
            <summary>
            Provides functionality for working with arrays.
            </summary>
        </member>
        <member name="M:Neurotec.NArray.Enumerator.#ctor(Neurotec.NArray)">
            <summary>
            Creates a new Enumerator structure.
            </summary>
            <param name="array">The array of values to be enumerated</param>
        </member>
        <member name="P:Neurotec.NArray.Enumerator.Current">
            <summary>
            Gets the current object.
            </summary>
        </member>
        <member name="M:Neurotec.NArray.Enumerator.MoveNext">
            <summary>
            Moves to the next object in the array.
            </summary>
            <returns>true if there is an object to move to; else false.</returns>
        </member>
        <member name="M:Neurotec.NArray.Enumerator.Reset">
            <summary>
            Resets the enumeration.
            </summary>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.Array,Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified array with specified attributes.
            </summary>
            <param name="value">The original array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.Array)">
            <summary>
            Creates a new array from the specified array.
            </summary>
            <param name="value">The original array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray``1(``0[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified array of the specified type.
            </summary>
            <typeparam name="T">Array type.</typeparam>
            <param name="value">The original array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray``1(``0[])">
            <summary>
            Creates a new array from the specified array of the specified type.
            </summary>
            <typeparam name="T">Array type.</typeparam>
            <param name="value">The original array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.Byte[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified byte array.
            </summary>
            <param name="value">The original byte array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.Byte[])">
            <summary>
            Creates a new array from the specified byte array.
            </summary>
            <param name="value">The original byte array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.SByte[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified signed byte array.
            </summary>
            <param name="value">The original signed byte array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.SByte[])">
            <summary>
            Creates a new array from the specified signed byte array.
            </summary>
            <param name="value">The original signed byte array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.UInt16[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified unsigned short integer array.
            </summary>
            <param name="value">The original unsigned short integer array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.UInt16[])">
            <summary>
            Creates a new array from the specified unsigned short integer array.
            </summary>
            <param name="value">The original unsigned short integer array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.Int16[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified short integer array.
            </summary>
            <param name="value">The original short integer array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.Int16[])">
            <summary>
            Creates a new array from the specified short integer array.
            </summary>
            <param name="value">The original short integer array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.UInt32[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified unsigned integer array.
            </summary>
            <param name="value">The original unsigned integer array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.UInt32[])">
            <summary>
            Creates a new array from the specified unsigned integer array.
            </summary>
            <param name="value">The original unsigned integer array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.Int32[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified integer array.
            </summary>
            <param name="value">The original integer array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.Int32[])">
            <summary>
            Creates a new array from the specified integer array.
            </summary>
            <param name="value">The original integer array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.UInt64[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified unsigned long integer array.
            </summary>
            <param name="value">The original unsigned long integer array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.UInt64[])">
            <summary>
            Creates a new array from the specified unsigned long integer array.
            </summary>
            <param name="value">The original unsigned long integer array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.Int64[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified long integer array.
            </summary>
            <param name="value">The original long integer array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.Int64[])">
            <summary>
            Creates a new array from the specified long integer array.
            </summary>
            <param name="value">The original long integer array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.Single[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified floating point value array.
            </summary>
            <param name="value">The original floating point value array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.Single[])">
            <summary>
            Creates a new array from the specified floating point value array.
            </summary>
            <param name="value">The original floating point value array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.Double[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified double value array.
            </summary>
            <param name="value">The original double value array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.Double[])">
            <summary>
            Creates a new array from the specified double value array.
            </summary>
            <param name="value">The original double value array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.Boolean[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified Boolean value array.
            </summary>
            <param name="value">The original Boolean value array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.Boolean[])">
            <summary>
            Creates a new array from the specified Boolean value array.
            </summary>
            <param name="value">The original Boolean value array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.UIntPtr[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified unsigned integer pointer array.
            </summary>
            <param name="value">The original unsigned integer pointer array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.UIntPtr[])">
            <summary>
            Creates a new array from the specified unsigned integer pointer array.
            </summary>
            <param name="value">The original unsigned integer pointer array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.IntPtr[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified integer pointer value array.
            </summary>
            <param name="value">The original integer pointer array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.IntPtr[])">
            <summary>
            Creates a new array from the specified integer pointer value array.
            </summary>
            <param name="value">The original integer pointer array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromPointerArray(System.IntPtr[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified integer pointer value array.
            </summary>
            <param name="value">The original integer pointer array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new pointer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromPointerArray(System.IntPtr[])">
            <summary>
            Creates a new array from the specified integer pointer value array.
            </summary>
            <param name="value">The original integer pointer array.</param>
            <returns>The new pointer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromResultArray(System.Int32[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified result array.
            </summary>
            <param name="value">The original result array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new result array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromResultArray(System.Int32[])">
            <summary>
            Creates a new array from the specified result array.
            </summary>
            <param name="value">The original result array.</param>
            <returns>The new result array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.Char[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified char array.
            </summary>
            <param name="value">The original char array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.Char[])">
            <summary>
            Creates a new array from the specified char array.
            </summary>
            <param name="value">The original char array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.String[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified string array.
            </summary>
            <param name="value">The original string array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(System.String[])">
            <summary>
            Creates a new array from the specified string array.
            </summary>
            <param name="value">The original string array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(Neurotec.NType,Neurotec.NObject[],Neurotec.NAttributes)">
            <summary>
            Creates a new array from the specified object array.
            </summary>
            <param name="type">Type of the objects in the array.</param>
            <param name="value">The original object array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.FromArray(Neurotec.NType,Neurotec.NObject[])">
            <summary>
            Creates a new array from the specified object array.
            </summary>
            <param name="type">Type of the objects the array.</param>
            <param name="value">The original object array.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToArray(Neurotec.NArray)">
            <summary>
            Creates a new array from the specified NArray.
            </summary>
            <param name="value">The original NArray</param>
            <returns>The new array.</returns>
        </member>
        <member name="P:Neurotec.NArray.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.NArray.ToArray">
            <summary>
            Copies the current array into another array.
            </summary>
            <returns>Destination array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToArray(System.Type,Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array of the specified type into another array.
            </summary>
            <param name="type">Type of the array.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToArray(System.Type,Neurotec.NAttributes)">
            <summary>
            Copies the current array of the specified type into another array.
            </summary>
            <param name="type">Type of the array.</param>
            <param name="attributes">Array attributes.</param>
            <returns>Destination array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToArray(System.Type)">
            <summary>
            Copies the current array of the specified type into another array.
            </summary>
            <param name="type">Type of the array.</param>
            <returns>Destination array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToArray``1(Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array into another array of the specified type.
            </summary>
            <typeparam name="T">Type of the array.</typeparam>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToArray``1(Neurotec.NAttributes)">
            <summary>
            Copies the current array into another array of the specified type.
            </summary>
            <typeparam name="T">Type of the array.</typeparam>
            <param name="attributes">Array attributes.</param>
            <returns>Destination array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToArray``1">
            <summary>
            Copies the current array into another array of the specified type.
            </summary>
            <typeparam name="T">Type of the array.</typeparam>
            <returns>Destination array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToByteArray(Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array into a byte array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination byte array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToByteArray(Neurotec.NAttributes)">
            <summary>
            Copies the current array into a byte array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <returns>Destination byte array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToByteArray">
            <summary>
            Copies the current array into a byte array.
            </summary>
            <returns>Destination byte array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToSByteArray(Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array into a signed byte array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination signed byte array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToSByteArray(Neurotec.NAttributes)">
            <summary>
            Copies the current array into a signed byte array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <returns>Destination signed byte array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToSByteArray">
            <summary>
            Copies the current array into a signed byte array.
            </summary>
            <returns>Destination signed byte array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToUInt16Array(Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array into an unsigned short integer array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination unsigned short integer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToUInt16Array(Neurotec.NAttributes)">
            <summary>
            Copies the current array into an unsigned short integer array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <returns>Destination unsigned short integer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToUInt16Array">
            <summary>
            Copies the current array into an unsigned short integer array.
            </summary>
            <returns>Destination unsigned short integer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToInt16Array(Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current  array into a short integer array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination short integer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToInt16Array(Neurotec.NAttributes)">
            <summary>
            Copies the current  array into a short integer array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <returns>Destination short integer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToInt16Array">
            <summary>
            Copies the current  array into a short integer array.
            </summary>
            <returns>Destination short integer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToUInt32Array(Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array into an unsigned integer array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination unsigned integer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToUInt32Array(Neurotec.NAttributes)">
            <summary>
            Copies the current array into an unsigned integer array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <returns>Destination unsigned integer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToUInt32Array">
            <summary>
            Copies the current array into an unsigned integer array.
            </summary>
            <returns>Destination unsigned integer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToInt32Array(Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array into an integer array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination unsigned integer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToInt32Array(Neurotec.NAttributes)">
            <summary>
            Copies the current array into an integer array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <returns>Destination integer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToInt32Array">
            <summary>
            Copies the current array into an integer array.
            </summary>
            <returns>Destination integer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToUInt64Array(Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array into an unsigned long integer array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination unsigned long integer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToUInt64Array(Neurotec.NAttributes)">
            <summary>
            Copies the current array into an unsigned long integer array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <returns>Destination unsigned long integer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToUInt64Array">
            <summary>
            Copies the current unsigned long integer array into another array.
            </summary>
            <returns>Destination unsigned long integer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToInt64Array(Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array into a long integer array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination long integer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToInt64Array(Neurotec.NAttributes)">
            <summary>
            Copies the current array into a long integer array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <returns>Destination long integer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToInt64Array">
            <summary>
            Copies the current array into a long integer array.
            </summary>
            <returns>Destination long integer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToSingleArray(Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array into a floating point value array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination floating point value array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToSingleArray(Neurotec.NAttributes)">
            <summary>
            Copies the current array into a floating point value array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <returns>Destination floating point value array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToSingleArray">
            <summary>
            Copies the current array into a floating point value array.
            </summary>
            <returns>Destination floating point value array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToDoubleArray(Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array into a double value array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination double value array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToDoubleArray(Neurotec.NAttributes)">
            <summary>
            Copies the current array into a double value array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <returns>Destination double value array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToDoubleArray">
            <summary>
            Copies the current array into a double value array.
            </summary>
            <returns>Destination double value array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToBooleanArray(Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array into a Boolean value array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination Boolean value array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToBooleanArray(Neurotec.NAttributes)">
            <summary>
            Copies the current array into a Boolean value array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <returns>Destination Boolean value array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToBooleanArray">
            <summary>
            Copies the current array into a Boolean value array.
            </summary>
            <returns>Destination Boolean value array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToUIntPtrArray(Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array into an unsigned integer pointer array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination unsigned integer pointer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToUIntPtrArray(Neurotec.NAttributes)">
            <summary>
            Copies the current array into an unsigned integer pointer array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <returns>Destination unsigned integer pointer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToUIntPtrArray">
            <summary>
            Copies the current array into an unsigned integer pointer array.
            </summary>
            <returns>Destination unsigned integer pointer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToIntPtrArray(Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array into an integer pointer array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination integer pointer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToIntPtrArray(Neurotec.NAttributes)">
            <summary>
            Copies the current array into an integer pointer array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <returns>Destination integer pointer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToIntPtrArray">
            <summary>
            Copies the current array into an integer pointer array.
            </summary>
            <returns>Destination integer pointer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToPointerArray(Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array into a pointer array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination pointer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToPointerArray(Neurotec.NAttributes)">
            <summary>
            Copies the current array into a pointer array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <returns>Destination pointer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToPointerArray">
            <summary>
            Copies the current array into a pointer array.
            </summary>
            <returns>Destination pointer array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToResultArray(Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array into a result array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination result array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToResultArray(Neurotec.NAttributes)">
            <summary>
            Copies the current array into a result array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <returns>Destination result array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToResultArray">
            <summary>
            Copies the current array into a result array.
            </summary>
            <returns>Destination result array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToCharArray(Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array into a char array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination char array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToCharArray(Neurotec.NAttributes)">
            <summary>
            Copies the current array into a char array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <returns>Destination char array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToCharArray">
            <summary>
            Copies the current array into a char array.
            </summary>
            <returns>Destination char array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToStringArray(Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array into a string array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination string array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToStringArray(Neurotec.NAttributes)">
            <summary>
            Copies the current array into a string array.
            </summary>
            <param name="attributes">Array attributes.</param>
            <returns>Destination string array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToStringArray">
            <summary>
            Copies the current array into a string array.
            </summary>
            <returns>Destination string array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToObjectArray(Neurotec.NType,Neurotec.NAttributes,System.String)">
            <summary>
            Copies the current array into an object array.
            </summary>
            <param name="type">Object type.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>Destination object array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToObjectArray(Neurotec.NType,Neurotec.NAttributes)">
            <summary>
            Copies the current array into an object array.
            </summary>
            <param name="type">Object type.</param>
            <param name="attributes">Array attributes.</param>
            <returns>Destination object array.</returns>
        </member>
        <member name="M:Neurotec.NArray.ToObjectArray(Neurotec.NType)">
            <summary>
            Copies the current array into an object array.
            </summary>
            <param name="type">Object type.</param>
            <returns>Destination object array.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAs(System.Int32,System.Type,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="type">Type of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAs(System.Int32,System.Type,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="type">Type of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAs(System.Int32,System.Type)">
            <summary>
            
            </summary>
            <param name="index">Index of the value.</param>
            <param name="type">Type of the value.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAs``1(System.Int32,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the of the specified value of the specified type in the array.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAs``1(System.Int32,Neurotec.NAttributes)">
            <summary>
            Retrieves the of the specified value of the specified type in the array.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAs``1(System.Int32)">
            <summary>
            Retrieves the of the specified value of the specified type in the array.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="index">Index of the value.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsByte(System.Int32,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified byte value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The byte value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsByte(System.Int32,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified byte value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The byte value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsByte(System.Int32)">
            <summary>
            Retrieves the specified byte value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <returns>The byte value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsSByte(System.Int32,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified signed byte value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The signed byte value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsSByte(System.Int32,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified signed byte value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The signed byte value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsSByte(System.Int32)">
            <summary>
            Retrieves the specified signed byte value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <returns>The signed byte value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsUInt16(System.Int32,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified unsigned short integer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The unsigned short integer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsUInt16(System.Int32,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified unsigned short integer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The unsigned short integer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsUInt16(System.Int32)">
            <summary>
            Retrieves the specified unsigned short integer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <returns>The unsigned short integer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsInt16(System.Int32,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified short integer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The short integer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsInt16(System.Int32,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified short integer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The short integer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsInt16(System.Int32)">
            <summary>
            Retrieves the specified short integer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <returns>The short integer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsUInt32(System.Int32,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified unsigned integer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The unsigned integer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsUInt32(System.Int32,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified unsigned integer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The unsigned integer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsUInt32(System.Int32)">
            <summary>
            Retrieves the specified unsigned integer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <returns>The unsigned integer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsInt32(System.Int32,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified integer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The integer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsInt32(System.Int32,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified integer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The integer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsInt32(System.Int32)">
            <summary>
            Retrieves the specified integer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <returns>The integer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsUInt64(System.Int32,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified unsigned long integer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The unsigned long integer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsUInt64(System.Int32,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified unsigned long integer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The unsigned long integer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsUInt64(System.Int32)">
            <summary>
            Retrieves the specified unsigned long integer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <returns>The unsigned long integer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsInt64(System.Int32,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified long integer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The long integer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsInt64(System.Int32,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified long integer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The long integer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsInt64(System.Int32)">
            <summary>
            Retrieves the specified long integer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <returns>The long integer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsSingle(System.Int32,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified floating point value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The floating point value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsSingle(System.Int32,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified floating point value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The floating point value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsSingle(System.Int32)">
            <summary>
            Retrieves the specified floating point value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <returns>The floating point value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsDouble(System.Int32,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified double value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The double value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsDouble(System.Int32,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified double value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The double value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsDouble(System.Int32)">
            <summary>
            Retrieves the specified double value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <returns>The double value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsBoolean(System.Int32,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified Boolean value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The Boolean value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsBoolean(System.Int32,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified Boolean value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The Boolean value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsBoolean(System.Int32)">
            <summary>
            Retrieves the specified Boolean value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <returns>The Boolean value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsUIntPtr(System.Int32,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified unsigned integer pointer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The unsigned integer pointer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsUIntPtr(System.Int32,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified unsigned integer pointer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The unsigned integer pointer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsUIntPtr(System.Int32)">
            <summary>
            Retrieves the specified unsigned integer pointer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <returns>The unsigned integer pointer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsIntPtr(System.Int32,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified integer pointer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The integer pointer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsIntPtr(System.Int32,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified integer pointer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The integer pointer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsIntPtr(System.Int32)">
            <summary>
            Retrieves the specified integer pointer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <returns>The integer pointer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsPointer(System.Int32,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified integer pointer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The pointer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsPointer(System.Int32,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified integer pointer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The pointer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsPointer(System.Int32)">
            <summary>
            Retrieves the specified integer pointer value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <returns>The pointer value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsResult(System.Int32,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified result value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The result value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsResult(System.Int32,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified result value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The result value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsResult(System.Int32)">
            <summary>
            Retrieves the specified result value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <returns>The result value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsChar(System.Int32,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified char value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The char value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsChar(System.Int32,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified char value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The char value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsChar(System.Int32)">
            <summary>
            Retrieves the specified char value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <returns>The string value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsString(System.Int32,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified string value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The string value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsString(System.Int32,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified string value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="attributes">Array attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsString(System.Int32)">
            <summary>
            Retrieves the specified string value in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <returns>The string value.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsObject(System.Int32,Neurotec.NType,Neurotec.NAttributes,System.String)">
            <summary>
            Retrieves the specified object in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="type">Type of the object.</param>
            <param name="attributes">Array attributes.</param>
            <param name="format">Value format.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsObject(System.Int32,Neurotec.NType,Neurotec.NAttributes)">
            <summary>
            Retrieves the specified object in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="type">Type of the object.</param>
            <param name="attributes">Array attributes.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Neurotec.NArray.GetValueAsObject(System.Int32,Neurotec.NType)">
            <summary>
            Retrieves the specified object in the array.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="type">Type of the object.</param>
            <returns>The object.</returns>
        </member>
        <member name="P:Neurotec.NArray.Length">
            <summary>
            Retrieves the length of the array.
            </summary>
        </member>
        <member name="M:Neurotec.NArray.GetEnumerator">
            <summary>
            Retrieves an enumerator for the current array.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:Neurotec.NAsyncStatus">
            <summary>
            Enumerates asynchronous operation statuses.
            </summary>
        </member>
        <member name="F:Neurotec.NAsyncStatus.Started">
            Indicates that no async operation is active.
        </member>
        <member name="F:Neurotec.NAsyncStatus.Completed">
            Indicates that the async operation has started.
        </member>
        <member name="F:Neurotec.NAsyncStatus.Canceled">
            Indicates that the async operation has been completed.
        </member>
        <member name="F:Neurotec.NAsyncStatus.Faulted">
            Indicates that the async operation has been canceled.
        </member>
        <member name="T:Neurotec.NAsyncOperation">
            <summary>
            Provides functionality for working with asynchronous operations.
            Asynchronous operations are functions and methods which return instantly, providing an object which can be used for operation's proper completion.
            </summary>
        </member>
        <member name="P:Neurotec.NAsyncOperation.NAsyncStatusNativeType">
            <summary>
            Defines the native type of the async operation status.
            </summary>
        </member>
        <member name="P:Neurotec.NAsyncOperation.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.NAsyncOperation.Cancel(System.Boolean)">
            <summary>
            Cancels the asynchronous operation.
            </summary>
            <param name="block">true if the operation can be canceled while running; else false.</param>
        </member>
        <member name="M:Neurotec.NAsyncOperation.Wait">
            <summary>
            Waits until the asynchronous operation completes.
            </summary>
        </member>
        <member name="M:Neurotec.NAsyncOperation.Wait(System.Int32)">
            <summary>
            Waits until the asynchronous operation completes or until the wait period times out.
            </summary>
            <param name="timeOutMilliseconds">Time out length.</param>
            <returns>true if the operation was completed before time out, else false.</returns>
        </member>
        <member name="M:Neurotec.NAsyncOperation.AsTyped``1">
            <summary>
            Creates a new async operation with the specified return value type.
            </summary>
            <typeparam name="T">Type of values returned by the async operation.</typeparam>
            <returns>A new async operation with the specified return value type.</returns>
        </member>
        <member name="P:Neurotec.NAsyncOperation.Status">
            <summary>
            Retrieves the status of the async operation.
            </summary>
        </member>
        <member name="P:Neurotec.NAsyncOperation.IsCompleted">
            <summary>
            Checks whether the async operation has been completed.
            </summary>
        </member>
        <member name="P:Neurotec.NAsyncOperation.IsCanceled">
            <summary>
            Checks whether the async operation has been canceled.
            </summary>
        </member>
        <member name="P:Neurotec.NAsyncOperation.IsFaulted">
            <summary>
            Checks whether the async operation has been faulted.
            </summary>
        </member>
        <member name="P:Neurotec.NAsyncOperation.Error">
            <summary>
            Retrieves the exception thrown by the async operation.
            </summary>
        </member>
        <member name="P:Neurotec.NAsyncOperation.Result">
            <summary>
            Retireves the value returned by the async operation.
            </summary>
        </member>
        <member name="E:Neurotec.NAsyncOperation.Completed">
            <summary>
            Adds or removes a user-specified "asynchronous operation completed" event callback.
            </summary>
        </member>
        <member name="T:Neurotec.NAsyncOperation`1">
            <summary>
            Provides functionality for working with asynchronous operations that return the values of the specified type.
            </summary>
            <typeparam name="T">Type of values returned by the async operation.</typeparam>
        </member>
        <member name="M:Neurotec.NAsyncOperation`1.FromHandle(Neurotec.Interop.HNObject)">
            <summary>
            Creates a new async operation with the specified return value type from a regular async operation.
            </summary>
            <param name="hAsyncOperation">A regular async operation.</param>
            <returns>A new async operation with the specified return value type.</returns>
        </member>
        <member name="P:Neurotec.NAsyncOperation`1.Result">
            <summary>
            Retrieves the type of values returned by the async operation.
            </summary>
        </member>
        <member name="T:Neurotec.NBadImageFormatException">
            <summary>
            The exception that is thrown when the file image of a dynamic link library (DLL) or an executable
            program is invalid. 
            </summary>
        </member>
        <member name="P:Neurotec.NBadImageFormatException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="T:Neurotec.ErrorSuppressedEventArgs">
            <summary>
            Class Description.
            </summary>
        </member>
        <member name="M:Neurotec.ErrorSuppressedEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of ErrorSuppressedEventArgs class.
            </summary>
            <param name="error">The suppressed error.</param>
        </member>
        <member name="P:Neurotec.ErrorSuppressedEventArgs.Error">
            <summary>
            Gets the suppressed error.
            </summary>
            <value>
            The suppressed error.
            </value>
        </member>
        <member name="T:Neurotec.NCore">
            <summary>
            This class supports internal Neurotechnology libraries
            infrastructure and should not be used directly in your code. 
            </summary>
        </member>
        <member name="F:Neurotec.NCore.DllName">
            <summary>
            NCore library name.
            </summary>
        </member>
        <member name="P:Neurotec.NCore.NativeModule">
            <summary>
            Defines the native module of the object.
            </summary>
        </member>
        <member name="P:Neurotec.NCore.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.NCore.ShutdownThread">
            <summary>
            Disables sends and receives on a thread.
            </summary>
        </member>
        <member name="M:Neurotec.NCore.Shutdown">
            <summary>
            Disables sends and receives on a socket.
            </summary>
        </member>
        <member name="M:Neurotec.NCore.Alloc(System.Int32)">
            <summary>
            Allocates a block of memory.
            </summary>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <returns>
            A representation of a pointer (IntPtr type) to the allocated
            memory block.
            </returns>
        </member>
        <member name="M:Neurotec.NCore.Alloc(System.Int64)">
            <summary>
            Allocates a block of memory.
            </summary>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <returns>A representation of a pointer (IntPtr type) to the allocated memory block.</returns>
        </member>
        <member name="M:Neurotec.NCore.Alloc(System.UIntPtr)">
            <summary>
            Allocates a block of memory.
            </summary>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <returns>
            A representation of a pointer (IntPtr type) to the allocated memory block. 
            </returns>
        </member>
        <member name="M:Neurotec.NCore.CAlloc(System.Int32)">
            <summary>
            Allocates an array in memory with elements initialized to 0.
            </summary>
            <param name="size">Size in bytes of memory to be allocated.</param>
            
            <returns>
            Pointer to allocated memory block.
            </returns>
        </member>
        <member name="M:Neurotec.NCore.CAlloc(System.Int64)">
            <summary>
            Allocates an array in memory with elements initialized to 0.
            </summary>
            <param name="size">Size in bytes of memory to be allocated.</param>
            
            <returns>
            Pointer to allocated memory block.
            </returns>
        </member>
        <member name="M:Neurotec.NCore.CAlloc(System.UIntPtr)">
            <summary>
            Allocates an array in memory with elements initialized to 0.
            </summary>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <returns>
            Pointer to allocated memory block. 
            </returns>
        </member>
        <member name="M:Neurotec.NCore.ReAlloc(System.IntPtr@,System.Int32)">
            <summary>
            Reallocate memory blocks.
            </summary>
            <param name="pBlock">Pointer to memory block to be
                                 allocated.</param>
            <param name="size">Size in bytes of new memory block.</param>
        </member>
        <member name="M:Neurotec.NCore.ReAlloc(System.IntPtr@,System.Int64)">
            <summary>
            Reallocate memory blocks.
            </summary>
            <param name="pBlock">Pointer to memory block to be
                                 allocated.</param>
            <param name="size">Size in bytes of new memory block.</param>
        </member>
        <member name="M:Neurotec.NCore.ReAlloc(System.IntPtr@,System.UIntPtr)">
            <summary>
            Reallocate memory blocks.
            </summary>
            <param name="pBlock">Pointer to memory block to be allocated.</param>
            <param name="size">Size in bytes of new memory block.</param>
        </member>
        <member name="M:Neurotec.NCore.Free(System.IntPtr)">
            <summary>
            Frees a specified memory block.
            </summary>
            <param name="pBlock">A pointer to previously allocated
                                 memory block to be freed.</param>
            <remarks>
            The Free method frees a memory block that was previously
            allocated by a call to Alloc, CAlloc or ReAlloc methods. The
            number of freed bytes is equivalent to the number of bytes
            requested when the block was allocated (or reallocated, in
            the case of ReAlloc). 
            </remarks>
        </member>
        <member name="M:Neurotec.NCore.Free(System.IntPtr,Neurotec.NMemoryType)">
            <summary>
            Frees a specified memory block.
            </summary>
            <param name="pBlock">A pointer to previously allocated memory block to be freed.</param>
            <param name="memoryType">Type of the memory block to be freed.</param>
            <remarks>
            The Free method frees a memory block that was previously allocated by a call to Alloc, CAlloc or
            ReAlloc methods. The number of freed bytes is equivalent to the number of bytes requested when the
            block was allocated (or reallocated, in the case of ReAlloc). 
            </remarks>
        </member>
        <member name="M:Neurotec.NCore.AlignedAlloc(System.Int32,System.Int32)">
            <summary>
            Allocates a block of memory and makes sure that the returned pointer can be divided evenly by alignment.
            </summary>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <param name="alignment">The alignment.</param>
            <returns>A representation of a pointer (IntPtr type) to the allocated memory block.
            Can be divided evenly by the alignment.</returns>
        </member>
        <member name="M:Neurotec.NCore.AlignedAlloc(System.Int64,System.Int64)">
            <summary>
            Allocates a block of memory and makes sure that the returned pointer can be divided evenly by alignment.
            </summary>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <param name="alignment">The alignment.</param>
            <returns>A representation of a pointer (IntPtr type) to the allocated memory block.
            Can be divided evenly by the alignment.</returns>
        </member>
        <member name="M:Neurotec.NCore.AlignedAlloc(System.UIntPtr,System.UIntPtr)">
            <summary>
            Allocates a block of memory and makes sure that the returned pointer can be divided evenly by alignment.
            </summary>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <param name="alignment">The alignment.</param>
            <returns>A representation of a pointer (IntPtr type) to the allocated memory block.
            Can be divided evenly by the alignment.</returns>
        </member>
        <member name="M:Neurotec.NCore.AlignedAlloc(System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a block of memory and makes sure that the sum of returned pointer and the offset can be divided evenly by alignment.
            </summary>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <param name="alignment">The alignment.</param>
            <param name="offset">The offset.</param>
            <returns>A representation of a pointer (IntPtr type) to the allocated memory block.
            Its sum with offset can be divided evenly by the alignment.</returns>
        </member>
        <member name="M:Neurotec.NCore.AlignedAlloc(System.Int64,System.Int64,System.Int64)">
            <summary>
            Allocates a block of memory and makes sure that the sum of returned pointer and the offset can be divided evenly by alignment.
            </summary>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <param name="alignment">The alignment.</param>
            <param name="offset">The offset.</param>
            <returns>A representation of a pointer (IntPtr type) to the allocated memory block.
            Its sum with offset can be divided evenly by the alignment.</returns>
        </member>
        <member name="M:Neurotec.NCore.AlignedAlloc(System.UIntPtr,System.UIntPtr,System.UIntPtr)">
            <summary>
            Allocates a block of memory and makes sure that the sum of returned pointer and the offset can be divided evenly by alignment.
            </summary>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <param name="alignment">The alignment.</param>
            <param name="offset">The offset.</param>
            <returns>A representation of a pointer (IntPtr type) to the allocated memory block.
            Its sum with offset can be divided evenly by the alignment.</returns>
        </member>
        <member name="M:Neurotec.NCore.AlignedCAlloc(System.Int32,System.Int32)">
            <summary>
            Allocates an array in memory with elements initialized to 0 and makes sure that the returned pointer can be divided evenly by alignment. 
            </summary>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <param name="alignment">The alignment.</param>
            <returns>A representation of a pointer (IntPtr type) to the allocated memory block.
            Can be divided evenly by the alignment.</returns>
        </member>
        <member name="M:Neurotec.NCore.AlignedCAlloc(System.Int64,System.Int64)">
            <summary>
            Allocates an array in memory with elements initialized to 0 and makes sure that the returned pointer can be divided evenly by alignment. 
            </summary>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <param name="alignment">The alignment.</param>
            <returns>A representation of a pointer (IntPtr type) to the allocated memory block.
            Can be divided evenly by the alignment.</returns>
        </member>
        <member name="M:Neurotec.NCore.AlignedCAlloc(System.UIntPtr,System.UIntPtr)">
            <summary>
            Allocates an array in memory with elements initialized to 0 and makes sure that the returned pointer can be divided evenly by alignment.  
            </summary>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <param name="alignment">The alignment.</param>
            <returns>A representation of a pointer (IntPtr type) to the allocated memory block.
            Can be divided evenly by the alignment.</returns>
        </member>
        <member name="M:Neurotec.NCore.AlignedCAlloc(System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates an array in memory with elements initialized to 0 and makes sure that the sum of returned pointer and the offset can be divided evenly by alignment. 
            </summary>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <param name="alignment">The alignment.</param>
            <param name="offset">The offset.</param>
            <returns>A representation of a pointer (IntPtr type) to the allocated memory block.
            Its sum with offset can be divided evenly by the alignment.</returns>
        </member>
        <member name="M:Neurotec.NCore.AlignedCAlloc(System.Int64,System.Int64,System.Int64)">
            <summary>
            Allocates an array in memory with elements initialized to 0 and makes sure that the sum of returned pointer and the offset can be divided evenly by alignment. 
            </summary>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <param name="alignment">The alignment.</param>
            <param name="offset">The offset.</param>
            <returns>A representation of a pointer (IntPtr type) to the allocated memory block.
            Its sum with offset can be divided evenly by the alignment.</returns>
        </member>
        <member name="M:Neurotec.NCore.AlignedCAlloc(System.UIntPtr,System.UIntPtr,System.UIntPtr)">
            <summary>
            Allocates an array in memory with elements initialized to 0 and makes sure that the sum of returned pointer and the offset can be divided evenly by alignment. 
            </summary>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <param name="alignment">The alignment.</param>
            <param name="offset">The offset.</param>
            <returns>A representation of a pointer (IntPtr type) to the allocated memory block.
            Its sum with offset can be divided evenly by the alignment.</returns>
        </member>
        <member name="M:Neurotec.NCore.AlignedReAlloc(System.IntPtr@,System.Int32,System.Int32)">
            <summary>
            Reallocate memory blocks, represented by a pointer that can be divided evenly by the alignment. 
            </summary>
            <param name="pBlock">A representation of a pointer (IntPtr type) to the allocated memory block.
            Can be divided evenly by the alignment.</param>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <param name="alignment">The alignment.</param>
        </member>
        <member name="M:Neurotec.NCore.AlignedReAlloc(System.IntPtr@,System.Int64,System.Int64)">
            <summary>
            Reallocate memory blocks, represented by a pointer that can be divided evenly by the alignment. 
            </summary>
            <param name="pBlock">A representation of a pointer (IntPtr type) to the allocated memory block.
            Can be divided evenly by the alignment.</param>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <param name="alignment">The alignment.</param>
        </member>
        <member name="M:Neurotec.NCore.AlignedReAlloc(System.IntPtr@,System.UIntPtr,System.UIntPtr)">
            <summary>
            Reallocate memory blocks, represented by a pointer that can be divided evenly by the alignment. 
            </summary>
            <param name="pBlock">A representation of a pointer (IntPtr type) to the allocated memory block.
            Can be divided evenly by the alignment.</param>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <param name="alignment">The alignment.</param>
        </member>
        <member name="M:Neurotec.NCore.AlignedReAlloc(System.IntPtr@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reallocate memory blocks, represented by a pointer. A sum of the pointer and an offset can be divided evenly by the alignment.
            </summary>
            <param name="pBlock">A representation of a pointer (IntPtr type) to the allocated memory block.
            Its sum with the offset an be divided evenly by the alignment.</param>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <param name="alignment">The alignment.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Neurotec.NCore.AlignedReAlloc(System.IntPtr@,System.Int64,System.Int64,System.Int64)">
            <summary>
            Reallocate memory blocks, represented by a pointer. A sum of the pointer and an offset can be divided evenly by the alignment.
            </summary>
            <param name="pBlock">A representation of a pointer (IntPtr type) to the allocated memory block.
            Its sum with the offset an be divided evenly by the alignment.</param>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <param name="alignment">The alignment.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Neurotec.NCore.AlignedReAlloc(System.IntPtr@,System.UIntPtr,System.UIntPtr,System.UIntPtr)">
            <summary>
            Reallocate memory blocks, represented by a pointer. A sum of the pointer and an offset can be divided evenly by the alignment.
            </summary>
            <param name="pBlock">A representation of a pointer (IntPtr type) to the allocated memory block.
            Its sum with the offset an be divided evenly by the alignment.</param>
            <param name="size">Size in bytes of memory to be allocated.</param>
            <param name="alignment">The alignment.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Neurotec.NCore.AlignedFree(System.IntPtr)">
            <summary>
            Frees a specified aligned memory block.
            </summary>
            <param name="pBlock">A representation of a pointer (IntPtr type) to the memory block.
            Its sum with the offset an be divided evenly by the memory block's alignment.</param>
        </member>
        <member name="M:Neurotec.NCore.Copy(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Copies data from one memory block to other.
            </summary>
            <param name="pDstBlock">A pointer to destination memory
                                    block (a memory block where the data
                                    from source memory block will be
                                    copied).</param>
            <param name="pSrcBlock">A pointer to memory block to be
                                    copied to another memory block.</param>
            <param name="size">The size of memory block to be
                               copied (the size is in bytes).</param>
        </member>
        <member name="M:Neurotec.NCore.Copy(System.IntPtr,System.IntPtr,System.Int64)">
            <summary>
            Copies data from one memory block to other.
            </summary>
            <param name="pDstBlock">A pointer to destination memory
                                    block (a memory block where the data
                                    from source memory block will be
                                    copied).</param>
            <param name="pSrcBlock">A pointer to memory block to be
                                    copied to another memory block.</param>
            <param name="size">The size of memory block to be
                               copied (the size is in bytes).</param>
        </member>
        <member name="M:Neurotec.NCore.Copy(System.IntPtr,System.IntPtr,System.UIntPtr)">
            <summary>
            Copies data from one memory block to other.
            </summary>
            <param name="pDstBlock">A pointer to destination memory block (a memory block where the data from
                                    source memory block will be copied).</param>
            <param name="pSrcBlock">A pointer to memory block to be copied to another memory block.</param>
            <param name="size">The size of memory block to be copied (the size is in bytes).</param>
        </member>
        <member name="M:Neurotec.NCore.Move(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Moves one memory block to another.
            </summary>
            <param name="pDstBlock">A pointer to destination memory
                                    block.</param>
            <param name="pSrcBlock">A pointer to source memory block.</param>
            <param name="size">Size in bytes to be copied.</param>
            <remarks>
            Copies size bytes from pDstBlock to pSrcBlock.
            
            Make sure that the destination buffer is the same size or
            larger than the source buffer.
            </remarks>
        </member>
        <member name="M:Neurotec.NCore.Move(System.IntPtr,System.IntPtr,System.Int64)">
            <summary>
            Moves one memory block to another.
            </summary>
            <param name="pDstBlock">A pointer to destination memory
                                    block.</param>
            <param name="pSrcBlock">A pointer to source memory block.</param>
            <param name="size">Size in bytes to be copied.</param>
            <remarks>
            <para>Copies size bytes from pDstBlock to pSrcBlock.</para>
            <para>Make sure that the destination buffer is the same size or
            larger than the source buffer.</para>
            </remarks>
        </member>
        <member name="M:Neurotec.NCore.Move(System.IntPtr,System.IntPtr,System.UIntPtr)">
            <summary>
            Moves one memory block to another.
            </summary>
            <param name="pDstBlock">A pointer to destination memory block.</param>
            <param name="pSrcBlock">A pointer to source memory block.</param>
            <param name="size">Size in bytes to be copied.</param>
            <remarks>
            Copies size bytes from pDstBlock to pSrcBlock.
            
            Make sure that the destination buffer is the same size or larger than the source buffer. 
            </remarks>
        </member>
        <member name="M:Neurotec.NCore.Fill(System.IntPtr,System.Byte,System.Int32)">
            <summary>
            Sets memory block to a specified value.
            </summary>
            <param name="pBlock">A pointer to a destination memory block
                                 that contains data.</param>
            <param name="value">A value to set.</param>
            <param name="size">The size in bytes of memory block to be
                               set.</param>
        </member>
        <member name="M:Neurotec.NCore.Fill(System.IntPtr,System.Byte,System.Int64)">
            <summary>
            Sets memory block to a specified value.
            </summary>
            <param name="pBlock">A pointer to a destination memory block
                                 that contains data.</param>
            <param name="value">A value to set.</param>
            <param name="size">The size in bytes of memory block to be
                               set.</param>
        </member>
        <member name="M:Neurotec.NCore.Fill(System.IntPtr,System.Byte,System.UIntPtr)">
            <summary>
            Sets memory block to a specified value.
            </summary>
            <param name="pBlock">A pointer to a destination memory block that contains data.</param>
            <param name="value">A value to set.</param>
            <param name="size">The size in bytes of memory block to be set.</param>
        </member>
        <member name="M:Neurotec.NCore.Clear(System.IntPtr,System.Int32)">
            <summary>
            Clears all elements in the specified array.
            </summary>
            <param name="pBlock">A pointer to memory block that contains
                                 an array.</param>
            <param name="size">The size in bytes of an array.</param>
        </member>
        <member name="M:Neurotec.NCore.Clear(System.IntPtr,System.Int64)">
            <summary>
            Clears all elements in the specified array.
            </summary>
            <param name="pBlock">A pointer to memory block that contains
                                 an array.</param>
            <param name="size">The size in bytes of an array.</param>
        </member>
        <member name="M:Neurotec.NCore.Clear(System.IntPtr,System.UIntPtr)">
            <summary>
            Clears all elements in the specified array.
            </summary>
            <param name="pBlock">A pointer to memory block that contains an array.</param>
            <param name="size">The size in bytes of an array.</param>
        </member>
        <member name="M:Neurotec.NCore.Compare(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Compares two memory blocks.
            </summary>
            <param name="pBlock1">A pointer to the first memory block.</param>
            <param name="pBlock2">A pointer to the second memory block.</param>
            <param name="size">Number of characters to be compared.</param>
            <returns>
            The value indicating the relationship between the memory
            blocks.
            
            If return value is less than zero a block specified by
            pBlock1 is less than a block specified by pBlock2.
            
            if return value is zero a block specified by pBlock1 is
            identical to a block specified by pBlock2.
            
            If return value is greater than zero a block specified by
            pBlock1 is greater than a block specified by pBlock2.
            </returns>
        </member>
        <member name="M:Neurotec.NCore.Compare(System.IntPtr,System.IntPtr,System.Int64)">
            <summary>
            Compares two memory blocks.
            </summary>
            <param name="pBlock1">A pointer to the first memory block.</param>
            <param name="pBlock2">A pointer to the second memory block.</param>
            <param name="size">Number of characters to be compared.</param>
            <returns>
            The value indicating the relationship between the memory
            blocks.
            
            If return value is less than zero a block specified by
            pBlock1 is less than a block specified by pBlock2.
            
            if return value is zero a block specified by pBlock1 is
            identical to a block specified by pBlock2.
            
            If return value is greater than zero a block specified by
            pBlock1 is greater than a block specified by pBlock2. 
            </returns>
        </member>
        <member name="M:Neurotec.NCore.Compare(System.IntPtr,System.IntPtr,System.UIntPtr)">
            <summary>
            Compares two memory blocks.
            </summary>
            <param name="pBlock1">A pointer to the first memory block.</param>
            <param name="pBlock2">A pointer to the second memory block.</param>
            <param name="size">Number of characters to be compared.</param>
            <returns>
            The value indicating the relationship between the memory blocks.
            
            If return value is less than zero a block specified by pBlock1 is less than a block specified by
            pBlock2.
            
            if return value is zero a block specified by pBlock1 is identical to a block specified by pBlock2.
            
            If return value is greater than zero a block specified by pBlock1 is greater than a block specified
            by pBlock2. 
            </returns>
        </member>
        <member name="E:Neurotec.NCore.ErrorSuppressed">
            <summary>
            Occurs when an error is suppressed.
            </summary>
        </member>
        <member name="T:Neurotec.NDisposable">
            <summary>
            Provides a method to release allocated resources.
            </summary>
        </member>
        <member name="M:Neurotec.NDisposable.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Neurotec.NDisposable.Check">
            <summary>
            Checks whether allocated resources were not released
            previously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This exception is
                                                      thrown when
                                                      allocated
                                                      resources were
                                                      released
                                                      previously.</exception>
        </member>
        <member name="M:Neurotec.NDisposable.Dispose(System.Boolean)">
            <summary>
            Performs tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
            <remarks>
            This method is used to close or release unmanaged resources.
            By convention, this method is used for all tasks associated
            with freeing resources held by an object.
            </remarks>                                                  
        </member>
        <member name="P:Neurotec.NDisposable.IsOwned">
            <summary>
            Checks the ownership status. The value of false means that
            allocated resources are controlled by some other object. And Dispose method will not have effect. 
            </summary>                                                                                                                
        </member>
        <member name="P:Neurotec.NDisposable.IsDisposed">
            <summary>
            Gets whether allocated resources were released previously.
            </summary>                                                
        </member>
        <member name="M:Neurotec.NDisposable.Dispose">
            <summary>
            Performs tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
            <remarks>
            This method is used to close or release unmanaged resources.
            By convention, this method is used for all tasks associated
            with freeing resources held by an object.
            </remarks>                                                  
        </member>
        <member name="T:Neurotec.NDllNotFoundException">
            <summary>
            The exception that is thrown when a DLL specified in a DLL import cannot be found.
            </summary>
        </member>
        <member name="P:Neurotec.NDllNotFoundException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="T:Neurotec.NEntryPointNotFoundException">
            <summary>
            The exception which is thrown when an attempt to load a class fails due to the absence of an entry
            method.
            </summary>
        </member>
        <member name="P:Neurotec.NEntryPointNotFoundException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="T:Neurotec.NError">
            <summary>
            Defines error codes used in Neurotechnology components.
            </summary>
        </member>
        <member name="M:Neurotec.NError.GetParam(Neurotec.Interop.HNObject)">
            <summary>
            \ \ 
            </summary>
            <param name="hError">[in] A handle to NError.</param>
            <returns>
            No tables or formatting elements here!!! 
            </returns>
        </member>
        <member name="M:Neurotec.NError.GetDefaultMessage(System.Int32)">
            <summary>
            Gets the default error message.
            </summary>
            <param name="code">Exception code.</param>
            <returns>The error message.</returns>
        </member>
        <member name="M:Neurotec.NError.GetSysErrorMessage(System.Int32)">
            <summary>
            Gets system error message.
            </summary>
            <param name="errno">Exception number.</param>
            <returns>The error message.</returns>
        </member>
        <member name="M:Neurotec.NError.GetMacErrorMessage(System.Int32)">
            <summary>
            Gets Mac OS X error message.
            </summary>
            <param name="err">Exception number.</param>
            <returns>The error message.</returns>
        </member>
        <member name="M:Neurotec.NError.Get(Neurotec.Interop.HNObject)">
            <summary>
            Gets the specified exception. 
            </summary>
            <param name="hError">Handle to the error object.</param>
            <returns>The exception.</returns>
        </member>
        <member name="M:Neurotec.NError.Get(System.Int32,Neurotec.Interop.HNObject)">
            <summary>
            Gets the specified exception.
            </summary>
            <param name="code">Exception code.</param>
            <param name="hError">Handle to the error object.</param>
            <returns>The exception.</returns>
        </member>
        <member name="M:Neurotec.NError.GetLast(System.Int32)">
            <summary>
            Gets the last exception.
            </summary>
            <param name="code">Exception code.</param>
            <returns>The exception.</returns>
        </member>
        <member name="M:Neurotec.NError.SetLast(System.Exception)">
            <summary>
            Sets the last exception.
            </summary>
            <param name="error">The last exception.</param>
            <returns>Exception code.</returns>
        </member>
        <member name="M:Neurotec.NError.Suppress(System.Exception)">
            <summary>
            Suppressed the specified exception.
            </summary>
            <param name="error">The exception to be suppressed.</param>
        </member>
        <member name="M:Neurotec.NError.ToString(System.Exception,System.String)">
            <summary>
            Retrieves a string representation of the specified exception.
            </summary>
            <param name="e">The exception.</param>
            <param name="additionalCode">Additional exception code.</param>
            <returns>String representation of the exception.</returns>
        </member>
        <member name="M:Neurotec.NError.GetMessage(System.String,System.String,System.String)">
            <summary>
            Retrieves an exception message.
            </summary>
            <param name="message">Base message.</param>
            <param name="paramName">Parameter name.</param>
            <param name="param">Parameter value.</param>
            <returns>Exception message.</returns>
        </member>
        <member name="T:Neurotec.NeurotecException">
            <summary>
            The exception that is thrown when unknown error occurred in one of Neurotechnology libraries.
            </summary>
        </member>
        <member name="M:Neurotec.NeurotecException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of NeurotecException class.
            </summary>
            <param name="code">Error code.</param>
        </member>
        <member name="M:Neurotec.NeurotecException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of NeurotecException class.
            </summary>
            <param name="code">Error code.</param>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Neurotec.NeurotecException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of NeurotecException class.
            </summary>
            <param name="code">Error code.</param>
            <param name="message">Error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Neurotec.NeurotecException.ToString">
            <summary>
            Gets a string representation of the current error.
            </summary>
            <returns>The string representing the current error.</returns>
        </member>
        <member name="T:Neurotec.NeurotecExceptionBase">
            <summary>
            The exception that is thrown when unknown error occurred in one of Neurotechnology libraries.
            </summary>
        </member>
        <member name="M:Neurotec.NeurotecExceptionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo object with the parameter name and
            additional exception information.
            </summary>
            <param name="info">The object that holds the serialized
                               object data.</param>
            <param name="context">The contextual information about the
                                  source or destination.</param>
            <remarks>
            GetObjectData sets a SerializationInfo with all the exception
            object data targeted for serialization. During
            deserialization, the exception object is reconstituted from
            the SerializationInfo transmitted over the stream.
            </remarks>
        </member>
        <member name="P:Neurotec.NeurotecExceptionBase.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack.
            </value>
        </member>
        <member name="P:Neurotec.NeurotecExceptionBase.Code">
            <summary>
            Gets an error code of the current exception.
            </summary>
            <value>
            Error code.
            </value>
        </member>
        <member name="T:Neurotec.NException">
            <summary>
            Standard error has occurred (for internal use).
            </summary>
        </member>
        <member name="P:Neurotec.NException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="P:Neurotec.NException.Code">
            <summary>
            Retrieves the error code.
            </summary>
            <value>
            Error code.
            </value>
        </member>
        <member name="T:Neurotec.NExpandableObject">
            <summary>
            Provides functionality for retrieving information about specified object.
            </summary>
        </member>
        <member name="P:Neurotec.NExpandableObject.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.NExpandableObject.Properties">
            <summary>
            Gets the property bag of the expandable object.
            </summary>
        </member>
        <member name="T:Neurotec.NFormatException">
            <summary>
            The exception which is thrown when format of argument value is invalid.
            </summary>
        </member>
        <member name="P:Neurotec.NFormatException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="T:Neurotec.NIndexOutOfRangeException">
            <summary>
            This error occurs when index is out of range (for internal use).
            </summary>
        </member>
        <member name="P:Neurotec.NIndexOutOfRangeException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="T:Neurotec.NInvalidCastException">
            <summary>
            The exception that is thrown for invalid casting or explicit conversion.
            </summary>
        </member>
        <member name="P:Neurotec.NInvalidCastException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="T:Neurotec.NInvalidOperationException">
            <summary>
            Attempted to perform invalid operation.
            </summary>
        </member>
        <member name="P:Neurotec.NInvalidOperationException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="T:Neurotec.NModuleOptions">
            <summary>
            Enumerates module options.
            </summary>                                                 
        </member>
        <member name="F:Neurotec.NModuleOptions.None">
            <summary>
            No option for the module.
            </summary>
        </member>
        <member name="F:Neurotec.NModuleOptions.Debug">
            <summary>
            The module is a debug version.
            </summary>
        </member>
        <member name="F:Neurotec.NModuleOptions.Protected">
            <summary>
            The module is copy-protected.
            </summary>
        </member>
        <member name="F:Neurotec.NModuleOptions.Unicode">
            <summary>
            The module in compiled with Unicode in it.
            </summary>
        </member>
        <member name="F:Neurotec.NModuleOptions.NoAnsiFunc">
            <summary>
            The module has no ANSI versions for function.
            </summary>
        </member>
        <member name="F:Neurotec.NModuleOptions.NoUnicode">
            <summary>
            The module has no Unicode versions for functions.
            </summary>
        </member>
        <member name="F:Neurotec.NModuleOptions.Lib">
            <summary>
            The module is in a static library.
            </summary>
        </member>
        <member name="F:Neurotec.NModuleOptions.Exe">
            <summary>
            The module is in an executable file.
            </summary>
        </member>
        <member name="T:Neurotec.NModule">
            <summary>
            Performs reflection on a module.
            </summary>                      
        </member>
        <member name="P:Neurotec.NModule.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.NModule.NModuleOptionsNativeType">
            <summary>
            Defines the native type of the module options.
            </summary>
        </member>
        <member name="M:Neurotec.NModule.GetLoadedModules">
            <summary>
            Gets all the loaded modules that are part of this assembly.
            </summary>
            <returns>
            An array of modules.
            </returns>
            <remarks>
            NObjectUnref shall be called on returned objects when they are no longer used to prevent memory
            leaks.
            </remarks>                                                                                     
        </member>
        <member name="M:Neurotec.NModule.LoadFromFile(System.String)">
            <summary>
            Loads module from the specified file.
            </summary>
            <param name="fileName">Name of a file or full path to file.</param>
            <returns>
            NModule object.
            </returns>                                                         
        </member>
        <member name="M:Neurotec.NModule.#ctor">
            <summary>
            Initializes a new instance of NModule class.
            </summary>
        </member>
        <member name="M:Neurotec.NModule.CheckInit(System.Boolean)">
            <summary>
            Checks whether the current module is initialized and throws and exception if it is not.
            </summary>
            <param name="lazy">true if the initialization is lazy; else false.</param>
        </member>
        <member name="M:Neurotec.NModule.GetDependences">
            <summary>
            Retrieves dependencies of the module.
            </summary>
            <returns>
            A pointer to an array of dependencies.
            </returns>
            <remarks>
            NObjectUnref shall be called on returned objects when they are no longer used to prevent memory
            leaks.
            </remarks>                                                                                     
        </member>
        <member name="M:Neurotec.NModule.GetType(System.String)">
            <summary>
            Retrieves the NType object from module specified by name.
            </summary>
            <param name="name">Type name.</param>
            <returns>
            NType object. 
            </returns>                                               
        </member>
        <member name="M:Neurotec.NModule.CreateInstance(System.String)">
            <summary>
            Creates a new instance of the specified module.
            </summary>
            <param name="name">The name of the new module instance. </param>
            <returns>
            Created module object.
            </returns>                                                      
        </member>
        <member name="M:Neurotec.NModule.CreateInstance(System.String,Neurotec.NAttributes)">
            <summary>
            Creates a new instance of the specified module.
            </summary>
            <param name="name">The name of the new module instance. </param>
            <param name="attributes">Module attributes. </param>
            <returns>
            Created module object.
            </returns>                                                      
        </member>
        <member name="P:Neurotec.NModule.Options">
            <summary>
            Retrieves module options.
            </summary>               
        </member>
        <member name="P:Neurotec.NModule.Name">
            <summary>
            Retrieves module name.
            </summary>            
        </member>
        <member name="P:Neurotec.NModule.Title">
            <summary>
            Retrieves module's title.
            </summary>               
        </member>
        <member name="P:Neurotec.NModule.Product">
            <summary>
            Retrieves product name.
            </summary>             
        </member>
        <member name="P:Neurotec.NModule.Company">
            <summary>
            Retrieves company name.
            </summary>             
        </member>
        <member name="P:Neurotec.NModule.Copyright">
            <summary>
            Retrieves copyright notice of this module.
            </summary>                                
        </member>
        <member name="P:Neurotec.NModule.Id">
            <summary>
            Gets or sets the ID of the module.
            </summary>
            <value>
            String containing module Id.
            </value>                          
        </member>
        <member name="P:Neurotec.NModule.NativeId">
            <summary>
            Gets or sets the native ID of the specified module.
            </summary>
            <value>
            String containing native Id.
            </value>                                           
        </member>
        <member name="P:Neurotec.NModule.VersionMajor">
            <summary>
            Retrieves the major version value.
            </summary>
        </member>
        <member name="P:Neurotec.NModule.VersionMinor">
            <summary>
            Retrieves the minor version value.
            </summary>
        </member>
        <member name="P:Neurotec.NModule.VersionBuild">
            <summary>
            Retrieves the build of the current version.
            </summary>
        </member>
        <member name="P:Neurotec.NModule.VersionRevision">
            <summary>
            Retrieves revision of the current version.
            </summary>
        </member>
        <member name="P:Neurotec.NModule.Version">
            <summary>
            Retrieves module version number.
            </summary>                     
        </member>
        <member name="P:Neurotec.NModule.FileName">
            <summary>
            Retrieves the name of the file the specified module was created from.
            </summary>
            <value>
            String of a file name. 
            </value>                                                             
        </member>
        <member name="P:Neurotec.NModule.Activated">
            <summary>
            Checks if the module is registered. 
            </summary>                          
        </member>
        <member name="P:Neurotec.NModule.DefinedTypes">
            <summary>
            Retrieves all defined types from the specified module.
            </summary>
            <value>
            Collection of all defined types. 
            </value>                                              
        </member>
        <member name="T:Neurotec.NNotImplementedException">
            <summary>
            This error occurs when trying to use functionality which is not implemented yet.
            </summary>
        </member>
        <member name="P:Neurotec.NNotImplementedException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="T:Neurotec.NNotSupportedException">
            <summary>
            This error occurs when trying to use functionality which is not supported.
            </summary>
        </member>
        <member name="P:Neurotec.NNotSupportedException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="T:Neurotec.NNullReferenceException">
            <summary>
            Null reference has occurred (for internal use).
            </summary>
        </member>
        <member name="P:Neurotec.NNullReferenceException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="T:Neurotec.NObject">
            <summary>
            Provides functionality for retrieving information about
            specified object.
            </summary>                                             
        </member>
        <member name="T:Neurotec.NObject.NObjectCallback">
            <summary>
            Creates a delegate to NObjectCallback function.
            </summary>
            <param name="hObject">Pointer to the object.</param>
            <param name="pParam">Pointer to function parameter.</param>
            <returns>NResult.</returns>
        </member>
        <member name="T:Neurotec.NObject.FromHandlePlain">
            <summary>
            Creates a delegate to FromHandlePlain function.
            </summary>
            <param name="handle">Object handle.</param>
            <returns>NObject value.</returns>
        </member>
        <member name="T:Neurotec.NObject.GetObjectPlain">
            <summary>
            Creates a delegate to a function which returns a plain object.
            </summary>
            <param name="hValue">[out] Object value.</param>
            <returns>NResult.</returns>
        </member>
        <member name="T:Neurotec.NObject.GetObjectWithHandle">
            <summary>
            Creates a delegate to a function, which returns an object with handle.
            </summary>
            <param name="handle">Object handle.</param>
            <param name="hValue">[out] Object value.</param>
            <returns>NResult.</returns>
        </member>
        <member name="T:Neurotec.NObject.SetObjectPlain">
            <summary>
            Creates a delegate to a function, which sets a value of a plain object.
            </summary>
            <param name="hValue">Object value.</param>
            <returns>NResult.</returns>
        </member>
        <member name="T:Neurotec.NObject.SetObjectWithHandle">
            <summary>
            Creates a delegate to a function, which sets a value of an object with handle.
            </summary>
            <param name="handle">Object handle.</param>
            <param name="hValue">Object value.</param>
            <returns>NResult.</returns>
        </member>
        <member name="T:Neurotec.NObject.GetOutArrayPlain">
            <summary>
            Creates a delegate to a function, which gets a plain out array.
            </summary>
            <param name="arValues">[out] Pointer to an array of values.</param>
            <param name="count">[out] Number of elements in the array.</param>
            <returns>NResult.</returns>
        </member>
        <member name="T:Neurotec.NObject.GetOutArrayWithHandle">
            <summary>
            Creates a delegate to a function, which gets an out array with a handle.
            </summary>
            <param name="handle">Array handle.</param>
            <param name="arValues">Pointer to an array of values.</param>
            <param name="count">[out] Number of elements in the array.</param>
            <returns>NResult.</returns>
        </member>
        <member name="T:Neurotec.NObject.GetArrayPlain">
            <summary>
            Creates a delegate to a function, which gets a plain array.
            </summary>
            <param name="arValues">Pointer to an array of values.</param>
            <param name="valuesLength">Length of values.</param>
            <returns>NResult.</returns>
        </member>
        <member name="T:Neurotec.NObject.SetArrayPlain">
            <summary>
            Creates a delegate to a function, which sets values of a plain array.
            </summary>
            <param name="arValues">Pointer to an array of values.</param>
            <param name="valueCount">Number of values.</param>
            <returns>NResult.</returns>
        </member>
        <member name="T:Neurotec.NObject.GetArrayWithHandle">
            <summary>
            Creates a delegate to a function, which gets an array with handle.
            </summary>
            <param name="handle">Array handle.</param>
            <param name="arValues">Pointer to an array of values.</param>
            <param name="valuesLength">Length of values.</param>
            <returns>NResult.</returns>
        </member>
        <member name="T:Neurotec.NObject.SetArrayWithHandle">
            <summary>
            Creates a delegate to a function, which sets values of an array with handle.
            </summary>
            <param name="handle">Array handle.</param>
            <param name="arValues">Pointer to an array of values.</param>
            <param name="valueCount">Number of values.</param>
            <returns>NResult.</returns>
        </member>
        <member name="T:Neurotec.NObject.GetStringPlainN">
            <summary>
            Creates a delegate to a function, which gets a plain string.
            </summary>
            <param name="hValue">[out] String value.</param>
            <returns>NResult.</returns>
        </member>
        <member name="T:Neurotec.NObject.SetStringPlainN">
            <summary>
            Creates a delegate to a function, which sets a plain string.
            </summary>
            <param name="value">String value.</param>
            <returns>NResult.</returns>
        </member>
        <member name="T:Neurotec.NObject.GetStringWithHandleN">
            <summary>
            Creates a delegate to a function, which gets a string with handle.
            </summary>
            <param name="handle">String handle.</param>
            <param name="hValue">[out] String value.</param>
            <returns>NResult.</returns>
        </member>
        <member name="T:Neurotec.NObject.SetStringWithHandleN">
            <summary>
            Creates a delegate to a function, which sets a string with handle.
            </summary>
            <param name="handle">String handle.</param>
            <param name="value">String value.</param>
            <returns>NResult.</returns>
        </member>
        <member name="T:Neurotec.NObject.EventInvoker`1">
            <summary>
            Creates a delegate to an event invoker function.
            </summary>
            <param name="ea">The event to be invoked.</param>
        </member>
        <member name="F:Neurotec.NObject.FlagRefRet">
            <summary>
            This flag indicates that an object should be returned with incremented ref count.
            </summary>
        </member>
        <member name="P:Neurotec.NObject.NativeType">
            <summary>
            Neurotechnology framework type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.NObject.FromHandle``1(System.IntPtr)">
            <summary>
            Create C# object from native API objects handle.<para></para>
            <b>This method supports the .NET Framework infrastructure and is not intended to
            be used directly from your code.</b>
            </summary>
            <param name="hObject">Handle of the object in native API.</param>
            <returns>
            C# object associated with native API object.
            </returns>                                                                      
        </member>
        <member name="M:Neurotec.NObject.FromHandle``1(System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Create C# object from native API objects handle.<para></para>
            <b>This method supports the .NET Framework infrastructure and is not intended to
            be used directly from your code.</b>
            </summary>
            <param name="hObject">Handle of the object in native API.</param>
            <param name="ownsHandle">Will the created C# object become the owner of the handle.</param>
            <param name="cache">Whether the object is created from a cache.</param>
            <returns>
            C# object associated with native API object.
            </returns>                                                                      
        </member>
        <member name="M:Neurotec.NObject.FromHandle``1(Neurotec.Interop.HNObject)">
            <summary>
            Create C# object from native API objects handle.<para></para>
            <b>This method supports the .NET Framework infrastructure and is not intended to
            be used directly from your code.</b>
            </summary>
            <param name="handle">Handle of the object in native API.</param>
            <returns>
            C# object associated with native API object.
            </returns>                                                                      
        </member>
        <member name="M:Neurotec.NObject.FromHandle``1(Neurotec.Interop.HNObject,System.Boolean)">
            <summary>
            Create C# object from native API objects handle.
            
            <b>This method supports the .NET Framework infrastructure and is not intended to be used directly
            from your code.</b>
            </summary>
            <param name="handle">Handle of the object in native API.</param>
            <param name="cache">Will the created C# object use cache.</param>
            <returns>
            C# object associated with native API object. 
            </returns>                                                                                       
        </member>
        <member name="M:Neurotec.NObject.Ref(System.IntPtr)">
            <summary>
            Increments the reference count for an interface on a specified object.
            This function should be called for every new copy of a pointer to an interface of HNObject.
            </summary>
            <param name="hObject">Handle to an object to increment its reference count.</param>
        </member>
        <member name="M:Neurotec.NObject.Unref(System.IntPtr)">
            <summary>
            Decrements the reference count for an interface on a specified object.
            This function should be called on returned objects when they are no longer used to prevent memory leaks.
            </summary>
            <param name="hObject">Handle to an object to decrement its reference count.</param>
        </member>
        <member name="M:Neurotec.NObject.UnrefElements(System.IntPtr,System.Int32)">
            <summary>
            Decrements the reference count for an interface on specified array of objects.
            This function should be called on returned objects array when they are no longer used to prevent memory leaks.
            </summary>
            <param name="arhValues">Handle to array of objects which reference count should be decremented.</param>
            <param name="count">Objects in arhObjects count.</param>
        </member>
        <member name="M:Neurotec.NObject.UnrefArray(System.IntPtr,System.Int32)">
            <summary>
            Decrements the reference count for an interface on specified array of objects.
            This function should be called on returned objects array when they are no longer used to prevent memory leaks.
            </summary>
            <param name="arhValues">Handle to array of objects which reference count should be decremented.</param>
            <param name="count">Objects in arhObjects count.</param>
        </member>
        <member name="M:Neurotec.NObject.DisposeArray``1(``0[])">
            <summary>
            Frees an array of objects.
            </summary>
            <param name="objects">The array to be freed.</param>
        </member>
        <member name="M:Neurotec.NObject.ToHandle(Neurotec.NObject)">
            <summary>
            Gets the representation of native API handle corresponding to the C# object.
            </summary>
            <param name="obj">C# level object.</param>
            <returns>C# wrapper of native API handle.</returns>
        </member>
        <member name="M:Neurotec.NObject.FromObject(System.Object)">
            <summary>
            Creates a new NObject from the specified object.
            </summary>
            <param name="obj">The original object.</param>
            <returns>The new NObject.</returns>
        </member>
        <member name="M:Neurotec.NObject.ToObject(Neurotec.NObject)">
            <summary>
            Creates a new object from the specified NObject.
            </summary>
            <param name="obj">The original NObject.</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:Neurotec.NObject.GetObject``1(Neurotec.NObject.GetObjectPlain)">
            <summary>
            Helper function for getting data from the native object.
            
            <b>This method supports the .NET Framework infrastructure and is not intended to be used directly
            from your code.</b>
            </summary>
            <param name="getObject">The getter function of the native object.</param>
            <returns>
            The object returned by delegate specified in getObject argument. 
            </returns>                                                                                       
        </member>
        <member name="M:Neurotec.NObject.GetObject``1(Neurotec.NObject.GetObjectPlain,System.Boolean)">
            <summary>
            Helper function for getting data from the native object.
            
            <b>This method supports the .NET Framework infrastructure and is not intended to be used directly
            from your code.</b>
            </summary>
            <param name="getObject">The getter function of the native object.</param>
            <param name="cache">Whether a cache is used.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.NObject.SetObject``1(Neurotec.NObject.SetObjectPlain,``0)">
            <summary>
            Helper function for setting data of the native object.
            
            <b>This method supports the .NET Framework infrastructure and is not intended to be used directly
            from your code.</b>
            </summary>
            <param name="setObject">The setter function of the native object.</param>
            <param name="value">The new value to set.</param>                                                
        </member>
        <member name="M:Neurotec.NObject.GetArray``1(Neurotec.NObject.GetOutArrayPlain)">
            <summary>
            Helper function for getting data from the native object.
            
            <b>This method supports the .NET Framework infrastructure and is not intended to be used directly
            from your code.</b>
            </summary>
            <param name="getArray">The getter function of the native object.</param>
            <returns>
            The array of elements returned by delegate specified in getArray argument.
            </returns>                                                                                       
        </member>
        <member name="M:Neurotec.NObject.GetArray``1(Neurotec.NObject.GetArrayPlain)">
            <summary>
            Helper function for getting data from the native object.
            <para></para><b>This method supports the .NET Framework infrastructure and is not intended to be used directly from your code.</b>
            </summary>
            <typeparam name="T">Type of the array's element.</typeparam>
            <param name="getArray">The getter function of the native object.</param>
            <returns>The array of elements returned by delegate specified in getArray argument.</returns>
        </member>
        <member name="M:Neurotec.NObject.GetObjects``1(Neurotec.NObject.GetOutArrayPlain)">
            <summary>
            Helper function for getting data from the native object.
            
            <b>This method supports the .NET Framework infrastructure and is not intended to be used directly
            from your code.</b>
            </summary>
            <param name="getArray">The getter function of the native object.</param>
            <returns>
            The array of objects returned by delegate specified in getObjects argument. 
            </returns>
        </member>
        <member name="M:Neurotec.NObject.GetObjects``1(Neurotec.NObject.GetOutArrayPlain,System.Boolean,System.Boolean)">
            <summary>
            Helper function for getting data from the native object.
            
            <b>This method supports the .NET Framework infrastructure and is not intended to be used directly.</b>
            </summary>
            <param name="getArray">The getter function of the native object.</param>
            <param name="ownsHandles">Whether the objects own handles.</param>
            <param name="cache">Whether a cache is used.</param>
            <returns>The array of objects returned by delegate specified in getObjects argument.</returns>
        </member>
        <member name="M:Neurotec.NObject.GetObjects``1(Neurotec.NObject.GetArrayPlain)">
            <summary>
            Helper function for getting data from the native object.
            
            <b>This method supports the .NET Framework infrastructure and is not intended to be used directly
            from your code.</b>
            </summary>
            <param name="getArray">The getter function of the native object.</param>
            <returns>
            The array of elements returned by delegate specified in getArray argument. 
            </returns>                                                                                       
        </member>
        <member name="M:Neurotec.NObject.GetObjects``1(Neurotec.NObject.GetArrayPlain,System.Boolean,System.Boolean)">
            <summary>
            Helper function for getting data from the native object.
            
            <b>This method supports the .NET Framework infrastructure and is not intended to be used directly.</b>
            </summary>
            <param name="getArray">The getter function of the native object.</param>
            <param name="ownsHandles">Whether the objects own handles.</param>
            <param name="cache">Whether a cache is used.</param>
            <returns>The array of objects returned by delegate specified in getObjects argument.</returns>
        </member>
        <member name="M:Neurotec.NObject.SetArray``1(Neurotec.NObject.SetArrayPlain,``0[])">
            <summary>
            Helper function for setting data of the native object.
            <para></para><b>This method supports the .NET Framework infrastructure and is not intended to be used directly from your code.</b>
            </summary>
            <typeparam name="T">Type of the array's element.</typeparam>
            <param name="setArray">The setter function of the native object.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:Neurotec.NObject.GetString(Neurotec.NObject.GetStringPlainN)">
            <summary>
            Helper function for getting data from the native object.
            <para></para><b>This method supports the .NET Framework infrastructure and is not intended to be used directly from your code.</b>
            </summary>
            <param name="getString">The getter function of the native object.</param>
            <returns>The text returned by delegate specified in getString argument.</returns>
        </member>
        <member name="M:Neurotec.NObject.SetString(Neurotec.NObject.SetStringPlainN,System.String)">
            <summary>
            Helper function for setting data of the native object.
            <para></para><b>This method supports the .NET Framework infrastructure and is not intended to be used directly from your code.</b>
            </summary>
            <param name="setString">The setter function of the native object.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:Neurotec.NObject.CopyProperties(Neurotec.NObject,Neurotec.NObject)">
            <summary>
            Copies property values from one NObject object to another.
            </summary>
            <param name="srcObj">Source NObject object 
                                        which should be copied.</param>
            <param name="dstObj">Destination NObject object
                                             where source object will be
                                             copied.</param>   
        </member>
        <member name="M:Neurotec.NObject.GetSizeMany``1(``0[])">
            <summary>
            \Returns the size of objects in the array.
            </summary>
            <param name="objects">An array of objects.</param>
            <returns>
            Objects' size.
            </returns>                                        
        </member>
        <member name="M:Neurotec.NObject.GetSizeMany``1(``0[],System.UInt32)">
            <summary>
            Returns the size of objects in the array.
            </summary>
            <param name="objects">An array of objects.</param>
            <param name="flags">Objects' flags.</param>
            <returns>
            Objects' size.
            </returns>                                        
        </member>
        <member name="M:Neurotec.NObject.SaveMany``1(``0[],Neurotec.IO.NBuffer)">
            <summary>
            Saves an array of objects into a buffer.
            </summary>
            <param name="objects">An object array.</param>
            <param name="buffer">Destination buffer.</param>
            <returns>Buffer size.</returns>
        </member>
        <member name="M:Neurotec.NObject.SaveMany``1(``0[],Neurotec.IO.NBuffer,System.UInt32)">
            <summary>
            Saves an array of objects into a buffer.
            </summary>
            <param name="objects">An object array.</param>
            <param name="buffer">Destination buffer.</param>
            <param name="flags">Must be zero.</param>
            <returns>Buffer size.</returns>
        </member>
        <member name="M:Neurotec.NObject.SaveMany``1(``0[])">
            <summary>
            Saves an array of objects into a buffer.
            </summary>
            <param name="objects">An object array.</param>
            <returns>The destination buffer.</returns>
        </member>
        <member name="M:Neurotec.NObject.SaveMany``1(``0[],System.UInt32)">
            <summary>
            Saves an array of objects into a buffer.
            </summary>
            <param name="objects">An object array.</param>
            <param name="flags">Must be zero.</param>
            <returns>The destination buffer.</returns>
        </member>
        <member name="M:Neurotec.NObject.#ctor(Neurotec.Interop.HNObject)">
            <summary>
            Constructor.
            <para /><b>This method supports the .NET Framework infrastructure and is not intended to be used directly from your code.</b>
            </summary>
            <param name="handle">The wrapper of native API handle.</param>
        </member>
        <member name="M:Neurotec.NObject.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Neurotec.NObject.GetArray``1(Neurotec.NObject.GetArrayWithHandle)">
            <summary>
            Helper function for getting data from the native object.
            <para></para><b>This method supports the .NET Framework infrastructure and is not intended to be used directly from your code.</b>
            </summary>
            <typeparam name="T">Type of the array's element.</typeparam>
            <param name="getArray">The getter function of the native object.</param>
            <returns>The array of elements returned by delegate specified in getArray argument.</returns>
        </member>
        <member name="M:Neurotec.NObject.SetArray``1(Neurotec.NObject.SetArrayWithHandle,``0[])">
            <summary>
            Helper function for setting data of the native object.
            <para></para><b>This method supports the .NET Framework infrastructure and is not intended to be used directly from your code.</b>
            </summary>
            <typeparam name="T">Type of the array's element.</typeparam>
            <param name="setArray">The setter function of the native object.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:Neurotec.NObject.Equals(System.Object)">
            <summary>
            Compares the objects.
            </summary>
            <param name="obj">Other object to be compared with.</param>
            <returns>
            true if objects are equal. 
            </returns>                                                 
        </member>
        <member name="M:Neurotec.NObject.CompareTo(System.Object)">
            <summary>
            Compares the current object with the specified version and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="obj">The other object.</param>
            <returns>Integer that indicates their relative position in the sort order.</returns>
        </member>
        <member name="M:Neurotec.NObject.GetHashCode">
            <summary>
            Gets hash code (numeric value) representing the object. Is
            intended for a hash function for a particular type.
            GetHashCode is suitable for use in hashing algorithms and
            data structures like a hash table.
            </summary>
            <returns>
            Hash code for the object. 
            </returns>                                                
        </member>
        <member name="M:Neurotec.NObject.ToString">
            <summary>
            Returns string representation of the object.
            </summary>
            <returns>
            String representation of the object.
            </returns>                                   
        </member>
        <member name="M:Neurotec.NObject.ToString(System.String)">
            <summary>
            Retrieves a string representation of the object.
            </summary>
            <param name="format">Reserved.</param>
            <returns>A string representation of the object.</returns>
        </member>
        <member name="M:Neurotec.NObject.GetNativeType">
            <summary>
            Retrieves native type of object.
            </summary>
            <returns>
            NativeType value.
            </returns>                      
        </member>
        <member name="M:Neurotec.NObject.Clone">
            <summary>
            Creates a copy of specified object.
            </summary>
            <returns>
            Reference to cloned object. 
            </returns>                         
        </member>
        <member name="M:Neurotec.NObject.Reset">
            <summary>Resets all NObject parameters to default values.</summary>
        </member>
        <member name="M:Neurotec.NObject.GetProperty(System.String)">
            <summary>
            Retrieves the specified property of the current object.
            </summary>
            <param name="name">Name of the property.</param>
            <returns>The specified property.</returns>
        </member>
        <member name="M:Neurotec.NObject.SetProperty(System.String,System.Object)">
            <summary>
            Sets the value of the specified property.
            </summary>
            <param name="name">Name of the property to be set.</param>
            <param name="value">The new value of the property.</param>
        </member>
        <member name="M:Neurotec.NObject.SetProperty``1(System.String,``0)">
            <summary>
            Sets the value of the specified property.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="name">Name of the property to be set.</param>
            <param name="value">The new value of the property.</param>
        </member>
        <member name="M:Neurotec.NObject.ResetProperty(System.String)">
            <summary>
            Resets the value of the specified property.
            </summary>
            <param name="name">Name of the property to be reset.</param>
        </member>
        <member name="M:Neurotec.NObject.Save(Neurotec.IO.NStream)">
            <summary>
            Saves the current object into a stream.
            </summary>
            <param name="stream">The destination stream.</param>
        </member>
        <member name="M:Neurotec.NObject.Save(Neurotec.IO.NStream,System.UInt32)">
            <summary>
            Saves the current object into a stream.
            </summary>
            <param name="stream">The destination stream.</param>
            <param name="flags">Must be zero.</param>
        </member>
        <member name="M:Neurotec.NObject.Save">
            <summary>
            Saves the current object into a buffer.
            </summary>
            <returns>The destination NBuffer.</returns>
        </member>
        <member name="M:Neurotec.NObject.Save(System.UInt32)">
            <summary>
            Saves the current object into a buffer.
            </summary>
            <param name="flags">Must be zero.</param>
            <returns>The destination NBuffer.</returns>
        </member>
        <member name="M:Neurotec.NObject.GetSize">
            <summary>
            Returns the size of the current object.
            </summary>
            <returns>
            The object's size.
            </returns>                              
        </member>
        <member name="M:Neurotec.NObject.GetSize(System.UInt32)">
            <summary>
            Returns the size of the current object.
            </summary>
            <param name="flags">Object's flags.</param>
            <returns>
            The object's size. 
            </returns>                                 
        </member>
        <member name="M:Neurotec.NObject.Save(Neurotec.IO.NBuffer)">
            <summary>
            Saves the current object into a buffer.
            </summary>
            <param name="buffer">The destination buffer.</param>
            <returns>The buffer size.</returns>
        </member>
        <member name="M:Neurotec.NObject.Save(Neurotec.IO.NBuffer,System.UInt32)">
            <summary>
            Saves the current object into a buffer.
            </summary>
            <param name="buffer">The destination buffer.</param>
            <param name="flags">Must be zero.</param>
            <returns>The buffer size.</returns>
        </member>
        <member name="M:Neurotec.NObject.CaptureProperties(Neurotec.NPropertyBag)">
            <summary>
            Adds the properties of the specified object to the specified property bag.
            </summary>
            <param name="properties">Property bag to add. </param>                    
        </member>
        <member name="P:Neurotec.NObject.IsDisposed">
            <summary>
            Checks whether the current object is disposed.
            </summary>
        </member>
        <member name="P:Neurotec.NObject.SafeHandle">
            <summary>
            Gets safe handle to unmanaged NObject.
            </summary>
        </member>
        <member name="P:Neurotec.NObject.Owner">
            <summary>
            Gets owner of the object.
            </summary>
            <value>
            Object (owner) of NObject type.
            </value>                       
        </member>
        <member name="P:Neurotec.NObject.Flags">
            <summary>
            Gets flags from object.
            </summary>
            <value>
            Object flags.
            </value>               
        </member>
        <member name="E:Neurotec.NObject.PropertyChanged">
            <summary>
            Adds or removes a "Property Changed" event.
            </summary>
        </member>
        <member name="P:Neurotec.NObjectPart.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="T:Neurotec.NotActivatedException">
            <summary>
            The exception that is thrown when one of required
            Neurotechnology libraries is not activated.
            </summary>
        </member>
        <member name="M:Neurotec.NotActivatedException.#ctor">
            <summary>
            Initializes a new instance of NotActivatedException class.
            </summary>
        </member>
        <member name="M:Neurotec.NotActivatedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of NotActivatedException class.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Neurotec.NotActivatedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of NotActivatedException class.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Neurotec.NOperationCanceledException">
            <summary>
            This error occurs when there were not enough memory to proceed task.
            </summary>
        </member>
        <member name="P:Neurotec.NOperationCanceledException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="T:Neurotec.NOutOfMemoryException">
            <summary>
            This error occurs when there were not enough memory to proceed task.
            </summary>
        </member>
        <member name="P:Neurotec.NOutOfMemoryException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="T:Neurotec.NOverflowException">
            <summary>
            This error occurs if an arithmetic overflow has occurred.
            </summary>
        </member>
        <member name="P:Neurotec.NOverflowException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="T:Neurotec.NProcessorVendor">
            <summary>Specifies the processor's vendor name.</summary>
        </member>
        <member name="F:Neurotec.NProcessorVendor.Unknown">
            <summary>The processor's vendor is unknown.</summary>
        </member>
        <member name="F:Neurotec.NProcessorVendor.Amd">
            <summary>Advanced Micro Devices, Inc. (AMD).</summary>
        </member>
        <member name="F:Neurotec.NProcessorVendor.Centaur">
            <summary>Centaur Technology.</summary>
        </member>
        <member name="F:Neurotec.NProcessorVendor.Cyrix">
            <summary>Cyrix.</summary>
        </member>
        <member name="F:Neurotec.NProcessorVendor.Intel">
            <summary>Intel Corporation.</summary>
        </member>
        <member name="F:Neurotec.NProcessorVendor.NationalSemiconductor">
            <summary>National Semiconductor.</summary>
        </member>
        <member name="F:Neurotec.NProcessorVendor.NexGen">
            <summary>NexGen.</summary>
        </member>
        <member name="F:Neurotec.NProcessorVendor.RiseTechnology">
            <summary>Rise Technology.</summary>
        </member>
        <member name="F:Neurotec.NProcessorVendor.SiS">
            <summary>Silicon Integrated Systems (SIS) Corp.</summary>
        </member>
        <member name="F:Neurotec.NProcessorVendor.Transmeta">
            <summary>Transmeta Corporation.</summary>
        </member>
        <member name="F:Neurotec.NProcessorVendor.Umc">
            <summary>UMC.</summary>
        </member>
        <member name="F:Neurotec.NProcessorVendor.Via">
            <summary>VIA.</summary> 
        </member>
        <member name="T:Neurotec.NProcessorInfo">
            <summary>
            Provides functionality for getting processor information. 
            </summary>                                                
        </member>
        <member name="M:Neurotec.NProcessorInfo.GetModelInfo(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Retrieves processor model information.
            </summary>
            <param name="family">Integer representing processor's
                                 family.</param>
            <param name="model">Integer representing processor's
                                model name.</param>
            <param name="stepping">Integer representing processor's
                                   stepping.</param>               
        </member>
        <member name="P:Neurotec.NProcessorInfo.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.NProcessorInfo.NProcessorVendorNativeType">
            <summary>
            Defines the native type of the processor vendor.
            </summary>
        </member>
        <member name="P:Neurotec.NProcessorInfo.Count">
            <summary>
            Retrieves the number of logical processors in the current group.
            </summary>
            <value>
            The number of logical processors in the current group.
            </value>                                                        
        </member>
        <member name="P:Neurotec.NProcessorInfo.VendorName">
            <summary>
            Gets a string representing processor vendor's name.
            </summary>                                         
        </member>
        <member name="P:Neurotec.NProcessorInfo.Vendor">
            <summary>
            Gets current processor's vendor value in vendor's
            enumeration.
            </summary>                                       
        </member>
        <member name="P:Neurotec.NProcessorInfo.ModelName">
            <summary>
            Gets a string representing processor model's name. 
            </summary>                                         
        </member>
        <member name="P:Neurotec.NProcessorInfo.IsMmxSupported">
            <summary>
            Gets a boolean representing if processor supports MMX
            instructions set. 
            </summary>                                           
        </member>
        <member name="P:Neurotec.NProcessorInfo.Is3DNowSupported">
            <summary>
            Gets a boolean representing if processor supports 3DNow
            instructions set. 
            </summary>                                             
        </member>
        <member name="P:Neurotec.NProcessorInfo.IsSseSupported">
            <summary>
            Gets a boolean representing if processor supports SSE
            instructions. 
            </summary>                                           
        </member>
        <member name="P:Neurotec.NProcessorInfo.IsSse2Supported">
            <summary>
            Gets a boolean representing if processor supports SSE2
            instructions set. 
            </summary>                                            
        </member>
        <member name="P:Neurotec.NProcessorInfo.IsSse3Supported">
            <summary>
            Gets a boolean representing if processor supports SSE3
            instructions set. 
            </summary>                                            
        </member>
        <member name="P:Neurotec.NProcessorInfo.IsSsse3Supported">
            <summary>
            Gets a boolean representing if processor supports SSSE3
            instructions set. 
            </summary>                                             
        </member>
        <member name="P:Neurotec.NProcessorInfo.IsLZCntSupported">
            <summary>
            Gets a boolean representing if processor supports LZCnt
            instruction. 
            </summary>                                             
        </member>
        <member name="P:Neurotec.NProcessorInfo.IsPopCntSupported">
            <summary>
            Gets a boolean representing if processor supports PopCnt
            instruction. 
            </summary>                                              
        </member>
        <member name="P:Neurotec.NProcessorInfo.IsSse41Supported">
            <summary>
            Gets a boolean representing if processor supports SSE 4.1
            instructions set. 
            </summary>                                               
        </member>
        <member name="P:Neurotec.NProcessorInfo.IsSse42Supported">
            <summary>
            Gets a boolean representing if processor supports SSE 4.2
            instructions set. 
            </summary>                                               
        </member>
        <member name="P:Neurotec.NProcessorInfo.IsSse4aSupported">
            <summary>
            Gets a boolean representing if processor supports SSE 4a
            instructions set. 
            </summary>                                              
        </member>
        <member name="P:Neurotec.NProcessorInfo.IsSse5Supported">
            <summary>
            Gets a boolean representing if processor supports SSE5
            instructions set. 
            </summary>                                            
        </member>
        <member name="P:Neurotec.NProcessorInfo.IsNeonSupported">
            <summary>
            Gets a boolean representing if processor supports NEON
            instructions set. 
            </summary>                                            
        </member>
        <member name="T:Neurotec.NPropertyBag">
            <summary>
            Represents a property bag in which the object can persistently save its properties.
            </summary>
        </member>
        <member name="M:Neurotec.NPropertyBag.Enumerator.#ctor(Neurotec.NPropertyBag)">
            <summary>
            Creates a new instance of Enumerator structure.
            </summary>
            <param name="owner">The NPropertyBag owning the Enumerator.</param>
        </member>
        <member name="M:Neurotec.NPropertyBag.Enumerator.MoveNext">
            <summary>
            Moves the enumerator to the next value.
            </summary>
            <returns>true if there is a value to move to; else false.</returns>
        </member>
        <member name="M:Neurotec.NPropertyBag.Enumerator.Reset">
            <summary>
            Resets the current enumerator.
            </summary>
        </member>
        <member name="P:Neurotec.NPropertyBag.Enumerator.Current">
            <summary>
            Gets the current key value pair.
            </summary>
        </member>
        <member name="T:Neurotec.NPropertyBag.KeyCollection">
            <summary>
            Represents the collection of key parts of the key value pair.
            </summary>
        </member>
        <member name="M:Neurotec.NPropertyBag.KeyCollection.Contains(System.String)">
            <summary>
            Checks whether the key collection contains the specified key.
            </summary>
            <param name="value">Key string.</param>
            <returns>true if the collection contains the key; else false.</returns>
        </member>
        <member name="T:Neurotec.NPropertyBag.ValueCollection">
            <summary>
            Represents the collection of value parts of the key value pair.
            </summary>
        </member>
        <member name="M:Neurotec.NPropertyBag.TryParse(System.String,System.String,Neurotec.NPropertyBag@)">
            <summary>
            Converts the specified string to a property bag. Returns a Boolean value indicating whether the conversion succeeded.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="format">The format string.</param>
            <param name="result">[out] The parsed property bag.</param>
            <returns>true if the operation was successful, else false.</returns>
        </member>
        <member name="M:Neurotec.NPropertyBag.TryParse(System.String,Neurotec.NPropertyBag@)">
            <summary>
            Converts the specified string to a property bag. Returns a Boolean value indicating whether the conversion succeeded.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="result">[out] The parsed property bag.</param>
            <returns>true if the operation was successful, else false.</returns>
        </member>
        <member name="M:Neurotec.NPropertyBag.Parse(System.String,System.String)">
            <summary>
            Converts the specified string to a property bag.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="format">The format string.</param>
            <returns>The parsed property bag.</returns>
        </member>
        <member name="M:Neurotec.NPropertyBag.Parse(System.String)">
            <summary>
            Converts the specified string to a property bag.
            </summary>
            <param name="value">The string to parse.</param>
            <returns>The parsed property bag.</returns>
        </member>
        <member name="P:Neurotec.NPropertyBag.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="M:Neurotec.NPropertyBag.#ctor">
            <summary>
            Creates a new instance of NPropertyBag class.
            </summary>
        </member>
        <member name="M:Neurotec.NPropertyBag.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Creates a new instance of NPropertyBag class.
            </summary>
            <param name="values">Property values.</param>
        </member>
        <member name="M:Neurotec.NPropertyBag.CopyTo(Neurotec.NObject)">
            <summary>
            Copies the current property bag into the specified property bag.
            </summary>
            <param name="otherPropertyBag">Property bag to copy to.</param> 
        </member>
        <member name="M:Neurotec.NPropertyBag.ApplyTo(Neurotec.NObject)">
            <summary>
            Applies the current property bag to the specified object.
            </summary>
            <param name="object">The object to apply the property bag to.</param>
        </member>
        <member name="M:Neurotec.NPropertyBag.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds a range of key value pair values to the current property bag.
            </summary>
            <param name="values">Key value pair values to be added.</param>
        </member>
        <member name="P:Neurotec.NPropertyBag.Keys">
            <summary>
            Gets the collection of key values.
            </summary>
        </member>
        <member name="P:Neurotec.NPropertyBag.Values">
            <summary>
            Gets the collection of values.
            </summary>
        </member>
        <member name="P:Neurotec.NPropertyBag.Item(System.Int32)">
            <summary>
            Gets the specified key vale pair.
            </summary>
            <param name="index">Index of the key value pair.</param>
            <returns>The key value pair.</returns>
        </member>
        <member name="M:Neurotec.NPropertyBag.Add(System.String,System.Object)">
            <summary>
            Adds a new key value pair.
            </summary>
            <param name="key">Key part of the pair.</param>
            <param name="value">Value part of the pair.</param>
        </member>
        <member name="M:Neurotec.NPropertyBag.ContainsKey(System.String)">
            <summary>
            Checks whether the property bag contains a property specified by key.
            </summary>
            <param name="key">Key of the property.</param>
            <returns>true if the property bag contains the property, else false.</returns>
        </member>
        <member name="M:Neurotec.NPropertyBag.Remove(System.String)">
            <summary>
            Removes the property specified by key.
            </summary>
            <param name="key">Key of the property.</param>
            <returns>true if the operation was successful, else false.</returns>
        </member>
        <member name="M:Neurotec.NPropertyBag.TryGetValue(System.String,System.Object@)">
            <summary>
            Retrieves the value of a property specified by the key. Returns a Boolean value indicating whether the operation succeeded.
            </summary>
            <param name="key">Key to the property to be retrieved.</param>
            <param name="value">[out] The property.</param>
            <returns>true if the operation was successful, else false.</returns>
        </member>
        <member name="P:Neurotec.NPropertyBag.Item(System.String)">
            <summary>
            Gets or sets the value specified by key.
            </summary>
            <param name="key">Key of the property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Neurotec.NPropertyBag.RemoveAt(System.Int32)">
            <summary>
            Removes the property specified by index.
            </summary>
            <param name="index">Index of the property to be removed.</param>
        </member>
        <member name="M:Neurotec.NPropertyBag.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds a key value pair to the current property bag.
            </summary>
            <param name="item">The key value pair to add.</param>
        </member>
        <member name="M:Neurotec.NPropertyBag.Clear">
            <summary>
            Clears the current property bag.
            </summary>
        </member>
        <member name="M:Neurotec.NPropertyBag.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Checks whether the current property bag contains the specified key value pair.
            </summary>
            <param name="item">The key value pair.</param>
            <returns>true if the property bag contains the key value pair; else false.</returns>
        </member>
        <member name="M:Neurotec.NPropertyBag.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies the current property bag into a key value pair array.
            </summary>
            <param name="array">The key value pair array.</param>
            <param name="arrayIndex">Index in the array, at which the copying starts.</param>
        </member>
        <member name="P:Neurotec.NPropertyBag.Count">
            <summary>
            Retrieves the number of properties in the property bag.
            </summary>
        </member>
        <member name="P:Neurotec.NPropertyBag.IsReadOnly">
            <summary>
            Checks whether the property bag is read-only.
            </summary>
        </member>
        <member name="M:Neurotec.NPropertyBag.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified key value pair from the current property bag.
            </summary>
            <param name="item">The key value pair to be removed.</param>
            <returns>true if the operation was successful, else false.</returns>
        </member>
        <member name="M:Neurotec.NPropertyBag.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the current property bag into a key value pair array.
            </summary>
            <param name="array">The key value pair array.</param>
            <param name="index">Index in the array, at which the copying starts.</param>
        </member>
        <member name="M:Neurotec.NPropertyBag.GetEnumerator">
            <summary>
            Gets the enumerator for the current key value pair.
            </summary>
            <returns>The new enumerator.</returns>
        </member>
        <member name="E:Neurotec.NPropertyBag.CollectionChanged">
            <summary>
            Adds or removes a handler for an event which occurs when collection is changed.
            
            
            </summary>                                                                     
        </member>
        <member name="T:Neurotec.NResult">
            <summary>
            Provides functionality for unmanaged functions error handling.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.Ok">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EFailed">
            <summary>
            Operation failed.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.ECore">
            <summary>
            Core error occurred.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EAbandonedMutex">
            <summary>
            The wait completed due to an abandoned mutex.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EAggregate">
            <summary>
            One or more errors occurred.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EArgument">
            <summary>
            Invalid argument.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EArgumentNull">
            <summary>
            Argument is NULL.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EArgumentOutOfRange">
            <summary>
            Argument is out of range.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EInvalidEnumArgument">
            <summary>
            Argument is an invalid enum value.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EArithmetic">
            <summary>
            Arithmetic error occurred.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EOverflow">
            <summary>
            Overflow occurred.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EBadImageFormat">
            <summary>
            Module has invalid format.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EDllNotFound">
            <summary>
            Module not found.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EEntryPointNotFound">
            <summary>
            Entry point not found in a module.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EFormat">
            <summary>
            Argument format is invalid.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EFileFormat">
            <summary>
            File or stream format is invalid.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EIndexOutOfRange">
            <summary>
            Access with index was out of range.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EInvalidCast">
            <summary>
            The cast is invalid.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EInvalidOperation">
            <summary>
            Attempted to execute operation that is not valid for the object.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EIO">
            <summary>
            IO error occurred.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EDirectoryNotFound">
            <summary>
            Directory not found.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EDriveNotFound">
            <summary>
            Drive not found.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EEndOfStream">
            <summary>
            Unexpected end of stream.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EFileNotFound">
            <summary>
            File not found.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EFileLoad">
            <summary>
            Error loading module from file.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EPathTooLong">
            <summary>
            Path is too long.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.ESocket">
            <summary>
            Socket error occurred.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EKeyNotFound">
            <summary>
            Key not found.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.ENotImplemented">
            <summary>
            Operation is not implemented.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.ENotSupported">
            <summary>
            Operation is not supported.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.ENullReference">
            <summary>
            Attempted to reference a NULL object.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EOperationCanceled">
            <summary>
            Operation canceled.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EOutOfMemory">
            <summary>
            Out of memory.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.ESecurity">
            <summary>
            Security error occurred.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.ETimeout">
            <summary>
            Operation timed out.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EExternal">
            <summary>
            External error occurred.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EClr">
            <summary>
            CLR error occurred.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.ECom">
            <summary>
            COM error occurred.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.ECpp">
            <summary>
            C++ error occurred.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EJvm">
            <summary>
            JVM error occurred.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EMac">
            <summary>
            MacOS error occurred.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.ESys">
            <summary>
            Sys error occurred.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.EWin32">
            <summary>
            Win32 error occurred.
            </summary>
        </member>
        <member name="F:Neurotec.NResult.ENotActivated">
            <summary>
            Operation is not activated.
            </summary>
        </member>
        <member name="M:Neurotec.NResult.IsFailed(System.Int32)">
            <summary>
            Checks if the result of a function indicates that an error has occurred.
            </summary>
            <param name="result">System.Int32 representing function's result</param>
            <returns>
            True if an error has occurred, false otherwise.
            </returns>
        </member>
        <member name="M:Neurotec.NResult.IsSucceeded(System.Int32)">
            <summary>
             Checks if the result of a function indicates that no error has occurred.
            </summary>
            <param name="result">System.Int32 representing function's result</param>
            <returns>
            True if no error has occurred, false otherwise.
            </returns>
        </member>
        <member name="M:Neurotec.NResult.Check(System.Int32)">
            <summary>
            Checks if the result of a function indicates that an error has occurred and if so throws an
            exception.
            </summary>
            <param name="result">System.Int32 representing function's result.</param>
            
            <returns>
            An exception if a function results in an error.
            </returns>
        </member>
        <member name="M:Neurotec.NResult.RaiseError(System.Int32)">
            <summary>
            Creates and throws exception object which represents the error.
            </summary>
            <param name="error">Code of an error to be thrown.</param>
        </member>
        <member name="M:Neurotec.NResult.SetLastError(System.Exception)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Neurotec.NResult.SuppressError(System.Exception)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:Neurotec.NSystemException">
            <summary>
            The exception that is thrown when a system error occurs.
            </summary>  
        </member>
        <member name="P:Neurotec.NSystemException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="T:Neurotec.NTimeoutException">
            <summary>
            The error that occurs when the time allotted for a process or operation has expired.
            </summary>
        </member>
        <member name="P:Neurotec.NTimeoutException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was
            thrown.
            </summary>
            <value>
            String that describes the contents of the call stack. 
            </value>
        </member>
        <member name="T:Neurotec.NTypeCode">
            <summary>
            Enumerates type codes.
            </summary>
        </member>
        <member name="F:Neurotec.NTypeCode.Other">
            Empty value.
        </member>
        <member name="F:Neurotec.NTypeCode.Byte">
            Other value type.
        </member>
        <member name="F:Neurotec.NTypeCode.SByte">
            A byte.
        </member>
        <member name="F:Neurotec.NTypeCode.UInt16">
            Signed byte.
        </member>
        <member name="F:Neurotec.NTypeCode.Int16">
            Unsigned 16-bit integer.
        </member>
        <member name="F:Neurotec.NTypeCode.UInt32">
            16-bit integer.
        </member>
        <member name="F:Neurotec.NTypeCode.Int32">
            Unsigned 32-bit integer.
        </member>
        <member name="F:Neurotec.NTypeCode.UInt64">
            32-bit integer.
        </member>
        <member name="F:Neurotec.NTypeCode.Int64">
            Unsigned 64-bit integer.
        </member>
        <member name="F:Neurotec.NTypeCode.Single">
            64-bit integer.
        </member>
        <member name="F:Neurotec.NTypeCode.Double">
            Single value.
        </member>
        <member name="F:Neurotec.NTypeCode.Boolean">
            Double number.
        </member>
        <member name="F:Neurotec.NTypeCode.SizeType">
            Boolean value.
        </member>
        <member name="F:Neurotec.NTypeCode.SSizeType">
            NSizeType value.
        </member>
        <member name="F:Neurotec.NTypeCode.Pointer">
            Signed NSizeType value.
        </member>
        <member name="F:Neurotec.NTypeCode.Result">
            Pointer.
        </member>
        <member name="F:Neurotec.NTypeCode.AChar">
            NResult value.
        </member>
        <member name="F:Neurotec.NTypeCode.WChar">
            ASCII character.
        </member>
        <member name="F:Neurotec.NTypeCode.String">
            Unicode character.
        </member>
        <member name="F:Neurotec.NTypeCode.Object">
            String.
        </member>
        <member name="F:Neurotec.NTypeCode.Value">
            An object.
        </member>
        <member name="F:Neurotec.NTypeCode.Array">
            Custom type value.
        </member>
        <member name="F:Neurotec.NTypeCode.TimeSpan">
            Array.
        </member>
        <member name="F:Neurotec.NTypeCode.DateTime">
            NTimeSpan value.
        </member>
        <member name="F:Neurotec.NTypeCode.URational">
            NDateTime value.
        </member>
        <member name="F:Neurotec.NTypeCode.Rational">
            Unsigned rational number.
        </member>
        <member name="F:Neurotec.NTypeCode.Complex">
            Rational number.
        </member>
        <member name="F:Neurotec.NTypeCode.Guid">
            Complex number.
        </member>
        <member name="F:Neurotec.NTypeCode.Buffer">
            Global unique identifier.
        </member>
        <member name="F:Neurotec.NTypeCode.Callback">
            Buffer.
        </member>
        <member name="F:Neurotec.NTypeCode.AsyncOperation">
            A callback. 
        </member>
        <member name="F:Neurotec.NTypeCode.ObjectPart">
            Asynchronous operation. 
        </member>
        <member name="F:Neurotec.NTypeCode.Collection">
            A part of an object. 
        </member>
        <member name="F:Neurotec.NTypeCode.Dictionary">
            A collection. 
        </member>
        <member name="F:Neurotec.NTypeCode.ArrayCollection">
            A dictionary.
        </member>
        <member name="T:Neurotec.NType">
            <summary>
            Manages object types.
            </summary>
        </member>
        <member name="M:Neurotec.NType.GetType(System.String)">
            <summary>
            Retrieves the type specified by name.
            </summary>
            <param name="name">Type name.</param>
            <returns>
            NType object.
            </returns>                           
        </member>
        <member name="M:Neurotec.NType.GetType(System.String,System.Boolean)">
            <summary>
            Retrieves the type specified by name.
            </summary>
            <param name="name">Type name.</param>
            <param name="mustExist">Variable defining if type must exist. </param>
            <returns>
            NType object.
            </returns>                                                            
        </member>
        <member name="M:Neurotec.NType.CreateInstance(System.String)">
            <summary>
            Creates an instance of the specified type.
            </summary>
            <param name="name">Type name. </param>
            <returns>
            Created object. 
            </returns>                                
        </member>
        <member name="M:Neurotec.NType.CreateInstance(System.String,Neurotec.NAttributes)">
            <summary>
            Creates an instance of the specified type.
            </summary>
            <param name="name">Type name. </param>
            <param name="attributes">Type attributes.</param>
            <returns>
            Created object. 
            </returns>                                       
        </member>
        <member name="M:Neurotec.NType.ToNativeType(System.Type,Neurotec.NAttributes,System.Boolean)">
            <summary>
            Converts the specified type to a native type.
            </summary>
            <param name="value">The type to be converted.</param>
            <param name="attributes">Type attributes.</param>
            <param name="deepMap">true if deep map is to be used; else false</param>
            <returns>The native type.</returns>
        </member>
        <member name="M:Neurotec.NType.ToType(Neurotec.NType,Neurotec.NAttributes,System.Boolean)">
            <summary>
            Converts the native type to a regular type.
            </summary>
            <param name="value">The native type to be converted.</param>
            <param name="attributes">Type attributes.</param>
            <param name="deepMap">true if deep map is to be used; else false</param>
            <returns>Type value.</returns>
        </member>
        <member name="M:Neurotec.NType.IdentifierToString(System.String,System.String)">
            <summary>
            Converts the specified identifier into a string.
            </summary>
            <param name="value">The identifier.</param>
            <param name="format">Format string.</param>
            <returns>String, representing the identifier.</returns>
        </member>
        <member name="M:Neurotec.NType.IdentifierToString(System.String)">
            <summary>
            Converts the specified identifier into a string.
            </summary>
            <param name="value">The identifier.</param>
            <returns>String, representing the identifier.</returns>
        </member>
        <member name="P:Neurotec.NType.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.NType.NTypeCodeNativeType">
            <summary>
            Defines the native type of the type code.
            </summary>
        </member>
        <member name="M:Neurotec.NType.CreateInstance">
            <summary>
            Creates an instance of the specified type.
            </summary>
            <returns>
            Created object.
            </returns>                                
        </member>
        <member name="M:Neurotec.NType.CreateInstance(Neurotec.NAttributes)">
            <summary>
            Creates an instance of the specified type.
            </summary>
            <param name="attributes">Type attributes. </param>
            <returns>
            Created object. 
            </returns>                                        
        </member>
        <member name="M:Neurotec.NType.IsSubclassOf(Neurotec.NType)">
            <summary>
            Checks whether the current type is a subclass of the specified type.
            </summary>
            <param name="type">The specified type.</param>
            <returns>NTrue if the current type is a subclass of another type; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.NType.IsAssignableFrom(Neurotec.NType)">
            <summary>
            Checks whether the current type is assignable from the specified type.
            </summary>
            <param name="type">The specified type.</param>
            <returns>NTrue if the current type is assignable from another type; else false.</returns>
        </member>
        <member name="M:Neurotec.NType.IsInstanceOfType(Neurotec.NObject)">
            <summary>
            Checks whether the current type is an instance of the specified object.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if the current type is an instance of the object; else false</returns>
        </member>
        <member name="M:Neurotec.NType.Reset(Neurotec.NObject)">
            <summary>
            Resets the specified object.
            </summary>
            <param name="obj">The specified object.</param>
        </member>
        <member name="M:Neurotec.NType.GetPropertyValue(Neurotec.NObject,System.String)">
            <summary>
            Retrieves the specified property of the specified object.
            </summary>
            <param name="obj">The object to retrieve a property of.</param>
            <param name="name">Name of the property.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Neurotec.NType.GetPropertyValue``1(Neurotec.NObject,System.String)">
            <summary>
            Retrieves the specified property of the specified object.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="obj">The object to retrieve a property of.</param>
            <param name="name">Name of the property.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Neurotec.NType.SetPropertyValue(Neurotec.NObject,System.String,System.Object)">
            <summary>
            Sets the value of the specified property.
            </summary>
            <param name="obj">The object to set the property of.</param>
            <param name="name">Name of the property.</param>
            <param name="value">New value of the property.</param>
        </member>
        <member name="M:Neurotec.NType.SetPropertyValue``1(Neurotec.NObject,System.String,``0)">
            <summary>
            Sets the value of the specified property.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="obj">The object to set the property of.</param>
            <param name="name">Name of the property.</param>
            <param name="value">New value of the property.</param>
        </member>
        <member name="M:Neurotec.NType.ResetPropertyValue(Neurotec.NObject,System.String)">
            <summary>
            Resets the specified property.
            </summary>
            <param name="obj">The object to reset the property of.</param>
            <param name="name">Name of the property.</param>
        </member>
        <member name="M:Neurotec.NType.CopyPropertyValues(Neurotec.NObject,Neurotec.NObject)">
            <summary>
            Copies properties from one object to another object.
            </summary>
            <param name="dstObject">The destination object.</param>
            <param name="srcObject">The source object.</param>
        </member>
        <member name="M:Neurotec.NType.CapturePropertyValues(Neurotec.NObject,Neurotec.NPropertyBag)">
            <summary>
            Captures property values of the specified object.
            </summary>
            <param name="object">Object to capture its property values. </param>
            <param name="properties">Property bag that receives the properties from the object. </param>
        </member>
        <member name="M:Neurotec.NType.InvokeMethod(Neurotec.NObject,System.String,System.Object[])">
            <summary>
            Invokes the specified method on the specified object.
            </summary>
            <param name="object">Object to invoke method from.</param>
            <param name="name">Method name to invoke.</param>
            <param name="parameters">Array of method parameters</param>
            <returns>
            \Result returned by the invoked method. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.NType.InvokeMethod(Neurotec.NObject,System.String,Neurotec.NPropertyBag)">
            <summary>
            Invokes the specified method on the specified object.
            </summary>
            <param name="object">Object to invoke method from.</param>
            <param name="name">Method name to invoke.</param>
            <param name="parameters">Method parameters</param>
            <returns>
            \Result returned by the invoked method. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.NType.InvokeMethod(Neurotec.NObject,System.String,System.String)">
            <summary>
            Invokes the specified method on the specified object.
            </summary>
            <param name="object">Object to invoke method from.</param>
            <param name="name">Method name to invoke.</param>
            <param name="parameters">Method parameters.</param>
            <returns>
            \Result returned by the invoked method. 
            </returns>                                                  
        </member>
        <member name="M:Neurotec.NType.AddEventHandler(Neurotec.NObject,System.String,System.Delegate)">
            <summary>
            Adds a handler for the specified event to the specified object.
            </summary>
            <param name="object">Object to add a handler. </param>
            <param name="name">Event name. </param>
            <param name="value">Delegate value.</param>                    
        </member>
        <member name="M:Neurotec.NType.RemoveEventHandler(Neurotec.NObject,System.String,System.Delegate)">
            <summary>
            Removes a handler for the specified event to the specified object.
            </summary>
            <param name="object">Object to from which to remove a handler. </param>
            <param name="name">Event name. </param>
            <param name="value">Delegate value.</param>   
        </member>
        <member name="M:Neurotec.NType.GetDeclaredEnumConstant(System.String)">
            <summary>
            Retrieves the declared enumeration constant specified by name.
            </summary>
            <param name="name">Enumeration constant name.</param>
            <returns>
            NEnumConstantInfo object. 
            </returns>                                                    
        </member>
        <member name="M:Neurotec.NType.GetDeclaredField(System.String)">
            <summary>
            Retrieves the declared field specified by name.
            </summary>
            <param name="name">Declared field name.</param>
            <returns>
            NPropertyInfo object.
            </returns>                                     
        </member>
        <member name="M:Neurotec.NType.GetDeclaredConstant(System.String)">
            <summary>
            Retrieves the declared constant specified by name.
            </summary>
            <param name="name">Constant name.</param>
            <returns>
            NConstantInfo object.
            </returns>                                        
        </member>
        <member name="M:Neurotec.NType.GetDeclaredMethod(System.String)">
            <summary>
            Retrieves the declared method specified by index.
            </summary>
            <param name="name">Declared method name.</param>
            <returns>
            NMethodInfo object.
            </returns>                                       
        </member>
        <member name="M:Neurotec.NType.GetDeclaredMethods(System.String)">
            <summary>
            Retrieves all declared methods of the specified type.
            </summary>
            <param name="name">Declared methods name.</param>
            <returns>
            Array of declared methods objects.
            </returns>                                           
        </member>
        <member name="M:Neurotec.NType.GetDeclaredProperty(System.String)">
            <summary>
            Retrieves the declared property specified by name.
            </summary>
            <param name="name">Declared property name.</param>
            <returns>
            NPropertyInfo object.
            </returns>                                        
        </member>
        <member name="M:Neurotec.NType.GetDeclaredEvent(System.String)">
            <summary>
            Retrieves the declared event specified by name.
            </summary>
            <param name="name">Declared event name.</param>
            <returns>
            NEventInfo object. 
            </returns>                                     
        </member>
        <member name="M:Neurotec.NType.GetDeclaredPart(System.String)">
            <summary>
            Retrieves the declared part specified by name.
            </summary>
            <param name="name">Declared part name.</param>
            <returns>
            NObjectPartInfo object.
            </returns>                                    
        </member>
        <member name="M:Neurotec.NType.ToType">
            <summary>
            Converts the current value into a type.
            </summary>
            <returns>The type value.</returns>
        </member>
        <member name="M:Neurotec.NType.ToType(Neurotec.NAttributes,System.Boolean)">
            <summary>
            Converts the current value into a type.
            </summary>
            <param name="attributes">Type attributes.</param>
            <param name="deepMap">true if deep map is to be used; else false</param>
            <returns>The type value.</returns>
        </member>
        <member name="P:Neurotec.NType.Module">
            <summary>
            Gets the module of the current type.
            </summary>
        </member>
        <member name="P:Neurotec.NType.Name">
            <summary>
            Gets the name of the current type.
            </summary>
        </member>
        <member name="P:Neurotec.NType.BaseType">
            <summary>
            Gets the base type of the current type.
            </summary>
        </member>
        <member name="P:Neurotec.NType.TypeCode">
            <summary>
            Returns <see>NTypeCode</see> for the current type.
            </summary>
        </member>
        <member name="P:Neurotec.NType.RootType">
            <summary>
            Gets the root type of the current type.
            </summary>
        </member>
        <member name="P:Neurotec.NType.RootTypeCode">
            <summary>
            Returns <see>NTypeCode</see> for the root type of the current type.
            </summary>
        </member>
        <member name="P:Neurotec.NType.ValueSize">
            <summary>
            Gets the size of the current value.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsBasic">
            <summary>
            Checks whether the current type is a basic type.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsPrimitive">
            <summary>
            Checks whether the current type is a primitive type.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsEnum">
            <summary>
            Checks whether the current type is an enum type.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsStruct">
            <summary>
            Checks whether the current type is a struct type.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsHandle">
            <summary>
            Checks whether the current type is a handle type.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsCallback">
            <summary>
            Checks whether the current type is a callback type.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsObject">
            <summary>
            Checks whether the current type is an object type.
            </summary>
        </member>
        <member name="P:Neurotec.NType.Attributes">
            <summary>
            Gets attributes of the specified type.
            </summary>
            <value>
            NAttributes object.
            </value>                              
        </member>
        <member name="P:Neurotec.NType.IsDisposable">
            <summary>
            Checks whether the current type is disposable.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsPublic">
            <summary>
            Checks whether the current type is public.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsStatic">
            <summary>
            Checks whether the current type is static.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsSealed">
            <summary>
            Checks whether the current type is sealed.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsAbstract">
            <summary>
            Checks whether the current type is abstract.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsDeprecated">
            <summary>
            Checks whether the current type is deprecated.
            </summary>
        </member>
        <member name="P:Neurotec.NType.UseInsteadType">
            <summary>
            Gets the type to be used instead of current type.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsEquatable">
            <summary>
            Checks whether the current type is equatable.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsComparable">
            <summary>
            Checks whether the current type is comparable.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsParsable">
            <summary>
            Checks whether the current type is parsable.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsSignNeutral">
            <summary>
            Checks whether the current type is sign-neutral.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsFlagsEnum">
            <summary>
            Checks whether the current type is a flags enum.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsCloneable">
            <summary>
            Checks whether the current type is cloneable.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsMemorySerializable">
            <summary>
            Checks whether the current type is memory serializable.
            </summary>
        </member>
        <member name="P:Neurotec.NType.IsSerializable">
            <summary>
            Checks whether the current type is serializable.
            </summary>
        </member>
        <member name="P:Neurotec.NType.OwnerType">
            <summary>
            Gets the owner type of the current type.
            </summary>
        </member>
        <member name="P:Neurotec.NType.HasOwnerType">
            <summary>
            Checks whether the current type has an owner type.
            </summary>
        </member>
        <member name="P:Neurotec.NType.EnumAlternative">
            <summary>
            Retrieves alternative enumeration for the specified type.
            </summary>
            <value>
            NType object.
            </value>                                                 
        </member>
        <member name="P:Neurotec.NType.DeclaredEnumConstants">
            <summary>
            Retrieves all declared enumeration constants of the specified type.
            </summary>
            <value>
            DeclaredEnumConstantCollection object.
            </value>                                                           
        </member>
        <member name="P:Neurotec.NType.DeclaredFields">
            <summary>
            Retrieves all declared fields of the specified type.
            </summary>
            <value>
            DeclaredFieldCollection object.
            </value>                                            
        </member>
        <member name="P:Neurotec.NType.DeclaredConstants">
            <summary>
            Gets all declared constants of the specified type.
            </summary>
            <value>
            DeclaredConstantCollection object.
            </value>                                          
        </member>
        <member name="P:Neurotec.NType.DeclaredConstructors">
            <summary>
            Gets all declared constructors of the specified type.
            </summary>
            <value>
            DeclaredConstructorCollection object.
            </value>                                             
        </member>
        <member name="P:Neurotec.NType.DeclaredMethods">
            <summary>
            Retrieves all declared methods of the specified type.
            </summary>
            <value>
            DeclaredMethodCollection object.
            </value>                                             
        </member>
        <member name="P:Neurotec.NType.DeclaredProperties">
            <summary>
            Retrieves all declared properties of the specified type.
            </summary>
            <value>
            DeclaredPropertyCollection object.
            </value>                                                
        </member>
        <member name="P:Neurotec.NType.DeclaredEvents">
            <summary>
            Retrieves all declared events of the specified type.
            </summary>
            <value>
            DeclaredEventCollection object.
            </value>                                            
        </member>
        <member name="P:Neurotec.NType.DeclaredParts">
            <summary>
            Retrieves all declared parts of the specified type.
            </summary>
            <value>
            DeclaredPartCollection object.
            </value>                                           
        </member>
        <member name="M:Neurotec.NTypeMap.Add(Neurotec.NObject.GetObjectPlain,System.Type,Neurotec.NObject.FromHandlePlain,System.Type[])">
            <summary>
            Links native object type with managed wrapper.
            <para /><b>This method supports the Neurotechnology framework infrastructure and is not intended to be used directly from your code.</b>
            </summary>
            <param name="typeOf">Native API function returning object type.</param>
            <param name="type">Managed type.</param>
            <param name="fromHandle">Delegate used to create managed object.</param>
            <param name="relatedTypes">Related types.</param>
            <returns></returns>
        </member>
        <member name="T:Neurotec.NURational">
            <summary>
            Represents an unsigned rational number. 
            </summary>                                     
        </member>
        <member name="F:Neurotec.NURational.Empty">
            <summary>
            Represents a NURational that is a null reference. 
            </summary>                                           
        </member>
        <member name="P:Neurotec.NURational.NativeType">
            <summary>
            Defines the native type of the type.
            </summary>
        </member>
        <member name="M:Neurotec.NURational.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the NURational structure.
            </summary>
            <param name="denominator">Denominator of this NURational.</param>
            <param name="numerator">Numerator of this NURational.</param>    
        </member>
        <member name="M:Neurotec.NURational.ToString">
            <summary>
            Retrieves a string representation of the object.
            </summary>
            <returns>
            A string representation of an object.
            </returns>                                              
        </member>
        <member name="M:Neurotec.NURational.ToString(System.String)">
            <summary>
            Retrieves a string representation of the object.
            </summary>
            <param name="format">Format string.</param>
            <returns>A string representation of an object.</returns>
        </member>
        <member name="P:Neurotec.NURational.Numerator">
            <summary>
            Sets or retrieves the NRational value Numerator. 
            </summary>                                       
        </member>
        <member name="P:Neurotec.NURational.Denominator">
            <summary>
            Sets or retrieves the NRational value Denominator. 
            </summary>                                         
        </member>
        <member name="M:Neurotec.NURational.op_Explicit(Neurotec.NURational)~System.Double">
            <summary>
            Converts NURational value to double value. 
            </summary>
            <param name="value">Unsigned rational value.</param>
            <returns>Double value.</returns>
        </member>
        <member name="T:Neurotec.NRational">
            <summary>
            Represents a signed rational number. 
            </summary>                                    
        </member>
        <member name="F:Neurotec.NRational.Empty">
            <summary>
            Represents that NRational is a null reference. 
            </summary>                                          
        </member>
        <member name="P:Neurotec.NRational.NativeType">
            <summary>
            Defines the native type of the type.
            </summary>
        </member>
        <member name="M:Neurotec.NRational.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the NRational structure.
            </summary>
            <param name="denominator">Denominator of this NRational.</param>
            <param name="numerator">Numerator of this NRational.</param>    
        </member>
        <member name="M:Neurotec.NRational.ToString">
            <summary>
            Retrieves a string representation of the object.
            </summary>
            <returns>
            A string representation of an object.
            </returns>                                             
        </member>
        <member name="M:Neurotec.NRational.ToString(System.String)">
            <summary>
            Retrieves a string representation of the object.
            </summary>
            <param name="format">Format string.</param>
            <returns>A string representation of an object.</returns>
        </member>
        <member name="P:Neurotec.NRational.Numerator">
            <summary>
            Sets or retrieves the NRational value Numerator. 
            </summary>                                              
        </member>
        <member name="P:Neurotec.NRational.Denominator">
            <summary>
            Sets or retrieves the NRational value Denominator. 
            </summary>                                                
        </member>
        <member name="M:Neurotec.NRational.op_Explicit(Neurotec.NRational)~System.Double">
            <summary>
            Converts NRational value to double value. 
            </summary>
            <param name="value">Rational value.</param>
            <returns>Double value.</returns>
        </member>
        <member name="T:Neurotec.NComplex">
            <summary>
            Represents a complex number. 
            </summary>                                    
        </member>
        <member name="F:Neurotec.NComplex.Zero">
            <summary>
            Represents a NComplex with real part equal to zero and imaginary part equal to zero.
            </summary>
        </member>
        <member name="F:Neurotec.NComplex.One">
            <summary>
            Represents  NComplex with real part equal to one and imaginary part equal to zero.
            </summary>
        </member>
        <member name="F:Neurotec.NComplex.ImaginaryOne">
            <summary>
            Represents a NComplex with real part equal to zero and imaginary part equal to one.
            </summary>
        </member>
        <member name="P:Neurotec.NComplex.NativeType">
            <summary>
            Defines the native type of the type.
            </summary>
        </member>
        <member name="M:Neurotec.NComplex.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the NComplex structure.
            </summary>
            <param name="real">Real part of this NComplex.</param>
            <param name="imaginary">Imaginary part of this NComplex.</param>    
        </member>
        <member name="M:Neurotec.NComplex.ToString">
            <summary>
            Retrieves a string representation of the object.
            </summary>
            <returns>
            A string representation of an object.
            </returns>                                             
        </member>
        <member name="M:Neurotec.NComplex.ToString(System.String)">
            <summary>
            Retrieves a string representation of the object.
            </summary>
            <param name="format">Format string.</param>
            <returns>A string representation of an object.</returns>
        </member>
        <member name="P:Neurotec.NComplex.Real">
            <summary>
            Sets or retrieves the real part of NComplex value. 
            </summary>                                              
        </member>
        <member name="P:Neurotec.NComplex.Imaginary">
            <summary>
            Sets or retrieves the imaginary part of NComplex value. 
            </summary>                                                
        </member>
        <member name="T:Neurotec.NIndexPair">
            <summary>
            Represents pair of indexes. 
            </summary>                                     
        </member>
        <member name="P:Neurotec.NIndexPair.NativeType">
            <summary>
            Defines the native type of the type.
            </summary>
        </member>
        <member name="F:Neurotec.NIndexPair.index1">
            <summary>Gets or sets first index of this NIndexPair.</summary>
        </member>
        <member name="F:Neurotec.NIndexPair.index2">
            <summary>Gets or sets second index of this NIndexPair.</summary>
        </member>
        <member name="M:Neurotec.NIndexPair.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the NIndexPair structure.
            </summary>
            <param name="index1">First index of this NIndexPair.</param>
            <param name="index2">Second index of this NIndexPair.</param>
        </member>
        <member name="M:Neurotec.NIndexPair.ToString">
            <summary>
            Retrieves a string representation of the object.
            </summary>
            <returns>
            A string representation of an object.
            </returns>                                              
        </member>
        <member name="M:Neurotec.NIndexPair.ToString(System.String)">
            <summary>
            Retrieves a string representation of the object.
            </summary>
            <param name="format">Reserved.</param>
            <returns>A string representation of an object.</returns>
        </member>
        <member name="P:Neurotec.NIndexPair.Index1">
            <summary>
            Gets or sets first index of this NIndexPair. 
            </summary>                                   
        </member>
        <member name="P:Neurotec.NIndexPair.Index2">
            <summary>
            Gets or sets second index of this NIndexPair. 
            </summary>                                    
        </member>
        <member name="T:Neurotec.NRange">
            <summary>
            Represents range.
            </summary>       
        </member>
        <member name="P:Neurotec.NRange.NativeType">
            <summary>
            Defines the native type of the type.
            </summary>
        </member>
        <member name="M:Neurotec.NRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the NRange structure.
            </summary>
            <param name="from">lower bound of a range to be created.</param>
            <param name="to">upper bound of a range to be created.</param>  
        </member>
        <member name="M:Neurotec.NRange.ToString">
            <summary>
            Retrieves a string representation of the range object.
            </summary>
            <returns>
            String representation of the range. 
            </returns>                                            
        </member>
        <member name="M:Neurotec.NRange.ToString(System.String)">
            <summary>
            Retrieves a string representation of the range object.
            </summary>
            <param name="format">Reserved.</param>
            <returns>A string representation of the range.</returns>
        </member>
        <member name="P:Neurotec.NRange.From">
            <summary>
            Gets or sets lower bound of a range.
            </summary>                          
        </member>
        <member name="P:Neurotec.NRange.To">
            <summary>
            Gets or sets upper bound of a range.
            </summary>                          
        </member>
        <member name="T:Neurotec.NVersion">
            <summary>
            Manages version information.
            </summary>
        </member>
        <member name="F:Neurotec.NVersion.Empty">
            <summary>
            New NVersion object.
            </summary>
        </member>
        <member name="M:Neurotec.NVersion.op_Explicit(Neurotec.NVersion)~System.UInt16">
            <summary>
            Converts NVersion value to an unsigned short value. 
            </summary>
            <param name="value">NVersion value.</param>
            <returns>Unsigned short value.</returns>
        </member>
        <member name="M:Neurotec.NVersion.op_Explicit(System.UInt16)~Neurotec.NVersion">
            <summary>
            Converts an unsigned short value to NVersion value.
            </summary>
            <param name="value">An unsigned short value.</param>
            <returns>NVersion value.</returns>
        </member>
        <member name="M:Neurotec.NVersion.op_Equality(Neurotec.NVersion,Neurotec.NVersion)">
            <summary>
            Checks whether the two NVersion values are equal.
            </summary>
            <param name="v1">First NVersion value.</param>
            <param name="v2">Second NVersion value.</param>
            <returns>NTrue if the values are equal; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.NVersion.op_Inequality(Neurotec.NVersion,Neurotec.NVersion)">
            <summary>
            Checks whether the two NVersion values are not equal.
            </summary>
            <param name="v1">First NVersion value.</param>
            <param name="v2">Second NVersion value.</param>
            <returns>NTrue if the values are not equal; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.NVersion.op_GreaterThan(Neurotec.NVersion,Neurotec.NVersion)">
            <summary>
            Checks whether the first NVersion value is larger than the second NVersion value.
            </summary>
            <param name="v1">First NVersion value.</param>
            <param name="v2">Second NVersion value.</param>
            <returns>>NTrue if the first NVersion is larger; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.NVersion.op_LessThan(Neurotec.NVersion,Neurotec.NVersion)">
            <summary>
            Checks whether the first NVersion value is smaller than the second NVersion value.
            </summary>
            <param name="v1">First NVersion value.</param>
            <param name="v2">Second NVersion value.</param>
            <returns>>NTrue if the first NVersion is smaller; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.NVersion.op_GreaterThanOrEqual(Neurotec.NVersion,Neurotec.NVersion)">
            <summary>
            Checks whether the first NVersion value is larger than or equal to the second NVersion value.
            </summary>
            <param name="v1">First NVersion value.</param>
            <param name="v2">Second NVersion value.</param>
            <returns>>NTrue if the first NVersion is larger or the values are equal; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.NVersion.op_LessThanOrEqual(Neurotec.NVersion,Neurotec.NVersion)">
            <summary>
            Checks whether the first NVersion value is smaller than or equal to the second NVersion value.
            </summary>
            <param name="v1">First NVersion value.</param>
            <param name="v2">Second NVersion value.</param>
            <returns>>NTrue if the first NVersion is smaller or the values are equal; else NFalse.</returns>
        </member>
        <member name="P:Neurotec.NVersion.NativeType">
            <summary>
            Defines the native type of the type.
            </summary>
        </member>
        <member name="M:Neurotec.NVersion.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of NVersion structure.
            </summary>
            <param name="value">Version value.</param>
        </member>
        <member name="M:Neurotec.NVersion.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of NVersion structure.
            </summary>
            <param name="major">Major version number.</param>
            <param name="minor">Minor version number.</param>
        </member>
        <member name="M:Neurotec.NVersion.Equals(System.Object)">
            <summary>
            Checks whether the current version equals the specified version object.
            </summary>
            <param name="obj">Version object.</param>
            <returns>NTrue if the versions are equal; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.NVersion.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Neurotec.NVersion.ToString">
            <summary>
            Gets the string representation of the current version.
            </summary>
            <returns>A string representing the current version.</returns>
        </member>
        <member name="M:Neurotec.NVersion.ToString(System.String)">
            <summary>
            Retrieves a string representation of the current version.
            </summary>
            <param name="format">Reserved.</param>
            <returns>A string representation of the current version.</returns>
        </member>
        <member name="P:Neurotec.NVersion.Major">
            <summary>
            Gets the major version value.
            </summary>
        </member>
        <member name="P:Neurotec.NVersion.Minor">
            <summary>
            Gets the minor version value.
            </summary>
        </member>
        <member name="M:Neurotec.NVersion.Equals(Neurotec.NVersion)">
            <summary>
            Checks whether the current version equals the specified version.
            </summary>
            <param name="other">The other version.</param>
            <returns>true if the versions are equal; else false.</returns>
        </member>
        <member name="M:Neurotec.NVersion.CompareTo(Neurotec.NVersion)">
            <summary>
            Compares the current version with the specified version and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="other">The other version.</param>
            <returns>Integer that indicates their relative position in the sort order.</returns>
        </member>
        <member name="T:Neurotec.NVersionRange">
            <summary>
            Manages version ranges.
            </summary>
        </member>
        <member name="F:Neurotec.NVersionRange.Empty">
            <summary>
            New version range object.
            </summary>
        </member>
        <member name="M:Neurotec.NVersionRange.op_Explicit(Neurotec.NVersionRange)~System.UInt32">
            <summary>
            Converts NVersionRange value to an unsigned short value.
            </summary>
            <param name="value">NVersionRange value.</param>
            <returns>Unsigned short value.</returns>
        </member>
        <member name="M:Neurotec.NVersionRange.op_Explicit(System.UInt32)~Neurotec.NVersionRange">
            <summary>
            Converts an unsigned short value to NVersionRange value.
            </summary>
            <param name="value">Unsigned short value.</param>
            <returns>NVersionRange value</returns>
        </member>
        <member name="M:Neurotec.NVersionRange.op_Equality(Neurotec.NVersionRange,Neurotec.NVersionRange)">
            <summary>
            Checks whether the two NVersionRange values are equal.
            </summary>
            <param name="v1">First NVersionRange value.</param>
            <param name="v2">Second NVersionRange value.</param>
            <returns>NTrue if the values are equal; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.NVersionRange.op_Inequality(Neurotec.NVersionRange,Neurotec.NVersionRange)">
            <summary>
            Checks whether the two NVersionRange values are not equal.
            </summary>
            <param name="v1">First NVersionRange value.</param>
            <param name="v2">Second NVersionRange value.</param>
            <returns>NTrue if the values are not equal; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.NVersionRange.Intersect(Neurotec.NVersionRange,Neurotec.NVersionRange)">
            <summary>
            Gets the intersection of the two specified version ranges.
            </summary>
            <param name="value1">First NVersionRange.</param>
            <param name="value2">Second NVersionRange.</param>
            <returns>The resulting NVersionRange.</returns>
        </member>
        <member name="P:Neurotec.NVersionRange.NativeType">
            <summary>
            Defines the native type of the type.
            </summary>
        </member>
        <member name="M:Neurotec.NVersionRange.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of NVersionRange structure.
            </summary>
            <param name="value">Version range.</param>
        </member>
        <member name="M:Neurotec.NVersionRange.#ctor(Neurotec.NVersion,Neurotec.NVersion)">
            <summary>
            Initializes a new instance of NVersionRange structure.
            </summary>
            <param name="from">Lower version value.</param>
            <param name="to">Upper version value.</param>
        </member>
        <member name="M:Neurotec.NVersionRange.Equals(System.Object)">
            <summary>
            Checks whether the current version range equals the specified version range object.
            </summary>
            <param name="obj">Version range object.</param>
            <returns>NTrue if version ranges are equal; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.NVersionRange.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Neurotec.NVersionRange.ToString">
            <summary>
            Gets a string representation of the version range.
            </summary>
            <returns>A string representing the version range.</returns>
        </member>
        <member name="M:Neurotec.NVersionRange.ToString(System.String)">
            <summary>
            Retrieves a string representation of the version range.
            </summary>
            <param name="format">Reserved.</param>
            <returns>A string representation of version range.</returns>
        </member>
        <member name="M:Neurotec.NVersionRange.Contains(Neurotec.NVersion)">
            <summary>
            Checks whether the current version range contain the specified version.
            </summary>
            <param name="value">Version value.</param>
            <returns>NTrue if the version range contain the version value; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.NVersionRange.Contains(Neurotec.NVersionRange)">
            <summary>
            Checks whether the current version range contain the specified version range.
            </summary>
            <param name="value">Version range value.</param>
            <returns>NTrue if the current version range contain the specified version rang; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.NVersionRange.IntersectsWith(Neurotec.NVersionRange)">
            <summary>
            Checks whether the current version range intersects with the specified version range.
            </summary>
            <param name="value">Version range value.</param>
            <returns>NTrue if the version ranges intersect; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.NVersionRange.Intersect(Neurotec.NVersionRange)">
            <summary>
            Gets the intersection of the current version range and specified version range.
            </summary>
            <param name="value">Version range object.</param>
            <returns>Intersection of the version ranges.</returns>
        </member>
        <member name="P:Neurotec.NVersionRange.From">
            <summary>
            Lower NVersion value.
            </summary>
        </member>
        <member name="P:Neurotec.NVersionRange.To">
            <summary>
            Upper NVersion value.
            </summary>
        </member>
        <member name="M:Neurotec.NVersionRange.Equals(Neurotec.NVersionRange)">
            <summary>
            Checks whether the current version range equals the specified version range.
            </summary>
            <param name="other">The other version range.</param>
            <returns>true if the version ranges are equal; else false.</returns>
        </member>
        <member name="T:Neurotec.NMemoryType">
            <summary>
            Enumerates memory type options.
            </summary>
        </member>
        <member name="F:Neurotec.NMemoryType.None">
            <summary>
            No memory type.
            </summary>
        </member>
        <member name="F:Neurotec.NMemoryType.Default">
            <summary>
            Default memory type.
            </summary>
        </member>
        <member name="F:Neurotec.NMemoryType.Aligned">
            <summary>
            Aligned memory type.
            </summary>
        </member>
        <member name="F:Neurotec.NMemoryType.Standard">
            <summary>
            Standard memory type.
            </summary>
        </member>
        <member name="F:Neurotec.NMemoryType.Win32Local">
            <summary>
            Win32Local memory type.
            </summary>
        </member>
        <member name="F:Neurotec.NMemoryType.Win32Global">
            <summary>
            Win32Global memory type.
            </summary>
        </member>
        <member name="F:Neurotec.NMemoryType.Custom">
            <summary>
            Custom memory type.
            </summary>
        </member>
        <member name="T:Neurotec.NAttributes">
            <summary>
            Enumerates value attributes.
            </summary>
        </member>
        <member name="F:Neurotec.NAttributes.SignNeutral">
            Indicates no attributes.
        </member>
        <member name="F:Neurotec.NAttributes.SingleValue">
            Indicates that unsigned integer value can be interpreted as signed and vice versa
        </member>
        <member name="F:Neurotec.NAttributes.Array">
            Indicates that the value is a single value.
        </member>
        <member name="F:Neurotec.NAttributes.Nullable">
            Indicates that the value is an array.
        </member>
        <member name="F:Neurotec.NAttributes.Local">
            Indicates that the value is nullable.
        </member>
        <member name="F:Neurotec.NAttributes.Global">
            Indicates that the value is local.
        </member>
        <member name="F:Neurotec.NAttributes.Set">
            Indicates that the value is global.
        </member>
        <member name="F:Neurotec.NAttributes.Cache">
            Indicates that several values (from standard ones) can be combined.
        </member>
        <member name="F:Neurotec.NAttributes.Deprecated">
            Indicates that the object wrapper has to be cached.
        </member>
        <member name="F:Neurotec.NAttributes.Abstract">
            Indicates that the value is deprecated.
        </member>
        <member name="F:Neurotec.NAttributes.Static">
            Indicates that the value is abstract.
        </member>
        <member name="F:Neurotec.NAttributes.Public">
            Indicates that the value is static.
        </member>
        <member name="F:Neurotec.NAttributes.Sealed">
            Indicates that the value is public.
        </member>
        <member name="F:Neurotec.NAttributes.MinValue">
            Indicates that the value is sealed.
        </member>
        <member name="F:Neurotec.NAttributes.MaxValue">
            Indicates that the value is the minimum value.
        </member>
        <member name="F:Neurotec.NAttributes.StdValues">
            Indicates that the value is the maximum value.
        </member>
        <member name="F:Neurotec.NAttributes.StdValuesExclusive">
            Indicates that standard values are used.
        </member>
        <member name="F:Neurotec.NAttributes.NoRead">
            Indicates that standard values are exclusive.
        </member>
        <member name="F:Neurotec.NAttributes.NoWrite">
            Indicates that the value can't be read.
        </member>
        <member name="F:Neurotec.NAttributes.ByRef">
            Indicates that the value can't be written.
        </member>
        <member name="F:Neurotec.NAttributes.RetValue">
            Indicates that parameters are passed by reference.
        </member>
        <member name="F:Neurotec.NAttributes.DefaultValue">
            Indicates a return value.
        </member>
        <member name="F:Neurotec.NAttributes.Optional">
            Indicates that the value is the default value.
        </member>
        <member name="F:Neurotec.NAttributes.PromoteValue">
            Indicates that the value is optional.
        </member>
        <member name="T:Neurotec.NOSFamily">
            <summary>
            Enumerates operating system families.
            </summary>
        </member>
        <member name="F:Neurotec.NOSFamily.Windows">
            Indicates no OS.
        </member>
        <member name="F:Neurotec.NOSFamily.WindowsCE">
            Indicates Windows OS.
        </member>
        <member name="F:Neurotec.NOSFamily.WindowsPhone">
            Indicates Windows CE OS.
        </member>
        <member name="F:Neurotec.NOSFamily.MacOSX">
            Indicates Windows Phone OS.
        </member>
        <member name="F:Neurotec.NOSFamily.IOS">
            Indicates MacOS X.
        </member>
        <member name="F:Neurotec.NOSFamily.Linux">
            Indicates iOS.
        </member>
        <member name="F:Neurotec.NOSFamily.EmbeddedLinux">
            Indicates Linux OS.
        </member>
        <member name="F:Neurotec.NOSFamily.Android">
            Indicates embedded Linux OS.
        </member>
        <member name="F:Neurotec.NOSFamily.Unix">
            Indicates Android OS.
        </member>
        <member name="T:Neurotec.NTypes">
            <summary>
            Manages object types.
            </summary>
        </member>
        <member name="F:Neurotec.NTypes.CharSet">
            <summary>
            Char set constant.
            </summary>
        </member>
        <member name="F:Neurotec.NTypes.WCharApi">
            <summary>
            Whether the Unicode char API is supported.
            </summary>
        </member>
        <member name="F:Neurotec.NTypes.StringEncoding">
            <summary>
            The string encoding.
            </summary>
        </member>
        <member name="M:Neurotec.NTypes.GetPointerForObject(System.Object)">
            <summary>
            Increments the reference count for a pointer to a specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>The pointer to the object.</returns>
        </member>
        <member name="M:Neurotec.NTypes.FreeObjectPointer(System.IntPtr)">
            <summary>
            Decrements the reference count for a specified pointer.
            </summary>
            <param name="ptr">The pointer.</param>
        </member>
        <member name="M:Neurotec.NTypes.GetObjectFromPointer(System.IntPtr)">
            <summary>
            Retrieves an object from a pointer.
            </summary>
            <param name="ptr">A pointer indicating the object.</param>
            <returns>
            A pointer to the object. 
            </returns>
        </member>
        <member name="M:Neurotec.NTypes.FreeStringElements(System.IntPtr,System.Int32)">
            <summary>
            Frees specified string elements.
            </summary>
            <param name="arhStrings">Pointer to an array of string elements.</param>
            <param name="count">Number of string elements in the array.</param>
        </member>
        <member name="M:Neurotec.NTypes.FreeStringArray(System.IntPtr,System.Int32)">
            <summary>
            Frees specified strings.
            </summary>
            <param name="arhStrings">Pointer to an array of strings.</param>
            <param name="count">Number of strings in the array.</param>
        </member>
        <member name="M:Neurotec.NTypes.CreateCallback(System.Delegate,System.Object)">
            <summary>
            Creates a new callback.
            </summary>
            <param name="callback">Native callback delegate.</param>
            <param name="param">Callback parameters.</param>
            <returns>The new callback.</returns>
        </member>
        <member name="M:Neurotec.NTypes.CreateCallback(System.Delegate,System.Delegate)">
            <summary>
            Creates a new callback.
            </summary>
            <param name="callback">Native callback delegate.</param>
            <param name="del">Managed delegate.</param>
            <returns>The new callback.</returns>
        </member>
        <member name="M:Neurotec.NTypes.CreateCallback(System.Delegate,Neurotec.NObject,System.Delegate)">
            <summary>
            Creates a new callback.
            </summary>
            <param name="callback">Native callback delegate.</param>
            <param name="target">Target object.</param>
            <param name="del">Managed delegate.</param>
            <returns>The new callback.</returns>
        </member>
        <member name="M:Neurotec.NTypes.CreateCallback(System.Delegate,Neurotec.NObject,System.Func{Neurotec.NObject,System.Object},System.Object,System.Delegate)">
            <summary>
            Creates a new callback.
            </summary>
            <param name="callback">Native callback delegate.</param>
            <param name="target">Target object.</param>
            <param name="targetTransform">Target transformation function.</param>
            <param name="param">Parameter for target transformation function.</param>
            <param name="del">Managed delegate.</param>
            <returns>The new callback.</returns>
        </member>
        <member name="M:Neurotec.NTypes.IsMemoryTypeValid(Neurotec.NMemoryType)">
            <summary>
            Checks whether the memory type is valid.
            </summary>
            <param name="value">The memory type.</param>
            <returns>NTrue if the memory type is valid; else NFalse.</returns>
        </member>
        <member name="M:Neurotec.NTypes.IsMemoryTypeValidForFree(Neurotec.NMemoryType)">
            <summary>
            Checks whether the memory type is valid for freeing.
            </summary>
            <param name="value">The memory type.</param>
            <returns>NTrue if the memory type is valid; else NFalse.</returns>
        </member>
        <member name="P:Neurotec.NTypes.NUInt8NativeType">
            <summary>
            Gets the native type of the unsigned 8-bit integer.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NInt8NativeType">
            <summary>
            Gets the native type of the 8-bit integer.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NUInt16NativeType">
            <summary>
            Gets the native type of the unsigned 16-bit integer.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NInt16NativeType">
            <summary>
            Gets the native type of the 16-bit integer.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NUInt32NativeType">
            <summary>
            Gets the native type of the unsigned 32-bit integer.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NInt32NativeType">
            <summary>
            Gets the native type of the 32-bit integer.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NUInt64NativeType">
            <summary>
            Gets the native type of the unsigned 64-bit integer.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NInt64NativeType">
            <summary>
            Gets the native type of the 64-bit integer.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NSingleNativeType">
            <summary>
            Gets the native type of the floating point value.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NDoubleNativeType">
            <summary>
            Gets the native type of the double number.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NBooleanNativeType">
            <summary>
            Gets the native type of the Boolean value.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NSizeTypeNativeType">
            <summary>
            Gets the native type of the unsigned integer pointer.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NSSizeTypeNativeType">
            <summary>
            Gets the native type of the integer pointer.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NPointerNativeType">
            <summary>
            Gets the native type of the pointer.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NResultNativeType">
            <summary>
            Gets the native type of the NResult value.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NACharNativeType">
            <summary>
            Gets the native type of the ASCII char.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NWCharNativeType">
            <summary>
            Gets the native type of the Unicode char.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NCharNativeType">
            <summary>
            Gets the native type of the char.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NStringNativeType">
            <summary>
            Gets the native type of the string.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NCallbackNativeType">
            <summary>
            Gets the native type of the callback.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NativeType">
            <summary>
            Gets the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NTimeSpanNativeType">
            <summary>
            Gets the native type of the NTimeSpan value.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NDateTimeNativeType">
            <summary>
            Gets the native type of the NDateTime object.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NGuidNativeType">
            <summary>
            Gets the native type of the global unique identifier.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NMemoryTypeNativeType">
            <summary>
            Gets the native type of the memory type.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NAttributesNativeType">
            <summary>
            Gets the native type of the NAttributes value.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NOSFamilyNativeType">
            <summary>
            Gets the native type of the OS family.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.NameStringPairNativeType">
            <summary>
            Gets the native type of the name string pair.
            </summary>
        </member>
        <member name="P:Neurotec.NTypes.OSFamilyCurrent">
            <summary>
            Gets the current OS family.
            </summary>
        </member>
        <member name="T:Neurotec.NValue">
            <summary>
            Provides functionality for management and conversion of values of different types.
            </summary>
        </member>
        <member name="M:Neurotec.NValue.FromObject(System.Object,Neurotec.NAttributes)">
            <summary>
            Creates a new value from the specified object.
            </summary>
            <param name="value">The original object.</param>
            <param name="attributes">Value attributes.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Neurotec.NValue.FromObject(System.Object)">
            <summary>
            Creates a new value from the specified object.
            </summary>
            <param name="value">The original object.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Neurotec.NValue.FromType``1(``0,Neurotec.NAttributes)">
            <summary>
            Creates a new value from the specified type.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The original type.</param>
            <param name="attributes">Value attributes.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Neurotec.NValue.FromType``1(``0)">
            <summary>
            Creates a new value from the specified type.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The original type.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Neurotec.NValue.FromPointer(System.IntPtr,Neurotec.NAttributes)">
            <summary>
            Creates a new value from the specified pointer.
            </summary>
            <param name="value">The original pointer.</param>
            <param name="attributes">Value attributes.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Neurotec.NValue.FromPointer(System.IntPtr)">
            <summary>
            Creates a new value from the specified pointer.
            </summary>
            <param name="value">The original pointer.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Neurotec.NValue.FromResult(System.Int32,Neurotec.NAttributes)">
            <summary>
            Creates a new value from the specified result.
            </summary>
            <param name="value">The original result.</param>
            <param name="attributes">Value attributes.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Neurotec.NValue.FromResult(System.Int32)">
            <summary>
            Creates a new value from the specified result.
            </summary>
            <param name="value">The original result.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Neurotec.NValue.FromString(System.String,Neurotec.NAttributes)">
            <summary>
            Creates a new value from the specified string.
            </summary>
            <param name="value">The original string.</param>
            <param name="attributes">Value attributes.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Neurotec.NValue.FromString(System.String)">
            <summary>
            Creates a new value from the specified string.
            </summary>
            <param name="value">The original string.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Neurotec.NValue.FromObject(Neurotec.NType,Neurotec.NObject,Neurotec.NAttributes)">
            <summary>
            Creates a new value from the specified object.
            </summary>
            <param name="type">Type of the object.</param>
            <param name="value">The original object.</param>
            <param name="attributes">Value attributes.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Neurotec.NValue.FromObject(Neurotec.NType,Neurotec.NObject)">
            <summary>
            Creates a new value from the specified object.
            </summary>
            <param name="type">Type of the object.</param>
            <param name="value">The original object.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Neurotec.NValue.ChangeType(Neurotec.NValue,Neurotec.NType,Neurotec.NAttributes,System.String)">
            <summary>
            Changes the type of the specified value to the new type.
            </summary>
            <param name="srcValue">The original value.</param>
            <param name="type">The new type of the value.</param>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns></returns>
        </member>
        <member name="M:Neurotec.NValue.ChangeType(Neurotec.NValue,Neurotec.NType,Neurotec.NAttributes)">
            <summary>
            Changes the type of the specified value to the new type.
            </summary>
            <param name="srcValue">The original value.</param>
            <param name="type">The new type of the value.</param>
            <param name="attributes">Value attributes.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Neurotec.NValue.ChangeType(Neurotec.NValue,Neurotec.NType)">
            <summary>
            Changes the type of the specified value to the new type.
            </summary>
            <param name="srcValue">The original value.</param>
            <param name="type">The new type of the value.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToObject(Neurotec.NValue)">
            <summary>
            Converts the specified value into an object.
            </summary>
            <param name="value">The original value.</param>
            <returns>The new value.</returns>
        </member>
        <member name="P:Neurotec.NValue.NativeType">
            <summary>
            Defines the native type of the object.
            </summary>
        </member>
        <member name="P:Neurotec.NValue.KeyValuePairNativeType">
            <summary>
            Defines the native type of the key value pair structure.
            </summary>
        </member>
        <member name="P:Neurotec.NValue.NameValuePairNativeType">
            <summary>
            Defines the native type of the name value pair structure.
            </summary>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original byte.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.Byte,Neurotec.NAttributes)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original byte.</param>
            <param name="attributes">Value attributes.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.SByte)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original signed byte.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.SByte,Neurotec.NAttributes)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original signed byte.</param>
            <param name="attributes">Value attributes.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original unsigned short integer.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.UInt16,Neurotec.NAttributes)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original unsigned short integer.</param>
            <param name="attributes">Value attributes.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original short integer.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.Int16,Neurotec.NAttributes)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original short integer.</param>
            <param name="attributes">Value attributes.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original unsigned integer.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.UInt32,Neurotec.NAttributes)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original integer.</param>
            <param name="attributes">Value attributes.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original integer.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.Int32,Neurotec.NAttributes)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original integer.</param>
            <param name="attributes">Value attributes.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original unsigned long integer.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.UInt64,Neurotec.NAttributes)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original unsigned long integer.</param>
            <param name="attributes">Value attributes.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original long integer.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.Int64,Neurotec.NAttributes)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original long integer.</param>
            <param name="attributes">Value attributes.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original floating point value.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.Single,Neurotec.NAttributes)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original floating point value.</param>
            <param name="attributes">Value attributes.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original double value.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.Double,Neurotec.NAttributes)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original double value.</param>
            <param name="attributes">Value attributes.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original Boolean value.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.Boolean,Neurotec.NAttributes)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original Boolean value.</param>
            <param name="attributes">Value attributes.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.UIntPtr)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original pointer.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.UIntPtr,Neurotec.NAttributes)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original pointer.</param>
            <param name="attributes">Value attributes.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original pointer.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.IntPtr,Neurotec.NAttributes)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original pointer.</param>
            <param name="attributes">Value attributes.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original char.</param>
        </member>
        <member name="M:Neurotec.NValue.#ctor(System.Char,Neurotec.NAttributes)">
            <summary>
            Initializes a new instance of the NValue class.
            </summary>
            <param name="value">The original char.</param>
            <param name="attributes">Value attributes.</param>
        </member>
        <member name="M:Neurotec.NValue.ToObject">
            <summary>
            Converts the specified value into an object.
            </summary>
            <returns>New object.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToType(System.Type,Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into a value of specified type.
            </summary>
            <param name="type">Type of the value.</param>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New value.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToType(System.Type,Neurotec.NAttributes)">
            <summary>
            Converts the specified value into a value of specified type.
            </summary>
            <param name="type">Type of the value.</param>
            <param name="attributes">Value attributes.</param>
            <returns>New value.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToType(System.Type)">
            <summary>
            Converts the specified value into a value of specified type.
            </summary>
            <param name="type">Type of the value.</param>
            <returns>New value.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToType``1(Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into a value of specified type.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New value.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToType``1(Neurotec.NAttributes)">
            <summary>
            Converts the specified value into a value of specified type.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="attributes">Value attributes.</param>
            <returns>New value.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToType``1">
            <summary>
            Converts the specified value into a value of specified type.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <returns>New value.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToByte(Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into a byte.
            </summary>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New byte.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToByte(Neurotec.NAttributes)">
            <summary>
            Converts the specified value into a byte.
            </summary>
            <param name="attributes">Value attributes.</param>
            <returns>New byte.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToByte">
            <summary>
            Converts the specified value into a byte.
            </summary>
            <returns>New byte.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToSByte(Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into a signed byte.
            </summary>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New signed byte.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToSByte(Neurotec.NAttributes)">
            <summary>
            Converts the specified value into a signed byte.
            </summary>
            <param name="attributes">Value attributes.</param>
            <returns>New signed byte.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToSByte">
            <summary>
            Converts the specified value into a signed byte.
            </summary>
            <returns>New signed byte.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToUInt16(Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into an unsigned short integer.
            </summary>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New unsigned short integer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToUInt16(Neurotec.NAttributes)">
            <summary>
            Converts the specified value into an unsigned short integer.
            </summary>
            <param name="attributes">Value attributes.</param>
            <returns>New unsigned short integer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToUInt16">
            <summary>
            Converts the specified value into an unsigned short integer.
            </summary>
            <returns>New unsigned short integer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToInt16(Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into a short integer.
            </summary>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New short integer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToInt16(Neurotec.NAttributes)">
            <summary>
            Converts the specified value into a short integer.
            </summary>
            <param name="attributes">Value attributes.</param>
            <returns>New short integer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToInt16">
            <summary>
            Converts the specified value into a short integer.
            </summary>
            <returns>New short integer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToUInt32(Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into an unsigned integer.
            </summary>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New unsigned integer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToUInt32(Neurotec.NAttributes)">
            <summary>
            Converts the specified value into an unsigned integer.
            </summary>
            <param name="attributes">Value attributes.</param>
            <returns>New unsigned integer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToUInt32">
            <summary>
            Converts the specified value into an unsigned integer.
            </summary>
            <returns>New unsigned integer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToInt32(Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into an integer.
            </summary>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New integer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToInt32(Neurotec.NAttributes)">
            <summary>
            Converts the specified value into an integer.
            </summary>
            <param name="attributes">Value attributes.</param>
            <returns>New integer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToInt32">
            <summary>
            Converts the specified value into an integer.
            </summary>
            <returns>New integer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToUInt64(Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into an unsigned long integer.
            </summary>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New unsigned long integer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToUInt64(Neurotec.NAttributes)">
            <summary>
            Converts the specified value into an unsigned long integer.
            </summary>
            <param name="attributes">Value attributes.</param>
            <returns>New unsigned long integer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToUInt64">
            <summary>
            Converts the specified value into an unsigned long integer.
            </summary>
            <returns>New unsigned long integer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToInt64(Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into a long integer.
            </summary>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New long integer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToInt64(Neurotec.NAttributes)">
            <summary>
            Converts the specified value into a long integer.
            </summary>
            <param name="attributes">Value attributes.</param>
            <returns>New long integer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToInt64">
            <summary>
            Converts the specified value into a long integer.
            </summary>
            <returns>New long integer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToSingle(Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into a floating point value.
            </summary>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New floating point value.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToSingle(Neurotec.NAttributes)">
            <summary>
            Converts the specified value into a floating point value.
            </summary>
            <param name="attributes">Value attributes.</param>
            <returns>New floating point value.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToSingle">
            <summary>
            Converts the specified value into a floating point value.
            </summary>
            <returns>New floating point value.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToDouble(Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into a double number.
            </summary>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New double number.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToDouble(Neurotec.NAttributes)">
            <summary>
            Converts the specified value into a double number.
            </summary>
            <param name="attributes">Value attributes.</param>
            <returns>New double number.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToDouble">
            <summary>
            Converts the specified value into a double number.
            </summary>
            <returns>New double number.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToBoolean(Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into a Boolean value.
            </summary>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New Boolean value.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToBoolean(Neurotec.NAttributes)">
            <summary>
            Converts the specified value into a Boolean value.
            </summary>
            <param name="attributes">Value attributes.</param>
            <returns>New Boolean value.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToBoolean">
            <summary>
            Converts the specified value into a Boolean value.
            </summary>
            <returns>New Boolean value.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToUIntPtr(Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into a pointer.
            </summary>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New unsigned integer pointer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToUIntPtr(Neurotec.NAttributes)">
            <summary>
            Converts the specified value into a pointer.
            </summary>
            <param name="attributes">Value attributes.</param>
            <returns>New unsigned integer pointer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToUIntPtr">
            <summary>
            Converts the specified value into a pointer.
            </summary>
            <returns>New unsigned integer pointer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToIntPtr(Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into a pointer.
            </summary>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New integer pointer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToIntPtr(Neurotec.NAttributes)">
            <summary>
            Converts the specified value into a pointer.
            </summary>
            <param name="attributes">Value attributes.</param>
            <returns>New integer pointer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToIntPtr">
            <summary>
            Converts the specified value into a pointer.
            </summary>
            <returns>New integer pointer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToPointer(Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into a pointer.
            </summary>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New pointer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToPointer(Neurotec.NAttributes)">
            <summary>
            Converts the specified value into a pointer.
            </summary>
            <param name="attributes">Value attributes.</param>
            <returns>New pointer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToPointer">
            <summary>
            Converts the specified value into a pointer.
            </summary>
            <returns>New pointer.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToResult(Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into a result.
            </summary>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New result.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToResult(Neurotec.NAttributes)">
            <summary>
            Converts the specified value into a result.
            </summary>
            <param name="attributes">Value attributes.</param>
            <returns>New result.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToResult">
            <summary>
            Converts the specified value into a result.
            </summary>
            <returns>New result.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToChar(Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into a char.
            </summary>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New char.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToChar(Neurotec.NAttributes)">
            <summary>
            Converts the specified value into a char.
            </summary>
            <param name="attributes">Value attributes.</param>
            <returns>New char.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToChar">
            <summary>
            Converts the specified value into a char.
            </summary>
            <returns>New char.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToString(Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into a string.
            </summary>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New string.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToString(Neurotec.NAttributes)">
            <summary>
            Converts the specified value into a string.
            </summary>
            <param name="attributes">Value attributes.</param>
            <returns>New string.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToObject(Neurotec.NType,Neurotec.NAttributes,System.String)">
            <summary>
            Converts the specified value into an object.
            </summary>
            <param name="type">Type of the object.</param>
            <param name="attributes">Value attributes.</param>
            <param name="format">Format string.</param>
            <returns>New object.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToObject(Neurotec.NType,Neurotec.NAttributes)">
            <summary>
            Converts the specified value into an object.
            </summary>
            <param name="type">Type of the object.</param>
            <param name="attributes">Value attributes.</param>
            <returns>New object.</returns>
        </member>
        <member name="M:Neurotec.NValue.ToObject(Neurotec.NType)">
            <summary>
            Converts the specified value into an object.
            </summary>
            <param name="type">Type of the object.</param>
            <returns>New object.</returns>
        </member>
        <member name="P:Neurotec.NValue.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
        </member>
        <member name="P:Neurotec.NValue.Attributes">
            <summary>
            Gets the value attributes.
            </summary>
        </member>
        <member name="P:Neurotec.NValue.IsWrapper">
            <summary>
            Checks whether the value is a wrapper.
            </summary>
        </member>
        <member name="P:Neurotec.NValue.Ptr">
            <summary>
            Gets a pointer to the value.
            </summary>
        </member>
        <member name="P:Neurotec.NValue.NativeSize">
            <summary>
            Gets the native size of the value.
            </summary>
        </member>
        <member name="P:Neurotec.NValue.TypeCode">
            <summary>
            Gets the type code of the value.
            </summary>
        </member>
        <member name="P:Neurotec.NValue.Size">
            <summary>
            Gets the size of the value.
            </summary>
        </member>
        <member name="P:Neurotec.NValue.LongSize">
            <summary>
            Gets the size of the value (64-bit).
            </summary>
        </member>
        <member name="T:Neurotec.Runtime.InteropServices.ClrException">
            <summary>
            Exception wrapping CLR exception passed through unmanaged code.
            </summary>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.ClrException.#ctor">
            <summary>
            Initializes a new instance of ClrException class.
            </summary>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.ClrException.#ctor(System.String)">
            <summary>
            Initializes a new instance of ClrException class.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.ClrException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of ClrException class.
            </summary>
            <param name="errorCode">Error code.</param>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.ClrException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of ClrException class.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.ClrException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of ClrException class.
            </summary>
            <param name="errorCode">Error code.</param>
            <param name="message">Error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Neurotec.Runtime.InteropServices.CppException">
            <summary>
            C++ exception.
            </summary>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.CppException.#ctor">
            <summary>
            Initializes a new instance of CppException class.
            </summary>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.CppException.#ctor(System.String)">
            <summary>
            Initializes a new instance of CppException class.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.CppException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of CppException class.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Neurotec.Runtime.InteropServices.JvmException">
            <summary>
            JVM exception.
            </summary>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.JvmException.#ctor">
            <summary>
            Initializes a new instance of JvmException class.
            </summary>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.JvmException.#ctor(System.String)">
            <summary>
            Initializes a new instance of JvmException class.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.JvmException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of JvmException class.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Neurotec.Runtime.InteropServices.MacException">
            <summary>
            MacOS exception.
            </summary>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.MacException.#ctor">
            <summary>
            Initializes a new instance of MacException class.
            </summary>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.MacException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of MacException class.
            </summary>
            <param name="err">Error code.</param>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.MacException.#ctor(System.String)">
            <summary>
            Initializes a new instance of MacException class.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.MacException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of MacException class.
            </summary>
            <param name="err">Error code.</param>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.MacException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of MacException class.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.MacException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of MacException class.
            </summary>
            <param name="err">Error code.</param>
            <param name="message">Error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.MacException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data,
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.MacException.ToString">
            <summary>
            Gets a string representation of the current error.
            </summary>
            <returns>An error representing the current object.</returns>
        </member>
        <member name="P:Neurotec.Runtime.InteropServices.MacException.Err">
            <summary>
            Gets system error's code.
            </summary>
            <value>
            System error's code.
            </value>
        </member>
        <member name="P:Neurotec.Runtime.InteropServices.MacException.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
        </member>
        <member name="T:Neurotec.Runtime.InteropServices.NeurotecExternalException">
            <summary>
            Base class for Neurotechnology external exception classes.
            </summary>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.NeurotecExternalException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:Neurotec.Runtime.InteropServices.NeurotecExternalException.StackTrace">
            <summary>
            Gets the error stack trace.
            </summary>
        </member>
        <member name="P:Neurotec.Runtime.InteropServices.NeurotecExternalException.Code">
            <summary>
            Gets the error code.
            </summary>
        </member>
        <member name="T:Neurotec.Runtime.InteropServices.SysException">
            <summary>
            Sys exception.
            </summary>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.SysException.#ctor">
            <summary>
            Initializes a new instance of SysException class.
            </summary>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.SysException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of SysException class.
            </summary>
            <param name="errno">Error code.</param>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.SysException.#ctor(System.String)">
            <summary>
            Initializes a new instance of SysException class.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.SysException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of SysException class.
            </summary>
            <param name="errno">Error code.</param>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.SysException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of SysException class.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.SysException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of SysException class.
            </summary>
            <param name="errno">Error code.</param>
            <param name="message">Error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.SysException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Neurotec.Runtime.InteropServices.SysException.ToString">
            <summary>
            Gets the string representation of the current object.
            </summary>
            <returns>String representing the current object.</returns>
        </member>
        <member name="P:Neurotec.Runtime.InteropServices.SysException.Errno">
            <summary>
            Gets system error's code.
            </summary>
            <value>
            System error's code.
            </value>
        </member>
        <member name="P:Neurotec.Runtime.InteropServices.SysException.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
        </member>
        <member name="T:Neurotec.Text.NEncoding">
            <summary>
            Enumerates encoding options.
            </summary>
        </member>
        <member name="F:Neurotec.Text.NEncoding.Default">
            <summary>
            The default encoding.
            </summary>
        </member>
        <member name="F:Neurotec.Text.NEncoding.Utf8">
            <summary>
            UTF8 encoding.
            </summary>
        </member>
        <member name="F:Neurotec.Text.NEncoding.Ascii">
            <summary>
            ASCII encoding.
            </summary>
        </member>
        <member name="F:Neurotec.Text.NEncoding.Utf7">
            <summary>
            UTF7 encoding.
            </summary>
        </member>
        <member name="F:Neurotec.Text.NEncoding.Utf16BE">
            <summary>
            UTF16BE encoding.
            </summary>
        </member>
        <member name="F:Neurotec.Text.NEncoding.Utf16LE">
            <summary>
            UTF16LE encoding.
            </summary>
        </member>
        <member name="F:Neurotec.Text.NEncoding.Utf32BE">
            <summary>
            UTF32BE encoding.
            </summary>
        </member>
        <member name="F:Neurotec.Text.NEncoding.Utf32LE">
            <summary>
            UTF32LE encoding.
            </summary>
        </member>
        <member name="T:Neurotec.Text.NEncodingEx">
            <summary>
            Represents a character encoding.
            </summary>
        </member>
        <member name="P:Neurotec.Text.NEncodingEx.NEncodingNativeType">
            <summary>
            Defines the native type of the encoding.
            </summary>
        </member>
    </members>
</doc>
